{"version":3,"file":"static/js/884.eae376c7.chunk.js","mappings":"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","sources":["components/Description.tsx","components/ClinicalTrial.tsx","utils/values.ts","components/Patient.tsx","components/Study.tsx","components/SlideItem.tsx","components/SlideList.tsx","components/AnnotationItem.tsx","components/AnnotationList.tsx","components/AnnotationGroupItem.tsx","components/AnnotationGroupList.tsx","components/Button.tsx","components/Equipment.tsx","utils/sr.tsx","components/Report.tsx","components/Item.tsx","data/specimens.tsx","components/SpecimenItem.tsx","components/SpecimenList.tsx","components/OpticalPathItem.tsx","components/OpticalPathList.tsx","components/MappingItem.tsx","components/MappingList.tsx","components/SegmentItem.tsx","components/SegmentList.tsx","data/uids.tsx","utils/router.tsx","components/SlideViewer.tsx","data/slides.tsx","components/CaseViewer.tsx","components/Header.tsx","components/InfoPage.tsx","components/Worklist.tsx","utils/url.tsx","auth/OidcManager.tsx","utils/xhrRetryHook.ts","DicomWebManager.ts","App.tsx"],"sourcesContent":["import React from 'react'\r\nimport { v4 as generateUUID } from 'uuid'\r\nimport { Card, Descriptions } from 'antd'\r\n\r\nexport interface Attribute {\r\n  name: string\r\n  value: any\r\n}\r\n\r\nexport interface AttributeGroup {\r\n  name: string\r\n  attributes: Attribute[]\r\n}\r\n\r\ninterface DescriptionProps {\r\n  header?: string\r\n  icon?: any\r\n  attributes: Attribute[]\r\n  selectable?: boolean\r\n  hasLongValues?: boolean\r\n  methods?: React.ReactNode[]\r\n  children?: React.ReactNode\r\n}\r\n\r\n/**\r\n * React component for a description consisting of a header containing a\r\n * header and a body containing a list of name-value pairs.\r\n */\r\nclass Description extends React.Component<DescriptionProps, {}> {\r\n  render (): React.ReactNode {\r\n    let layout: 'horizontal' | 'vertical' = 'horizontal'\r\n    let labelLineHeight = '14px'\r\n    const contentLineHeight = '14px'\r\n    if (this.props.hasLongValues !== undefined && this.props.hasLongValues) {\r\n      layout = 'vertical'\r\n      labelLineHeight = '20px'\r\n    }\r\n    const items = this.props.attributes.map((item: Attribute, index: number) => {\r\n      const uid = generateUUID()\r\n      return (\r\n        <Descriptions.Item\r\n          key={uid}\r\n          label={item.name}\r\n          labelStyle={{\r\n            lineHeight: labelLineHeight\r\n          }}\r\n          contentStyle={{\r\n            fontWeight: 600,\r\n            whiteSpace: 'pre-line',\r\n            lineHeight: contentLineHeight\r\n          }}\r\n          span={1}\r\n        >\r\n          {item.value}\r\n        </Descriptions.Item>\r\n      )\r\n    })\r\n    let icon = null\r\n    if (this.props.icon !== undefined) {\r\n      icon = <this.props.icon />\r\n    }\r\n    return (\r\n      <Card\r\n        title={this.props.header}\r\n        extra={icon}\r\n        size='small'\r\n        hoverable={this.props.selectable}\r\n        bordered={this.props.header !== undefined}\r\n        actions={this.props.methods}\r\n      >\r\n        <Descriptions\r\n          column={1}\r\n          size='small'\r\n          layout={layout}\r\n          bordered={false}\r\n        >\r\n          {items}\r\n        </Descriptions>\r\n        {this.props.children}\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Description\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport Description from './Description'\r\n\r\ninterface ClinicalTrialProps {\r\n  metadata: dmv.metadata.SOPClass\r\n}\r\n\r\n/**\r\n * React component representing a DICOM ClinicalTrial Information Entity that displays\r\n * common study-level attributes of contained DICOM Slide Microscopy images.\r\n */\r\nclass ClinicalTrial extends React.Component<ClinicalTrialProps> {\r\n  render (): React.ReactNode {\r\n    const attributes = []\r\n    if (this.props.metadata.ClinicalTrialSponsorName != null) {\r\n      // Attributes of Clinical Trial Subject module\r\n      attributes.push(\r\n        ...[\r\n          {\r\n            name: 'Sponsor Name',\r\n            value: this.props.metadata.ClinicalTrialSponsorName\r\n          },\r\n          {\r\n            name: 'Protocol ID',\r\n            value: this.props.metadata.ClinicalTrialProtocolID\r\n          },\r\n          {\r\n            name: 'Protocol Name',\r\n            value: this.props.metadata.ClinicalTrialProtocolName\r\n          },\r\n          {\r\n            name: 'Site Name',\r\n            value: this.props.metadata.ClinicalTrialSiteName\r\n          }\r\n        ]\r\n      )\r\n    }\r\n    if (this.props.metadata.ClinicalTrialTimePointID != null) {\r\n      // Attributes of Clinical Trial Study module\r\n      attributes.push(\r\n        {\r\n          name: 'Time Point ID',\r\n          value: this.props.metadata.ClinicalTrialTimePointID\r\n        }\r\n      )\r\n    }\r\n    // Attributes of Clinical Trial Subject module\r\n    return <Description attributes={attributes} />\r\n  }\r\n}\r\n\r\nexport default ClinicalTrial\r\n","import * as dmv from 'dicom-microscopy-viewer'\r\n\r\nfunction parseName (value: dmv.metadata.PersonName|null|undefined): string {\r\n  if (typeof value === 'object' && value !== null && value !== undefined) {\r\n    if (value.Alphabetic !== undefined) {\r\n      return value.Alphabetic.split('^').join(' ')\r\n    }\r\n    return ''\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction parseDate (value: string|null|undefined): string {\r\n  if (value !== null && value !== undefined) {\r\n    const year = value.substring(0, 4)\r\n    const month = value.substring(4, 6)\r\n    const day = value.substring(6, 8)\r\n    return `${year}-${month}-${day}`\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction parseTime (value: string|null|undefined): string {\r\n  if (value !== null && value !== undefined) {\r\n    const hours = value.substring(0, 2)\r\n    const minutes = value.substring(2, 4)\r\n    const seconds = value.substring(4, 6)\r\n    return `${hours}:${minutes}:${seconds}`\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction parseDateTime (value: string|null|undefined): string {\r\n  if (value !== null && value !== undefined) {\r\n    const year = value.substring(0, 4)\r\n    const month = value.substring(4, 6)\r\n    const day = value.substring(6, 8)\r\n    const hours = value.substring(8, 10)\r\n    const minutes = value.substring(10, 12)\r\n    const seconds = value.substring(12, 14)\r\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\r\n  }\r\n  return ''\r\n}\r\n\r\nfunction parseSex (value: string|null|undefined): string {\r\n  const lut: { [key: string]: string } = {\r\n    F: 'Female',\r\n    M: 'Male',\r\n    O: 'Other'\r\n  }\r\n  if (value !== null && value !== undefined) {\r\n    return lut[value]\r\n  }\r\n  return ''\r\n}\r\n\r\nexport { parseDate, parseDateTime, parseName, parseSex, parseTime }\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport Description from './Description'\r\nimport { parseName, parseSex, parseDate } from '../utils/values'\r\n\r\ninterface PatientProps {\r\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\r\n}\r\n\r\n/**\r\n * React component representing a DICOM Patient Information Entity that\r\n * displays common study-level, patient-related attributes of contained\r\n * DICOM Slide Microscopy images.\r\n */\r\nclass Patient extends React.Component<PatientProps, {}> {\r\n  render (): React.ReactNode {\r\n    const attributes = [\r\n      {\r\n        name: 'ID',\r\n        value: this.props.metadata.PatientID\r\n      },\r\n      {\r\n        name: 'Name',\r\n        value: parseName(this.props.metadata.PatientName)\r\n      },\r\n      {\r\n        name: 'Gender',\r\n        value: parseSex(this.props.metadata.PatientSex)\r\n      },\r\n      {\r\n        name: 'Birthdate',\r\n        value: parseDate(this.props.metadata.PatientBirthDate)\r\n      }\r\n    ]\r\n    return (\r\n      <Description attributes={attributes} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Patient\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport Description from './Description'\r\nimport { parseDate, parseTime } from '../utils/values'\r\n\r\ninterface StudyProps {\r\n  metadata: dmv.metadata.Study|dmv.metadata.SOPClass\r\n}\r\n\r\n/**\r\n * React component representing a DICOM Study Information Entity that displays\r\n * common study-level attributes of contained DICOM Slide Microscopy images.\r\n */\r\nclass Study extends React.Component<StudyProps> {\r\n  render (): React.ReactNode {\r\n    const attributes = [\r\n      {\r\n        name: 'Accession #',\r\n        value: this.props.metadata.AccessionNumber\r\n      },\r\n      {\r\n        name: 'ID',\r\n        value: this.props.metadata.StudyID\r\n      },\r\n      {\r\n        name: 'Date',\r\n        value: parseDate(this.props.metadata.StudyDate)\r\n      },\r\n      {\r\n        name: 'Time',\r\n        value: parseTime(this.props.metadata.StudyTime)\r\n      }\r\n    ]\r\n    return <Description attributes={attributes} />\r\n  }\r\n}\r\n\r\nexport default Study\r\n","import React from 'react'\r\nimport { FaSpinner } from 'react-icons/fa'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { Menu } from 'antd'\r\n\r\nimport DicomWebManager from '../DicomWebManager'\r\nimport Description from './Description'\r\nimport { Slide } from '../data/slides'\r\n\r\ninterface SlideItemProps {\r\n  client: DicomWebManager\r\n  slide: Slide\r\n}\r\n\r\ninterface SlideItemState {\r\n  isLoading: boolean\r\n}\r\n\r\n/**\r\n * React component representing a DICOM Series Information Entity that displays\r\n * common series-level attributes of contained DICOM Slide Microscopy images\r\n * as well as the OVERVIEW image (if available).\r\n * When selected a Slide Viewer instance is created for the display of the\r\n * contained images.\r\n */\r\nclass SlideItem extends React.Component<SlideItemProps, SlideItemState> {\r\n  state = {\r\n    isLoading: false\r\n  }\r\n\r\n  private readonly overviewViewportRef = React.createRef<HTMLDivElement>()\r\n\r\n  private overviewViewer?: dmv.viewer.OverviewImageViewer\r\n\r\n  constructor (props: SlideItemProps) {\r\n    super(props)\r\n    this.overviewViewer = undefined\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    this.setState({ isLoading: true })\r\n    if (this.props.slide.overviewImages.length > 0) {\r\n      const metadata = this.props.slide.overviewImages[0]\r\n      if (this.overviewViewportRef.current !== null) {\r\n        this.overviewViewportRef.current.innerHTML = ''\r\n        console.info(\r\n          'instantiate viewer for OVERVIEW image of series ' +\r\n          metadata.SeriesInstanceUID\r\n        )\r\n        this.overviewViewer = new dmv.viewer.OverviewImageViewer({\r\n          client: this.props.client,\r\n          metadata: metadata,\r\n          resizeFactor: 1\r\n        })\r\n        this.overviewViewer.render({\r\n          container: this.overviewViewportRef.current\r\n        })\r\n      }\r\n    }\r\n\r\n    this.setState({ isLoading: false })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    if (this.overviewViewer !== undefined) {\r\n      this.overviewViewer.render({\r\n        container: this.overviewViewportRef.current\r\n      })\r\n      this.overviewViewer.resize()\r\n    }\r\n    const attributes = []\r\n    const description = this.props.slide.description\r\n    if (description != null && description !== '') {\r\n      attributes.push({\r\n        name: 'Description',\r\n        value: description\r\n      })\r\n    }\r\n    if (this.state.isLoading) {\r\n      return (<FaSpinner />)\r\n    }\r\n\r\n    /* Properties need to be propagated down to Menu.Item:\r\n     * https://github.com/react-component/menu/issues/142\r\n     */\r\n    return (\r\n      <Menu.Item\r\n        style={{ height: '100%' }}\r\n        key={this.props.slide.seriesInstanceUIDs[0]}\r\n        {...this.props}\r\n      >\r\n        <Description\r\n          header={this.props.slide.containerIdentifier}\r\n          attributes={attributes}\r\n          selectable\r\n        >\r\n          <div style={{ height: '100px' }} ref={this.overviewViewportRef} />\r\n        </Description>\r\n      </Menu.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SlideItem\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\n\r\nimport DicomWebManager from '../DicomWebManager'\r\nimport SlideItem from './SlideItem'\r\nimport { Slide } from '../data/slides'\r\n\r\ninterface SlideListProps {\r\n  metadata: Slide[]\r\n  client: DicomWebManager\r\n  selectedSeriesInstanceUID: string\r\n  onSeriesSelection: (\r\n    { seriesInstanceUID }: { seriesInstanceUID: string }\r\n  ) => void\r\n}\r\n\r\ninterface SlideListState {\r\n  selectedSeriesInstanceUID: string\r\n}\r\n\r\n/**\r\n * React component representing a list of DICOM Series Information Entities.\r\n */\r\nclass SlideList extends React.Component<SlideListProps, SlideListState> {\r\n  state = {\r\n    selectedSeriesInstanceUID: this.props.selectedSeriesInstanceUID\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    this.props.onSeriesSelection({\r\n      seriesInstanceUID: this.state.selectedSeriesInstanceUID\r\n    })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const slideList = this.props.metadata\r\n    const slideItemList = []\r\n    for (let i = 0; i < slideList.length; ++i) {\r\n      const slide = slideList[i]\r\n      const slideItem = (\r\n        <SlideItem\r\n          key={slide.seriesInstanceUIDs[0]}\r\n          slide={slide}\r\n          client={this.props.client}\r\n        />\r\n      )\r\n\r\n      slideItemList.push(slideItem)\r\n    }\r\n\r\n    const handleMenuItemSelection = ({ key, keyPath, domEvent, selectedKeys }: {\r\n      key: React.ReactText\r\n      keyPath: React.ReactText[]\r\n      domEvent: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>\r\n      selectedKeys?: React.ReactText[]\r\n    }): void => {\r\n      console.info(`select slide \"${key}\"`)\r\n      this.setState({ selectedSeriesInstanceUID: key.toString() })\r\n      this.props.onSeriesSelection({ seriesInstanceUID: key.toString() })\r\n    }\r\n\r\n    let selectedKeys\r\n    if (this.state.selectedSeriesInstanceUID !== undefined &&\r\n      this.state.selectedSeriesInstanceUID !== null) {\r\n      selectedKeys = [this.state.selectedSeriesInstanceUID]\r\n    }\r\n\r\n    return (\r\n      <Menu\r\n        style={{ width: '100%' }}\r\n        selectedKeys={selectedKeys}\r\n        onSelect={handleMenuItemSelection}\r\n        mode='inline'\r\n        inlineIndent={0}\r\n      >\r\n        {slideItemList}\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SlideList\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\nimport { Menu, Space, Switch } from 'antd'\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\r\n\r\nimport Description from './Description'\r\n\r\ninterface AnnotationItemProps {\r\n  roi: dmv.roi.ROI\r\n  index: number\r\n  isVisible: boolean\r\n  onVisibilityChange: ({ roiUID, isVisible }: {\r\n    roiUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n}\r\n\r\n/**\r\n * React component representing a Region of Interest (ROI) annotation.\r\n */\r\nclass AnnotationItem extends React.Component<AnnotationItemProps, {}> {\r\n  constructor (props: AnnotationItemProps) {\r\n    super(props)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n  }\r\n\r\n  handleVisibilityChange (checked: boolean, event: Event): void {\r\n    this.props.onVisibilityChange({\r\n      roiUID: this.props.roi.uid,\r\n      isVisible: checked\r\n    })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const identifier = `ROI ${this.props.index + 1}`\r\n    const attributes: Array<{ name: string, value: string }> = []\r\n    /**\r\n     * This hack is required for Menu.Item to work properly:\r\n     * https://github.com/react-component/menu/issues/142\r\n     */\r\n    const { isVisible, onVisibilityChange, ...otherProps } = this.props\r\n    this.props.roi.evaluations.forEach((\r\n      item: (\r\n        dcmjs.sr.valueTypes.TextContentItem |\r\n        dcmjs.sr.valueTypes.CodeContentItem\r\n      )\r\n    ) => {\r\n      const nameValue = item.ConceptNameCodeSequence[0].CodeValue\r\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\r\n      const name = `${nameMeaning}`\r\n      if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\r\n        const codeContentItem = item as dcmjs.sr.valueTypes.CodeContentItem\r\n        const valueMeaning = codeContentItem.ConceptCodeSequence[0].CodeMeaning\r\n        // For consistency with Segment and Annotation Group\r\n        if (nameValue === '276214006') {\r\n          attributes.push({\r\n            name: 'Property category',\r\n            value: `${valueMeaning}`\r\n          })\r\n        } else if (nameValue === '121071') {\r\n          attributes.push({\r\n            name: 'Property type',\r\n            value: `${valueMeaning}`\r\n          })\r\n        } else if (nameValue === '111001') {\r\n          attributes.push({\r\n            name: 'Algorithm Name',\r\n            value: `${valueMeaning}`\r\n          })\r\n        } else {\r\n          attributes.push({\r\n            name: name,\r\n            value: `${valueMeaning}`\r\n          })\r\n        }\r\n      } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\r\n        const textContentItem = item as dcmjs.sr.valueTypes.TextContentItem\r\n        attributes.push({\r\n          name: name,\r\n          value: textContentItem.TextValue\r\n        })\r\n      }\r\n    })\r\n    this.props.roi.measurements.forEach(item => {\r\n      const nameMeaning = item.ConceptNameCodeSequence[0].CodeMeaning\r\n      const name = `${nameMeaning}`\r\n      const seq = item.MeasuredValueSequence[0]\r\n      const value = seq.NumericValue.toPrecision(6)\r\n      const unit = seq.MeasurementUnitsCodeSequence[0].CodeValue\r\n      attributes.push({\r\n        name: name,\r\n        value: `${value} ${unit}`\r\n      })\r\n    })\r\n    return (\r\n      <Space align='start'>\r\n        <div style={{ paddingLeft: '14px' }}>\r\n          <Switch\r\n            size='small'\r\n            onChange={this.handleVisibilityChange}\r\n            checked={this.props.isVisible}\r\n            checkedChildren={<FaEye />}\r\n            unCheckedChildren={<FaEyeSlash />}\r\n          />\r\n        </div>\r\n        <Menu.Item\r\n          style={{ height: '100%', paddingLeft: '3px' }}\r\n          key={this.props.roi.uid}\r\n          {...otherProps}\r\n        >\r\n          <Description\r\n            header={identifier}\r\n            attributes={attributes}\r\n            selectable\r\n            hasLongValues\r\n          />\r\n        </Menu.Item>\r\n      </Space>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AnnotationItem\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { Menu, Switch } from 'antd'\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\r\n\r\nimport AnnotationItem from './AnnotationItem'\r\n\r\ninterface AnnotationListProps {\r\n  rois: dmv.roi.ROI[]\r\n  selectedRoiUIDs: Set<string>\r\n  visibleRoiUIDs: Set<string>\r\n  onVisibilityChange: ({ roiUID, isVisible }: {\r\n    roiUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onSelection: ({ roiUID }: { roiUID: string }) => void\r\n}\r\n\r\n/**\r\n * React component representing a list of Region of Interest (ROI)\r\n * annotations.\r\n */\r\nclass AnnotationList extends React.Component<AnnotationListProps, {}> {\r\n  constructor (props: AnnotationListProps) {\r\n    super(props)\r\n    this.handleMenuItemSelection = this.handleMenuItemSelection.bind(this)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n  }\r\n\r\n  handleVisibilityChange (checked: boolean, event: Event): void {\r\n    if (checked) {\r\n      this.props.rois.forEach(roi => {\r\n        this.props.onVisibilityChange({ roiUID: roi.uid, isVisible: checked })\r\n      })\r\n    } else {\r\n      this.props.visibleRoiUIDs.forEach(roiUID => {\r\n        this.props.onVisibilityChange({ roiUID, isVisible: checked })\r\n      })\r\n    }\r\n  }\r\n\r\n  handleMenuItemSelection (object: any): void {\r\n    this.props.onSelection({ roiUID: object.key })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const items = this.props.rois.map((roi, index) => (\r\n      <AnnotationItem\r\n        key={roi.uid}\r\n        roi={roi}\r\n        index={index}\r\n        isVisible={this.props.visibleRoiUIDs.has(roi.uid)}\r\n        onVisibilityChange={this.props.onVisibilityChange}\r\n      />\r\n    ))\r\n\r\n    return (\r\n      <>\r\n        <div style={{ paddingLeft: '14px', paddingTop: '7px', paddingBottom: '7px' }}>\r\n          <Switch\r\n            size='small'\r\n            onChange={this.handleVisibilityChange}\r\n            checked={this.props.visibleRoiUIDs.size > 0}\r\n            checkedChildren={<FaEye />}\r\n            unCheckedChildren={<FaEyeSlash />}\r\n          />\r\n        </div>\r\n        <Menu\r\n          selectedKeys={[...this.props.selectedRoiUIDs.values()]}\r\n          onSelect={this.handleMenuItemSelection}\r\n          onClick={this.handleMenuItemSelection}\r\n        >\r\n          {items}\r\n        </Menu>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AnnotationList\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Col,\r\n  Divider,\r\n  InputNumber,\r\n  Menu,\r\n  Popover,\r\n  Row,\r\n  Select,\r\n  Slider,\r\n  Space,\r\n  Switch\r\n} from 'antd'\r\nimport { SettingOutlined } from '@ant-design/icons'\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\n\r\nimport Description from './Description'\r\n\r\ninterface AnnotationGroupItemProps {\r\n  annotationGroup: dmv.annotation.AnnotationGroup\r\n  isVisible: boolean\r\n  metadata: dmv.metadata.MicroscopyBulkSimpleAnnotations\r\n  defaultStyle: {\r\n    opacity: number\r\n  }\r\n  onVisibilityChange: ({ annotationGroupUID, isVisible }: {\r\n    annotationGroupUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onStyleChange: ({ annotationGroupUID, styleOptions }: {\r\n    annotationGroupUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n      measurement?: dcmjs.sr.coding.CodedConcept\r\n    }\r\n  }) => void\r\n}\r\n\r\ninterface AnnotationGroupItemState {\r\n  isVisible: boolean\r\n  currentStyle: {\r\n    opacity: number\r\n    measurement?: dcmjs.sr.coding.CodedConcept\r\n  }\r\n}\r\n\r\n/**\r\n * React component representing an Annotation Group.\r\n */\r\nclass AnnotationGroupItem extends React.Component<AnnotationGroupItemProps, AnnotationGroupItemState> {\r\n  constructor (props: AnnotationGroupItemProps) {\r\n    super(props)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    this.handleMeasurementSelection = this.handleMeasurementSelection.bind(this)\r\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\r\n    this.state = {\r\n      isVisible: this.props.isVisible,\r\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\r\n    }\r\n  }\r\n\r\n  handleVisibilityChange (\r\n    checked: boolean,\r\n    event: Event\r\n  ): void {\r\n    this.props.onVisibilityChange({\r\n      annotationGroupUID: this.props.annotationGroup.uid,\r\n      isVisible: checked\r\n    })\r\n  }\r\n\r\n  handleOpacityChange (value: number): void {\r\n    this.props.onStyleChange({\r\n      annotationGroupUID: this.props.annotationGroup.uid,\r\n      styleOptions: {\r\n        opacity: value\r\n      }\r\n    })\r\n    this.setState({ currentStyle: { opacity: value } })\r\n  }\r\n\r\n  handleMeasurementSelection (value?: string, option?: any): void {\r\n    if (value !== undefined) {\r\n      const codeComponents = value.split('-')\r\n      const measurement = new dcmjs.sr.coding.CodedConcept({\r\n        value: codeComponents[1],\r\n        schemeDesignator: codeComponents[0],\r\n        meaning: option.children\r\n      })\r\n      this.props.onStyleChange({\r\n        annotationGroupUID: this.props.annotationGroup.uid,\r\n        styleOptions: { measurement }\r\n      })\r\n      this.setState(state => ({\r\n        currentStyle: {\r\n          opacity: state.currentStyle.opacity,\r\n          measurement\r\n        }\r\n      }))\r\n    } else {\r\n      this.setState(state => ({\r\n        currentStyle: {\r\n          opacity: state.currentStyle.opacity\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const identifier = `Annotation Group ${this.props.annotationGroup.number}`\r\n    const attributes: Array<{ name: string, value: string }> = [\r\n      {\r\n        name: 'Label',\r\n        value: this.props.annotationGroup.label\r\n      },\r\n      {\r\n        name: 'Algorithm Name',\r\n        value: this.props.annotationGroup.algorithmName\r\n      },\r\n      {\r\n        name: 'Property category',\r\n        value: this.props.annotationGroup.propertyCategory.CodeMeaning\r\n      },\r\n      {\r\n        name: 'Property type',\r\n        value: this.props.annotationGroup.propertyType.CodeMeaning\r\n      }\r\n    ]\r\n\r\n    const index = this.props.metadata.AnnotationGroupSequence.findIndex(\r\n      item => (item.AnnotationGroupUID === this.props.annotationGroup.uid)\r\n    )\r\n    const item = this.props.metadata.AnnotationGroupSequence[index]\r\n    const measurementsSequence = item.MeasurementsSequence ?? []\r\n\r\n    const measurementOptions = measurementsSequence.map(measurementItem => {\r\n      const name = measurementItem.ConceptNameCodeSequence[0]\r\n      const key = `${name.CodingSchemeDesignator}-${name.CodeValue}`\r\n      return (\r\n        <Select.Option\r\n          key={key}\r\n          value={key}\r\n          dropdownMatchSelectWidth={false}\r\n          size='small'\r\n          disabled={!this.props.isVisible}\r\n        >\r\n          {name.CodeMeaning}\r\n        </Select.Option>\r\n      )\r\n    })\r\n\r\n    const settings = (\r\n      <div>\r\n        <Row justify='start' align='middle' gutter={[8, 8]}>\r\n          <Col span={6}>\r\n            Opacity\r\n          </Col>\r\n          <Col span={12}>\r\n            <Slider\r\n              range={false}\r\n              min={0}\r\n              max={1}\r\n              step={0.01}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <InputNumber\r\n              min={0}\r\n              max={1}\r\n              size='small'\r\n              step={0.1}\r\n              style={{ width: '65px' }}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Divider plain>\r\n          Exploration\r\n        </Divider>\r\n        <Row justify='start' align='middle' gutter={[8, 8]}>\r\n          <Col span={8}>\r\n            Measurement\r\n          </Col>\r\n          <Col span={16}>\r\n            <Select\r\n              style={{ minWidth: '65px', width: '90%' }}\r\n              onSelect={this.handleMeasurementSelection}\r\n              key='annotation-group-measurements'\r\n              defaultValue={undefined}\r\n            >\r\n              {measurementOptions}\r\n            </Select>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n\r\n    const {\r\n      annotationGroup,\r\n      defaultStyle,\r\n      isVisible,\r\n      metadata,\r\n      onVisibilityChange,\r\n      onStyleChange,\r\n      ...otherProps\r\n    } = this.props\r\n    return (\r\n      <Menu.Item\r\n        style={{ height: '100%', paddingLeft: '3px' }}\r\n        key={this.props.annotationGroup.uid}\r\n        {...otherProps}\r\n      >\r\n        <Space align='start'>\r\n          <div style={{ paddingLeft: '14px' }}>\r\n            <Space direction='vertical' align='end'>\r\n              <Switch\r\n                size='small'\r\n                onChange={this.handleVisibilityChange}\r\n                checked={this.props.isVisible}\r\n                checkedChildren={<FaEye />}\r\n                unCheckedChildren={<FaEyeSlash />}\r\n              />\r\n              <Popover\r\n                placement='left'\r\n                content={settings}\r\n                overlayStyle={{ width: '350px' }}\r\n                title='Display Settings'\r\n              >\r\n                <Button\r\n                  type='primary'\r\n                  shape='circle'\r\n                  icon={<SettingOutlined />}\r\n                />\r\n              </Popover>\r\n            </Space>\r\n          </div>\r\n          <Description\r\n            header={identifier}\r\n            attributes={attributes}\r\n            selectable\r\n            hasLongValues\r\n          />\r\n        </Space>\r\n      </Menu.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AnnotationGroupItem\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\n\r\nimport AnnotationGroupItem from './AnnotationGroupItem'\r\n\r\ninterface AnnotationGroupListProps {\r\n  annotationGroups: dmv.annotation.AnnotationGroup[]\r\n  visibleAnnotationGroupUIDs: Set<string>\r\n  metadata: {\r\n    [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\r\n  }\r\n  defaultAnnotationGroupStyles: {\r\n    [annotationGroupUID: string]: {\r\n      opacity: number\r\n    }\r\n  }\r\n  onAnnotationGroupVisibilityChange: ({ annotationGroupUID, isVisible }: {\r\n    annotationGroupUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onAnnotationGroupStyleChange: ({ annotationGroupUID, styleOptions }: {\r\n    annotationGroupUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n      measurement?: dcmjs.sr.coding.CodedConcept\r\n    }\r\n  }) => void\r\n}\r\n\r\n/**\r\n * React component representing a list of Annotation Groups.\r\n */\r\nclass AnnotationGroupList extends React.Component<AnnotationGroupListProps, {}> {\r\n  render (): React.ReactNode {\r\n    const items = this.props.annotationGroups.map((annotationGroup, index) => {\r\n      const uid = annotationGroup.uid\r\n      return (\r\n        <AnnotationGroupItem\r\n          key={annotationGroup.uid}\r\n          annotationGroup={annotationGroup}\r\n          metadata={this.props.metadata[uid]}\r\n          isVisible={this.props.visibleAnnotationGroupUIDs.has(uid)}\r\n          defaultStyle={this.props.defaultAnnotationGroupStyles[uid]}\r\n          onVisibilityChange={this.props.onAnnotationGroupVisibilityChange}\r\n          onStyleChange={this.props.onAnnotationGroupStyleChange}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <Menu selectable={false}>\r\n        {items}\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AnnotationGroupList\r\n","import React from 'react'\r\nimport { Button as Btn, Divider, Tooltip } from 'antd'\r\n\r\ninterface ButtonProps {\r\n  icon: any\r\n  tooltip?: string\r\n  label?: string\r\n  onClick?: (options: any) => void\r\n  isSelected?: boolean\r\n}\r\n\r\n/**\r\n * React component for a button.\r\n */\r\nclass Button extends React.Component<ButtonProps, {}> {\r\n  constructor (props: ButtonProps) {\r\n    super(props)\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick (event: React.SyntheticEvent): void {\r\n    if (this.props.onClick !== undefined) {\r\n      this.props.onClick(event)\r\n    }\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const Icon = this.props.icon\r\n    if (Icon === undefined) {\r\n      return null\r\n    }\r\n\r\n    let text\r\n    if (this.props.label != null) {\r\n      text = (\r\n        <>\r\n          <Divider type='vertical' />\r\n          {this.props.label}\r\n        </>\r\n      )\r\n    }\r\n\r\n    let button\r\n    if (this.props.isSelected ?? false) {\r\n      button = (\r\n        <Btn\r\n          onClick={this.handleClick}\r\n          icon={<Icon />}\r\n          type='primary'\r\n          style={{ lineHeight: '1.0' }}\r\n        >\r\n          {text}\r\n        </Btn>\r\n      )\r\n    } else {\r\n      button = (\r\n        <Btn\r\n          onClick={this.handleClick}\r\n          icon={<Icon />}\r\n          type='default'\r\n          style={{ lineHeight: '1.0' }}\r\n        >\r\n          {text}\r\n        </Btn>\r\n      )\r\n    }\r\n\r\n    if (this.props.tooltip !== undefined) {\r\n      return (\r\n        <Tooltip title={this.props.tooltip}>\r\n          {button}\r\n        </Tooltip>\r\n      )\r\n    } else {\r\n      return button\r\n    }\r\n  }\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport Description from './Description'\r\n\r\ninterface EquipmentProps {\r\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\r\n}\r\n\r\n/**\r\n * React component representing a list of DICOM Equipment Entities.\r\n */\r\nclass Equipment extends React.Component<EquipmentProps, {}> {\r\n  render (): React.ReactNode {\r\n    if (this.props.metadata === undefined) {\r\n      return null\r\n    }\r\n    const attributes = [\r\n      {\r\n        name: 'Manufacturer',\r\n        value: this.props.metadata.Manufacturer\r\n      },\r\n      {\r\n        name: 'Model Name',\r\n        value: this.props.metadata.ManufacturerModelName\r\n      },\r\n      {\r\n        name: 'Device Serial Number',\r\n        value: this.props.metadata.DeviceSerialNumber\r\n      },\r\n      {\r\n        name: 'Software Versions',\r\n        value: this.props.metadata.SoftwareVersions\r\n      }\r\n    ]\r\n    if (this.props.metadata.InstitutionName != null) {\r\n      attributes.push({\r\n        name: 'Institution Name',\r\n        value: this.props.metadata.InstitutionName\r\n      })\r\n    }\r\n    return <Description attributes={attributes} hasLongValues />\r\n  }\r\n}\r\n\r\nexport default Equipment\r\n","import * as dcmjs from 'dcmjs'\r\n\r\n/**\r\n * Check whether a DICOM SR content item has a given name.\r\n *\r\n * @param item - Content item\r\n * @param name - Coded name that should be compared\r\n * @returns Whether the content item has the given name\r\n */\r\nconst hasName = (\r\n  item: dcmjs.sr.valueTypes.ContentItem,\r\n  name: dcmjs.sr.coding.CodedConcept\r\n): boolean => {\r\n  const concept = item.ConceptNameCodeSequence[0]\r\n  return (\r\n    concept.CodeValue === name.CodeValue &&\r\n    concept.CodingSchemeDesignator === name.CodingSchemeDesignator\r\n  )\r\n}\r\n\r\n/**\r\n * Check whether a DICOM SR content item has a given value type.\r\n *\r\n * @param item - Content item\r\n * @param valueType - Value Type\r\n * @returns Whether the content item has the given value type\r\n */\r\nconst hasValueType = (\r\n  item: dcmjs.sr.valueTypes.ContentItem,\r\n  valueType: dcmjs.sr.valueTypes.ValueTypes\r\n): boolean => {\r\n  console.log(item.ValueType, valueType)\r\n  return item.ValueType === valueType\r\n}\r\n\r\n/**\r\n * Find content items in a DICOM SR document given their name.\r\n *\r\n * Only finds content items at the root level, but not any nested content items.\r\n *\r\n * @param content - Document content, i.e., sequence of content items\r\n * @param name - Coded name that should be compared\r\n * @returns Matched content items\r\n */\r\nexport const findContentItemsByName = (\r\n  { content, name }: {\r\n    content: dcmjs.sr.valueTypes.ContentItem[]\r\n    name: dcmjs.sr.coding.CodedConcept\r\n  }\r\n): dcmjs.sr.valueTypes.ContentItem[] => {\r\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\r\n  content.forEach(i => {\r\n    if (hasName(i, name)) {\r\n      items.push(i)\r\n    }\r\n  })\r\n  return items\r\n}\r\n\r\n/**\r\n * Find content items in a DICOM SR document given their value type.\r\n *\r\n * Only finds content items at the root level, but not any nested content items.\r\n *\r\n * @param content - Document content, i.e., sequence of content items\r\n * @param valueType - Value Type\r\n * @returns Matched content items\r\n */\r\nexport const findContentItemsByValueType = (\r\n  { content, valueType }: {\r\n    content: dcmjs.sr.valueTypes.ContentItem[]\r\n    valueType: dcmjs.sr.valueTypes.ValueTypes\r\n  }\r\n): dcmjs.sr.valueTypes.ContentItem[] => {\r\n  const items: dcmjs.sr.valueTypes.ContentItem[] = []\r\n  content.forEach(i => {\r\n    if (hasValueType(i, valueType)) {\r\n      items.push(i)\r\n    }\r\n  })\r\n  return items\r\n}\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\nimport { Divider } from 'antd'\r\nimport { v4 as generateUUID } from 'uuid'\r\n\r\nimport Description from './Description'\r\nimport Patient from './Patient'\r\nimport Study from './Study'\r\nimport { findContentItemsByName } from '../utils/sr'\r\n\r\nexport const hasValueType = (\r\n  item: dcmjs.sr.valueTypes.ContentItem,\r\n  valueType: string\r\n): boolean => {\r\n  return item.ValueType === valueType\r\n}\r\n\r\nconst findMeasurementItems = (\r\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\r\n): dcmjs.sr.valueTypes.NumContentItem[] => {\r\n  const items: dcmjs.sr.valueTypes.NumContentItem[] = []\r\n  content.forEach(i => {\r\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.NUM)) {\r\n      const measurement = i as dcmjs.sr.valueTypes.NumContentItem\r\n      items.push(measurement)\r\n    }\r\n  })\r\n  return items\r\n}\r\n\r\nconst findEvaluationItems = (\r\n  { content }: { content: dcmjs.sr.valueTypes.ContentItem[] }\r\n): dcmjs.sr.valueTypes.CodeContentItem[] => {\r\n  const items: dcmjs.sr.valueTypes.CodeContentItem[] = []\r\n  content.forEach(i => {\r\n    if (hasValueType(i, dcmjs.sr.valueTypes.ValueTypes.CODE)) {\r\n      const evaluation = i as dcmjs.sr.valueTypes.CodeContentItem\r\n      items.push(evaluation)\r\n    }\r\n  })\r\n  return items\r\n}\r\n\r\nconst getROIs = (report: dmv.metadata.Comprehensive3DSR): dmv.roi.ROI[] => {\r\n  // TID 1500 Measurement Report\r\n  const matches = findContentItemsByName({\r\n    content: report.ContentSequence,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '126010',\r\n      schemeDesignator: 'DCM',\r\n      meaning: 'Imaging Measurements'\r\n    })\r\n  })\r\n  if (matches.length !== 1) {\r\n    throw new Error(\r\n      'Content item \"Imaging Measurements\" not found.' +\r\n      'Content of Comprehensive 3D SR document is not structured based on ' +\r\n      'TID 1500 \"Measurement Report\".'\r\n    )\r\n  }\r\n  const measurementsItem = matches[0] as dcmjs.sr.valueTypes.ContainerContentItem\r\n  // TID 1410 Planar ROI Measurements and Qualitative Evaluations\r\n  const measurementGroupItems = findContentItemsByName({\r\n    content: measurementsItem.ContentSequence,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '125007',\r\n      schemeDesignator: 'DCM',\r\n      meaning: 'Measurement Group'\r\n    })\r\n  })\r\n\r\n  const rois: dmv.roi.ROI[] = []\r\n  measurementGroupItems.forEach((item) => {\r\n    const evaluations = []\r\n    let observerType: string\r\n    const group = item as dcmjs.sr.valueTypes.ContainerContentItem\r\n    let items = findContentItemsByName({\r\n      content: group.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '112040',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Tracking Unique Identifier'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Tracking Unique Identifier\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured ' +\r\n        'based on TID 1500 \"Measurement Report\" -> ' +\r\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\r\n      )\r\n    }\r\n    const trackingUIDItem = items[0] as dcmjs.sr.valueTypes.UIDRefContentItem\r\n\r\n    items = findContentItemsByName({\r\n      content: group.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121071',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Finding'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Finding\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured ' +\r\n        'based on TID 1500 \"Measurement Report\" -> ' +\r\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\r\n      )\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: group.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '111001',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Algorithm Name'\r\n      })\r\n    })\r\n    if (items.length !== 0) {\r\n      const algorithmNameItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\r\n      evaluations.push(algorithmNameItem)\r\n      observerType = 'Device'\r\n    } else {\r\n      observerType = 'Person'\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: group.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '111003',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Algorithm Version'\r\n      })\r\n    })\r\n    if (items.length !== 0) {\r\n      const algorithmVersionItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\r\n      evaluations.push(algorithmVersionItem)\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: group.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '111030',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Image Region'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Image Region\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured ' +\r\n        'based on TID 1500 \"Measurement Report\" -> ' +\r\n        'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\r\n      )\r\n    }\r\n    const regionItem = items[0] as dcmjs.sr.valueTypes.Scoord3DContentItem\r\n    let scoord3d: dmv.scoord3d.Scoord3D\r\n    if (regionItem.GraphicType === 'POINT') {\r\n      scoord3d = new dmv.scoord3d.Point({\r\n        frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n        coordinates: regionItem.GraphicData\r\n      })\r\n    } else {\r\n      const coordinates: number[][] = []\r\n      for (let i = 0; i < regionItem.GraphicData.length; i += 3) {\r\n        coordinates.push(regionItem.GraphicData.slice(i, i + 3))\r\n      }\r\n      if (regionItem.GraphicType === 'POLYGON') {\r\n        scoord3d = new dmv.scoord3d.Polygon({\r\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n          coordinates: coordinates\r\n        })\r\n      } else if (regionItem.GraphicType === 'MULTIPOINT') {\r\n        scoord3d = new dmv.scoord3d.MultiPoint({\r\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n          coordinates: coordinates\r\n        })\r\n      } else if (regionItem.GraphicType === 'POLYLINE') {\r\n        scoord3d = new dmv.scoord3d.Polyline({\r\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n          coordinates: coordinates\r\n        })\r\n      } else if (regionItem.GraphicType === 'ELLIPSE') {\r\n        scoord3d = new dmv.scoord3d.Ellipse({\r\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n          coordinates: coordinates\r\n        })\r\n      } else if (regionItem.GraphicType === 'ELLIPSOID') {\r\n        scoord3d = new dmv.scoord3d.Ellipsoid({\r\n          frameOfReferenceUID: regionItem.ReferencedFrameOfReferenceUID,\r\n          coordinates: coordinates\r\n        })\r\n      } else {\r\n        throw new Error(\r\n          'Content item \"Image Region\" has unknown graphic type ' +\r\n          `\"${regionItem.GraphicType}\". ` +\r\n          'Content of Comprehensive 3D SR document is not structured ' +\r\n          'based on TID 1500 \"Measurement Report\" -> ' +\r\n          'TID 1410 \"Planar ROI Measurements and Qualitative Evaluations\".'\r\n        )\r\n      }\r\n    }\r\n\r\n    evaluations.push(\r\n      ...findEvaluationItems({ content: group.ContentSequence })\r\n    )\r\n    const measurements = findMeasurementItems({\r\n      content: group.ContentSequence\r\n    })\r\n\r\n    const roi = new dmv.roi.ROI({\r\n      scoord3d: scoord3d,\r\n      uid: generateUUID(),\r\n      properties: {\r\n        trackingUID: trackingUIDItem.UID,\r\n        observerType: observerType,\r\n        evaluations: evaluations,\r\n        measurements: measurements\r\n      }\r\n    })\r\n    rois.push(roi)\r\n  })\r\n  return rois\r\n}\r\n\r\nclass MeasurementReport {\r\n  public PersonObserverName?: string\r\n\r\n  public PersonObserverLoginName?: string\r\n\r\n  public DeviceObserverUID?: string\r\n\r\n  public DeviceObserverName?: string\r\n\r\n  public SpecimenUID: string\r\n\r\n  public SpecimenIdentifier: string\r\n\r\n  public ContainerIdentifier: string\r\n\r\n  public ROIs: dmv.roi.ROI[] = []\r\n\r\n  constructor (report: dmv.metadata.Comprehensive3DSR) {\r\n    let items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121039',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Specimen UID'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Specimen UID\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured based on ' +\r\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\r\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\r\n      )\r\n    }\r\n    const specimenUIDItem = (\r\n      items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\r\n    )\r\n    this.SpecimenUID = specimenUIDItem.UID\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121041',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Specimen Identifier'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Specimen Identifier\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured based on ' +\r\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\r\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\r\n      )\r\n    }\r\n    const specimenIdItem = (\r\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\r\n    )\r\n    this.SpecimenIdentifier = specimenIdItem.TextValue\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '111700',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Specimen Container Identifier'\r\n      })\r\n    })\r\n    if (items.length === 0) {\r\n      throw new Error(\r\n        'Content item \"Specimen Container Identifier\" not found. ' +\r\n        'Content of Comprehensive 3D SR document is not structured based on ' +\r\n        'TID 1500 \"Measurement Report\" -> TID 1001 \"Observation Context\" -> ' +\r\n        'TID 1006 \"Subject Context\" -> TID 1009 \"Subject Context, Specimen\".'\r\n      )\r\n    }\r\n    const containerIdItem = (\r\n      items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\r\n    )\r\n    this.ContainerIdentifier = containerIdItem.TextValue\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121008',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Person Observer Name'\r\n      })\r\n    })\r\n    if (items.length !== 0) {\r\n      const personNameItem = (\r\n        items[0] as unknown as dcmjs.sr.valueTypes.PNameContentItem\r\n      )\r\n      this.PersonObserverName = personNameItem.PersonName\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '128774',\r\n        schemeDesignator: 'DCM',\r\n        meaning: \"Person Observer's Login Name\"\r\n      })\r\n    })\r\n    if (items.length !== 0) {\r\n      const personLoginNameItem = (\r\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\r\n      )\r\n      this.PersonObserverLoginName = personLoginNameItem.TextValue\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121012',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Device Observer UID'\r\n      })\r\n    })\r\n    if (items.length > 0) {\r\n      const deviceUIDItem = (\r\n        items[0] as unknown as dcmjs.sr.valueTypes.UIDRefContentItem\r\n      )\r\n      this.DeviceObserverUID = deviceUIDItem.UID\r\n    }\r\n\r\n    items = findContentItemsByName({\r\n      content: report.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '121013',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Device Observer Name'\r\n      })\r\n    })\r\n    if (items.length !== 0) {\r\n      const deviceNameItem = (\r\n        items[0] as unknown as dcmjs.sr.valueTypes.TextContentItem\r\n      )\r\n      this.DeviceObserverName = deviceNameItem.TextValue\r\n    }\r\n\r\n    this.ROIs = getROIs(report)\r\n  }\r\n}\r\n\r\ninterface ReportProps {\r\n  dataset: dmv.metadata.Comprehensive3DSR\r\n}\r\n\r\n/**\r\n * React component representing a DICOM SR document that displays the\r\n * document content (a selected subset of content items).\r\n */\r\nclass Report extends React.Component<ReportProps, {}> {\r\n  render (): React.ReactNode {\r\n    const report = new MeasurementReport(this.props.dataset)\r\n    const containerAttrs = [\r\n      {\r\n        name: 'ID',\r\n        value: report.ContainerIdentifier\r\n      }\r\n    ]\r\n    const specimenAttrs = [\r\n      {\r\n        name: 'ID',\r\n        value: report.SpecimenIdentifier\r\n      }\r\n    ]\r\n    const observerAttrs = [\r\n      {\r\n        name: 'Name',\r\n        value: report.PersonObserverName\r\n      }\r\n    ]\r\n    const annotations = report.ROIs.map(\r\n      (roi, index): React.ReactNode => {\r\n        const id = `Region ${index + 1}`\r\n        const attrs: Array<{ name: string, value: string }> = []\r\n        roi.evaluations.forEach((\r\n          item: (\r\n            dcmjs.sr.valueTypes.CodeContentItem |\r\n            dcmjs.sr.valueTypes.TextContentItem\r\n          )\r\n        ) => {\r\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\r\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\r\n            attrs.push({\r\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\r\n              value: item.ConceptCodeSequence[0].CodeMeaning\r\n            })\r\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\r\n            item = item as dcmjs.sr.valueTypes.TextContentItem\r\n            attrs.push({\r\n              name: item.ConceptNameCodeSequence[0].CodeMeaning,\r\n              value: item.TextValue\r\n            })\r\n          }\r\n        })\r\n        return <Description key={roi.uid} header={id} attributes={attrs} />\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div>\r\n        <Divider orientation='left'>Patient</Divider>\r\n        <Patient metadata={this.props.dataset} />\r\n        <Divider orientation='left'>Case</Divider>\r\n        <Study metadata={this.props.dataset} />\r\n        <Divider orientation='left'>Slide</Divider>\r\n        <Description attributes={containerAttrs} />\r\n        <Divider orientation='left'>Specimen</Divider>\r\n        <Description attributes={specimenAttrs} />\r\n        <Divider orientation='left'>Observer</Divider>\r\n        <Description attributes={observerAttrs} />\r\n        <Divider orientation='left'>Annotations</Divider>\r\n        {annotations}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Report\r\nexport { MeasurementReport }\r\n","import React from 'react'\r\nimport { List } from 'antd'\r\n\r\nimport Description, { Attribute, AttributeGroup } from './Description'\r\n\r\ninterface ItemProps {\r\n  uid: string\r\n  identifier: string\r\n  attributes: Attribute[]\r\n  groups?: AttributeGroup[]\r\n  children?: React.ReactElement[]\r\n  type?: string\r\n  hasLongValues?: boolean\r\n}\r\n\r\n/**\r\n * React component for a list item that consists of a header element\r\n * containing an identifier and a body element containing a description list\r\n * of attributes rendered as name-value pairs.\r\n */\r\nclass Item extends React.Component<ItemProps, {}> {\r\n  render (): React.ReactNode {\r\n    let groups = null\r\n    if (this.props.groups !== undefined) {\r\n      groups = this.props.groups.map((item, index: number) => (\r\n        <Description\r\n          key={index}\r\n          header={item.name}\r\n          attributes={item.attributes}\r\n        />\r\n      ))\r\n    }\r\n    let title\r\n    if (this.props.type !== undefined) {\r\n      title = `${this.props.type}: ${this.props.identifier}`\r\n    } else {\r\n      title = this.props.identifier\r\n    }\r\n    return (\r\n      <List.Item key={this.props.uid}>\r\n        <Description\r\n          header={title}\r\n          attributes={this.props.attributes}\r\n          hasLongValues={this.props.hasLongValues}\r\n        >\r\n          {groups}\r\n        </Description>\r\n        {this.props.children}\r\n      </List.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Item\r\n","import * as dcmjs from 'dcmjs'\r\n\r\nexport const SpecimenPreparationTypes: {\r\n  [key: string]: dcmjs.sr.coding.CodedConcept\r\n} = {\r\n  COLLECTION: new dcmjs.sr.coding.CodedConcept({\r\n    value: '17636008',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Specimen collection'\r\n  }),\r\n  SAMPLING: new dcmjs.sr.coding.CodedConcept({\r\n    value: '433465004',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Sampling of tissue specimen'\r\n  }),\r\n  STAINING: new dcmjs.sr.coding.CodedConcept({\r\n    value: '127790008',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Specimen staining'\r\n  }),\r\n  PROCESSING: new dcmjs.sr.coding.CodedConcept({\r\n    value: '9265001',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Specimen processing'\r\n  })\r\n}\r\n\r\nexport const SpecimenPreparationAdditives: {\r\n  [key: string]: dcmjs.sr.coding.CodedConcept\r\n} = {\r\n  FIXATIVE: new dcmjs.sr.coding.CodedConcept({\r\n    value: '430864009',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Tissue fixative'\r\n  }),\r\n  EMBEDDING_MEDIUM: new dcmjs.sr.coding.CodedConcept({\r\n    value: '430863003',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Embedding medium'\r\n  })\r\n}\r\n\r\nexport const SpecimenPreparationStepItems: {\r\n  [key: string]: dcmjs.sr.coding.CodedConcept\r\n} = {\r\n  SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\r\n    value: '121041',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Specimen identifier'\r\n  }),\r\n  PARENT_SPECIMEN_IDENTIFIER: new dcmjs.sr.coding.CodedConcept({\r\n    value: '111705',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Parent specimen identifier'\r\n  }),\r\n  PROCESSING_TYPE: new dcmjs.sr.coding.CodedConcept({\r\n    value: '111701',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Processing type'\r\n  }),\r\n  DATETIME_OF_PROCESSING: new dcmjs.sr.coding.CodedConcept({\r\n    value: '111702',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Datetime of processing'\r\n  }),\r\n  PROCESSING_STEP_DESCRIPTION: new dcmjs.sr.coding.CodedConcept({\r\n    value: '111703',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Processing step description'\r\n  }),\r\n  COLLECTION_METHOD: new dcmjs.sr.coding.CodedConcept({\r\n    value: '17636008',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Specimen collection'\r\n  }),\r\n  SAMPLING_METHOD: new dcmjs.sr.coding.CodedConcept({\r\n    value: '111704',\r\n    schemeDesignator: 'DCM',\r\n    meaning: 'Sampling method'\r\n  }),\r\n  STAIN: new dcmjs.sr.coding.CodedConcept({\r\n    value: '424361007',\r\n    schemeDesignator: 'SCT',\r\n    meaning: 'Using substance'\r\n  }),\r\n  ...SpecimenPreparationAdditives\r\n}\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\n\r\nimport Item from './Item'\r\nimport { Attribute } from './Description'\r\nimport { SpecimenPreparationStepItems } from '../data/specimens'\r\n\r\ninterface SpecimenItemProps {\r\n  index: number\r\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\r\n  showstain: boolean\r\n}\r\n\r\n/**\r\n * React component representing a DICOM Specimen Information Entity and\r\n * displays specimen-related attributes of a DICOM Slide Microscopy image.\r\n */\r\nclass SpecimenItem extends React.Component<SpecimenItemProps, {}> {\r\n  render (): React.ReactNode {\r\n    if (this.props.metadata === undefined) {\r\n      return null\r\n    }\r\n    const specimenDescription = this.props.metadata.SpecimenDescriptionSequence[\r\n      this.props.index\r\n    ]\r\n    const attributes: Attribute[] = []\r\n    if (specimenDescription.SpecimenShortDescription !== undefined) {\r\n      attributes.push({\r\n        name: 'Description',\r\n        value: specimenDescription.SpecimenShortDescription\r\n      })\r\n    }\r\n    if (specimenDescription.PrimaryAnatomicStructureSequence !== undefined) {\r\n      if (specimenDescription.PrimaryAnatomicStructureSequence.length > 0) {\r\n        const structures = specimenDescription.PrimaryAnatomicStructureSequence\r\n        attributes.push({\r\n          name: 'Anatomical structure',\r\n          value: structures.map(item => item.CodeMeaning).join(', ')\r\n        })\r\n      }\r\n    }\r\n\r\n    // TID 8001 \"Specimen Preparation\"\r\n    const preparationSteps: dmv.metadata.SpecimenPreparation[] = (\r\n      specimenDescription.SpecimenPreparationSequence ?? []\r\n    )\r\n    preparationSteps.forEach(\r\n      (step: dmv.metadata.SpecimenPreparation, index: number): void => {\r\n        step.SpecimenPreparationStepContentItemSequence.forEach((\r\n          item: (\r\n            dcmjs.sr.valueTypes.CodeContentItem |\r\n            dcmjs.sr.valueTypes.TextContentItem |\r\n            dcmjs.sr.valueTypes.UIDRefContentItem |\r\n            dcmjs.sr.valueTypes.PNameContentItem |\r\n            dcmjs.sr.valueTypes.DateTimeContentItem\r\n          ),\r\n          index: number\r\n        ) => {\r\n          const name = new dcmjs.sr.coding.CodedConcept({\r\n            value: item.ConceptNameCodeSequence[0].CodeValue,\r\n            schemeDesignator:\r\n              item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\r\n            meaning: item.ConceptNameCodeSequence[0].CodeMeaning\r\n          })\r\n          if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\r\n            item = item as dcmjs.sr.valueTypes.CodeContentItem\r\n            const value = new dcmjs.sr.coding.CodedConcept({\r\n              value: item.ConceptCodeSequence[0].CodeValue,\r\n              schemeDesignator:\r\n                item.ConceptCodeSequence[0].CodingSchemeDesignator,\r\n              meaning: item.ConceptCodeSequence[0].CodeMeaning\r\n            })\r\n            if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\r\n              if (\r\n                name.equals(SpecimenPreparationStepItems.COLLECTION_METHOD)\r\n              ) {\r\n                attributes.push({\r\n                  name: 'Collection method',\r\n                  value: value.CodeMeaning\r\n                })\r\n              } else if (\r\n                name.equals(SpecimenPreparationStepItems.FIXATIVE)\r\n              ) {\r\n                attributes.push({\r\n                  name: 'Tissue fixative',\r\n                  value: value.CodeMeaning\r\n                })\r\n              } else if (\r\n                name.equals(SpecimenPreparationStepItems.EMBEDDING_MEDIUM)\r\n              ) {\r\n                attributes.push({\r\n                  name: 'Tissue embedding medium',\r\n                  value: value.CodeMeaning\r\n                })\r\n              } else if (\r\n                name.equals(SpecimenPreparationStepItems.STAIN) &&\r\n                this.props.showstain\r\n              ) {\r\n                attributes.push({\r\n                  name: 'Tissue stain',\r\n                  value: value.CodeMeaning\r\n                })\r\n              }\r\n            }\r\n          } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\r\n            item = item as dcmjs.sr.valueTypes.TextContentItem\r\n            if (\r\n              name.equals(SpecimenPreparationStepItems.STAIN) &&\r\n              this.props.showstain\r\n            ) {\r\n              attributes.push({\r\n                name: 'Tissue stain',\r\n                value: item.TextValue\r\n              })\r\n            } else if (\r\n              name.equals(SpecimenPreparationStepItems.PARENT_SPECIMEN_IDENTIFIER)\r\n            ) {\r\n              attributes.push({\r\n                name: 'Parent specimen',\r\n                value: item.TextValue\r\n              })\r\n            }\r\n          }\r\n        })\r\n      }\r\n    )\r\n    const uid = specimenDescription.SpecimenUID\r\n    const identifier = specimenDescription.SpecimenIdentifier\r\n    return (\r\n      <Item\r\n        uid={uid}\r\n        key={uid}\r\n        identifier={identifier}\r\n        attributes={attributes}\r\n        hasLongValues\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default SpecimenItem\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { List } from 'antd'\r\n\r\nimport SpecimenItem from './SpecimenItem'\r\n\r\ninterface SpecimenListProps {\r\n  metadata?: dmv.metadata.VLWholeSlideMicroscopyImage\r\n  showstain: boolean\r\n}\r\n\r\n/**\r\n * React component representing a list of DICOM Specimen Information Entities.\r\n */\r\nclass SpecimenList extends React.Component<SpecimenListProps, {}> {\r\n  render (): React.ReactNode {\r\n    if (this.props.metadata === undefined) {\r\n      return null\r\n    }\r\n    /*\r\n     * Specimen Description Sequence is a type 1 attribute. However, it is\r\n     * nevertheless missing in some data sets. This is a violation of the\r\n     * standard, but it may be better to facilitate display of the data.\r\n     */\r\n    const descriptions = this.props.metadata.SpecimenDescriptionSequence ?? []\r\n    const items = descriptions.map(\r\n      (item: dmv.metadata.SpecimenDescription, index: number) => {\r\n        return (\r\n          <SpecimenItem\r\n            index={index}\r\n            key={item.SpecimenUID}\r\n            metadata={this.props.metadata}\r\n            showstain={this.props.showstain}\r\n          />\r\n        )\r\n      }\r\n    )\r\n    return (\r\n      <List style={{ overflowY: 'auto' }}>\r\n        {items}\r\n      </List>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SpecimenList\r\n","import React from 'react'\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Col,\r\n  Divider,\r\n  InputNumber,\r\n  Menu,\r\n  Popover,\r\n  Row,\r\n  Slider,\r\n  Space,\r\n  Switch,\r\n  Tooltip\r\n} from 'antd'\r\nimport {\r\n  DeleteOutlined,\r\n  EyeOutlined,\r\n  EyeInvisibleOutlined,\r\n  SettingOutlined\r\n} from '@ant-design/icons'\r\nimport Description from './Description'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\n\r\nimport { SpecimenPreparationStepItems } from '../data/specimens'\r\n\r\ninterface OpticalPathItemProps {\r\n  opticalPath: dmv.opticalPath.OpticalPath\r\n  metadata: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  isVisible: boolean\r\n  isRemovable: boolean\r\n  defaultStyle: {\r\n    opacity: number\r\n    color?: number[]\r\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n    limitValues?: number[]\r\n  }\r\n  onVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\r\n    opticalPathIdentifier: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onStyleChange: ({ opticalPathIdentifier, styleOptions }: {\r\n    opticalPathIdentifier: string\r\n    styleOptions: {\r\n      opacity?: number\r\n      color?: number[]\r\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n      limitValues?: number[]\r\n    }\r\n  }) => void\r\n  onRemoval: (opticalPathIdentifier: string) => void\r\n}\r\n\r\ninterface OpticalPathItemState {\r\n  isVisible: boolean\r\n  currentStyle: {\r\n    opacity: number\r\n    color?: number[]\r\n    paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n    limitValues?: number[]\r\n  }\r\n}\r\n\r\n/**\r\n * React component representing an optical path of a\r\n * multi-channel acquistion with control of visualization parameters.\r\n */\r\nclass OpticalPathItem extends React.Component<OpticalPathItemProps, OpticalPathItemState> {\r\n  constructor (props: OpticalPathItemProps) {\r\n    super(props)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\r\n    this.handleLimitChange = this.handleLimitChange.bind(this)\r\n    this.handleLowerLimitChange = this.handleLowerLimitChange.bind(this)\r\n    this.handleUpperLimitChange = this.handleUpperLimitChange.bind(this)\r\n    this.handleColorRChange = this.handleColorRChange.bind(this)\r\n    this.handleColorGChange = this.handleColorGChange.bind(this)\r\n    this.handleColorBChange = this.handleColorBChange.bind(this)\r\n    this.handleRemoval = this.handleRemoval.bind(this)\r\n    this.getCurrentColors = this.getCurrentColors.bind(this)\r\n    this.state = {\r\n      isVisible: this.props.isVisible,\r\n      currentStyle: {\r\n        opacity: this.props.defaultStyle.opacity,\r\n        color: this.props.defaultStyle.color,\r\n        paletteColorLookupTable: this.props.defaultStyle.paletteColorLookupTable,\r\n        limitValues: this.props.defaultStyle.limitValues\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidUpdate (\r\n    previousProps: OpticalPathItemProps,\r\n    previousState: OpticalPathItemState\r\n  ): void {\r\n    if (this.props.defaultStyle !== previousProps.defaultStyle) {\r\n      this.setState({\r\n        currentStyle: this.props.defaultStyle\r\n      })\r\n    }\r\n  }\r\n\r\n  handleVisibilityChange (\r\n    checked: boolean,\r\n    event: Event\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    this.setState({\r\n      isVisible: checked\r\n    })\r\n    this.props.onVisibilityChange({\r\n      opticalPathIdentifier: identifier,\r\n      isVisible: checked\r\n    })\r\n  }\r\n\r\n  handleOpacityChange (\r\n    value: number\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    this.props.onStyleChange({\r\n      opticalPathIdentifier: identifier,\r\n      styleOptions: { opacity: value }\r\n    })\r\n    this.setState(state => ({\r\n      currentStyle: {\r\n        color: state.currentStyle.color,\r\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n        opacity: value,\r\n        limitValues: state.currentStyle.limitValues\r\n      }\r\n    }))\r\n  }\r\n\r\n  handleColorRChange (\r\n    value: number | number[]\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    if (this.state.currentStyle.color !== undefined) {\r\n      const color = [\r\n        Array.isArray(value) ? value[0] : value,\r\n        this.state.currentStyle.color[1],\r\n        this.state.currentStyle.color[2]\r\n      ]\r\n      this.setState(state => ({\r\n        currentStyle: {\r\n          color: color,\r\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n          opacity: state.currentStyle.opacity,\r\n          limitValues: state.currentStyle.limitValues\r\n        }\r\n      }))\r\n      this.props.onStyleChange({\r\n        opticalPathIdentifier: identifier,\r\n        styleOptions: { color: color }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleColorGChange (\r\n    value: number | number[]\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    if (this.state.currentStyle.color !== undefined) {\r\n      const color = [\r\n        this.state.currentStyle.color[0],\r\n        Array.isArray(value) ? value[0] : value,\r\n        this.state.currentStyle.color[2]\r\n      ]\r\n      this.setState(state => ({\r\n        currentStyle: {\r\n          color: color,\r\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n          opacity: state.currentStyle.opacity,\r\n          limitValues: state.currentStyle.limitValues\r\n        }\r\n      }))\r\n      this.props.onStyleChange({\r\n        opticalPathIdentifier: identifier,\r\n        styleOptions: { color: color }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleColorBChange (\r\n    value: number | number[]\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    if (this.state.currentStyle.color !== undefined) {\r\n      const color = [\r\n        this.state.currentStyle.color[0],\r\n        this.state.currentStyle.color[1],\r\n        Array.isArray(value) ? value[0] : value\r\n      ]\r\n      this.setState(state => ({\r\n        currentStyle: {\r\n          color: color,\r\n          paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n          opacity: state.currentStyle.opacity,\r\n          limitValues: state.currentStyle.limitValues\r\n        }\r\n      }))\r\n      this.props.onStyleChange({\r\n        opticalPathIdentifier: identifier,\r\n        styleOptions: { color: color }\r\n      })\r\n    }\r\n  }\r\n\r\n  getCurrentColors (): string[] {\r\n    const rgb2hex = (values: number[]): string => {\r\n      const r = values[0]\r\n      const g = values[1]\r\n      const b = values[2]\r\n      return '#' + (0x1000000 + (r << 16) + (g << 8) + b).toString(16).slice(1)\r\n    }\r\n\r\n    if (this.props.defaultStyle.paletteColorLookupTable != null) {\r\n      const colormap = this.props.defaultStyle.paletteColorLookupTable.data\r\n      return colormap.map(values => rgb2hex(values))\r\n    } else if (this.state.currentStyle.color != null) {\r\n      return [\r\n        '#000000',\r\n        rgb2hex(this.state.currentStyle.color)\r\n      ]\r\n    } else {\r\n      return ['white', 'white']\r\n    }\r\n  }\r\n\r\n  handleLowerLimitChange (\r\n    value: number\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    if (this.state.currentStyle.limitValues !== undefined) {\r\n      this.setState(state => {\r\n        if (state.currentStyle.limitValues !== undefined) {\r\n          return {\r\n            currentStyle: {\r\n              color: state.currentStyle.color,\r\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n              opacity: state.currentStyle.opacity,\r\n              limitValues: [value, state.currentStyle.limitValues[1]]\r\n            }\r\n          }\r\n        } else {\r\n          return {\r\n            currentStyle: {\r\n              color: state.currentStyle.color,\r\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n              opacity: state.currentStyle.opacity,\r\n              limitValues: state.currentStyle.limitValues\r\n            }\r\n          }\r\n        }\r\n      })\r\n      this.props.onStyleChange({\r\n        opticalPathIdentifier: identifier,\r\n        styleOptions: {\r\n          limitValues: [\r\n            value,\r\n            this.state.currentStyle.limitValues[1]\r\n          ]\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleUpperLimitChange (\r\n    value: number\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    if (this.state.currentStyle.limitValues !== undefined) {\r\n      this.setState(state => {\r\n        if (state.currentStyle.limitValues !== undefined) {\r\n          return {\r\n            currentStyle: {\r\n              color: state.currentStyle.color,\r\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n              opacity: state.currentStyle.opacity,\r\n              limitValues: [state.currentStyle.limitValues[0], value]\r\n            }\r\n          }\r\n        } else {\r\n          return {\r\n            currentStyle: {\r\n              color: state.currentStyle.color,\r\n              paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n              opacity: state.currentStyle.opacity,\r\n              limitValues: state.currentStyle.limitValues\r\n            }\r\n          }\r\n        }\r\n      })\r\n      this.props.onStyleChange({\r\n        opticalPathIdentifier: identifier,\r\n        styleOptions: {\r\n          limitValues: [\r\n            this.state.currentStyle.limitValues[0],\r\n            value\r\n          ]\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleLimitChange (\r\n    values: number[]\r\n  ): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    this.setState(state => ({\r\n      currentStyle: {\r\n        color: state.currentStyle.color,\r\n        paletteColorLookupTable: state.currentStyle.paletteColorLookupTable,\r\n        opacity: state.currentStyle.opacity,\r\n        limitValues: values\r\n      }\r\n    }))\r\n    this.props.onStyleChange({\r\n      opticalPathIdentifier: identifier,\r\n      styleOptions: { limitValues: values }\r\n    })\r\n  }\r\n\r\n  handleRemoval (): void {\r\n    const identifier = this.props.opticalPath.identifier\r\n    this.props.onRemoval(identifier)\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const identifier = this.props.opticalPath.identifier\r\n    const description = this.props.opticalPath.description\r\n    const attributes: Array<{ name: string, value: string }> = []\r\n    if (this.props.opticalPath.illuminationWaveLength !== undefined) {\r\n      attributes.push(\r\n        {\r\n          name: 'Illumination wavelength',\r\n          value: `${this.props.opticalPath.illuminationWaveLength} nm`\r\n        }\r\n      )\r\n    }\r\n    if (this.props.opticalPath.illuminationColor !== undefined) {\r\n      attributes.push(\r\n        {\r\n          name: 'Illumination color',\r\n          value: this.props.opticalPath.illuminationColor.CodeMeaning\r\n        }\r\n      )\r\n    }\r\n\r\n    // TID 8001 \"Specimen Preparation\"\r\n    const specimenDescriptions: dmv.metadata.SpecimenDescription[] = (\r\n      this.props.metadata[0].SpecimenDescriptionSequence ?? []\r\n    )\r\n    specimenDescriptions.forEach(description => {\r\n      const specimenPreparationSteps: dmv.metadata.SpecimenPreparation[] = (\r\n        description.SpecimenPreparationSequence ?? []\r\n      )\r\n      specimenPreparationSteps.forEach(\r\n        (step: dmv.metadata.SpecimenPreparation, index: number): void => {\r\n          step.SpecimenPreparationStepContentItemSequence.forEach((\r\n            item: (\r\n              dcmjs.sr.valueTypes.CodeContentItem |\r\n              dcmjs.sr.valueTypes.TextContentItem |\r\n              dcmjs.sr.valueTypes.UIDRefContentItem |\r\n              dcmjs.sr.valueTypes.PNameContentItem |\r\n              dcmjs.sr.valueTypes.DateTimeContentItem\r\n            ),\r\n            index: number\r\n          ) => {\r\n            const name = new dcmjs.sr.coding.CodedConcept({\r\n              value: item.ConceptNameCodeSequence[0].CodeValue,\r\n              schemeDesignator:\r\n                item.ConceptNameCodeSequence[0].CodingSchemeDesignator,\r\n              meaning: item.ConceptNameCodeSequence[0].CodeMeaning\r\n            })\r\n            if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.CODE) {\r\n              item = item as dcmjs.sr.valueTypes.CodeContentItem\r\n              const value = new dcmjs.sr.coding.CodedConcept({\r\n                value: item.ConceptCodeSequence[0].CodeValue,\r\n                schemeDesignator:\r\n                  item.ConceptCodeSequence[0].CodingSchemeDesignator,\r\n                meaning: item.ConceptCodeSequence[0].CodeMeaning\r\n              })\r\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\r\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\r\n                  attributes.push({\r\n                    name: 'Tissue stain',\r\n                    value: value.CodeMeaning\r\n                  })\r\n                }\r\n              }\r\n            } else if (item.ValueType === dcmjs.sr.valueTypes.ValueTypes.TEXT) {\r\n              item = item as dcmjs.sr.valueTypes.TextContentItem\r\n              if (!name.equals(SpecimenPreparationStepItems.PROCESSING_TYPE)) {\r\n                if (name.equals(SpecimenPreparationStepItems.STAIN)) {\r\n                  attributes.push({\r\n                    name: 'Tissue stain',\r\n                    value: item.TextValue\r\n                  })\r\n                }\r\n              }\r\n            }\r\n          })\r\n        }\r\n      )\r\n    })\r\n\r\n    const maxValue = Math.pow(2, this.props.metadata[0].BitsAllocated) - 1\r\n\r\n    const title = (\r\n      description != null ? `${identifier}: ${description}` : identifier\r\n    )\r\n    let settings\r\n    let item\r\n    if (this.props.opticalPath.isMonochromatic) {\r\n      // monochrome images that can be pseudo-colored\r\n      let colorSettings\r\n      if (this.state.currentStyle.color != null) {\r\n        colorSettings = (\r\n          <>\r\n            <Divider plain>\r\n              Color\r\n            </Divider>\r\n            <Row justify='center' align='middle' gutter={[8, 8]}>\r\n              <Col span={5}>\r\n                Red\r\n              </Col>\r\n              <Col span={14}>\r\n                <Slider\r\n                  range={false}\r\n                  min={0}\r\n                  max={255}\r\n                  step={1}\r\n                  value={this.state.currentStyle.color[0]}\r\n                  onChange={this.handleColorRChange}\r\n                />\r\n              </Col>\r\n              <Col span={5}>\r\n                <InputNumber\r\n                  min={0}\r\n                  max={255}\r\n                  size='small'\r\n                  style={{ width: '65px' }}\r\n                  value={this.state.currentStyle.color[0]}\r\n                  onChange={this.handleColorRChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row justify='center' align='middle' gutter={[8, 8]}>\r\n              <Col span={5}>\r\n                Green\r\n              </Col>\r\n              <Col span={14}>\r\n                <Slider\r\n                  range={false}\r\n                  min={0}\r\n                  max={255}\r\n                  step={1}\r\n                  value={this.state.currentStyle.color[1]}\r\n                  onChange={this.handleColorGChange}\r\n                />\r\n              </Col>\r\n              <Col span={5}>\r\n                <InputNumber\r\n                  min={0}\r\n                  max={255}\r\n                  size='small'\r\n                  style={{ width: '65px' }}\r\n                  value={this.state.currentStyle.color[1]}\r\n                  onChange={this.handleColorGChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row justify='center' align='middle' gutter={[8, 8]}>\r\n              <Col span={5}>\r\n                Blue\r\n              </Col>\r\n              <Col span={14}>\r\n                <Slider\r\n                  range={false}\r\n                  min={0}\r\n                  max={255}\r\n                  step={1}\r\n                  value={this.state.currentStyle.color[2]}\r\n                  onChange={this.handleColorBChange}\r\n                />\r\n              </Col>\r\n              <Col span={5}>\r\n                <InputNumber\r\n                  min={0}\r\n                  max={255}\r\n                  size='small'\r\n                  style={{ width: '65px' }}\r\n                  value={this.state.currentStyle.color[2]}\r\n                  onChange={this.handleColorBChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )\r\n      } else {\r\n        colorSettings = (\r\n          <>\r\n            <Divider plain>\r\n              Color\r\n            </Divider>\r\n            Custom pseudo-coloring is disabled because pixels are colorized via\r\n            a provided palette color lookup table.\r\n          </>\r\n        )\r\n      }\r\n\r\n      let windowSettings\r\n      if (this.state.currentStyle.limitValues != null) {\r\n        windowSettings = (\r\n          <>\r\n            <Divider plain>\r\n              Values of interest\r\n            </Divider>\r\n            <Row justify='center' align='middle' gutter={[8, 8]}>\r\n              <Col span={6}>\r\n                <InputNumber\r\n                  min={0}\r\n                  max={this.state.currentStyle.limitValues[1]}\r\n                  size='small'\r\n                  style={{ width: '75px' }}\r\n                  value={this.state.currentStyle.limitValues[0]}\r\n                  onChange={this.handleLowerLimitChange}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <Slider\r\n                  range\r\n                  min={0}\r\n                  max={maxValue}\r\n                  step={1}\r\n                  value={[\r\n                    this.state.currentStyle.limitValues[0],\r\n                    this.state.currentStyle.limitValues[1]\r\n                  ]}\r\n                  onChange={this.handleLimitChange}\r\n                />\r\n              </Col>\r\n              <Col span={6}>\r\n                <InputNumber\r\n                  min={this.state.currentStyle.limitValues[0]}\r\n                  max={maxValue}\r\n                  size='small'\r\n                  style={{ width: '75px' }}\r\n                  value={this.state.currentStyle.limitValues[1]}\r\n                  onChange={this.handleUpperLimitChange}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n        )\r\n      }\r\n      settings = (\r\n        <div>\r\n          {windowSettings}\r\n          {colorSettings}\r\n          <Divider plain />\r\n          <Row justify='center' align='middle' gutter={[8, 8]}>\r\n            <Col span={6}>\r\n              Opacity\r\n            </Col>\r\n            <Col span={12}>\r\n              <Slider\r\n                range={false}\r\n                min={0}\r\n                max={1}\r\n                step={0.01}\r\n                value={this.state.currentStyle.opacity}\r\n                onChange={this.handleOpacityChange}\r\n              />\r\n            </Col>\r\n            <Col span={6}>\r\n              <InputNumber\r\n                min={0}\r\n                max={1}\r\n                size='small'\r\n                step={0.1}\r\n                style={{ width: '65px' }}\r\n                value={this.state.currentStyle.opacity}\r\n                onChange={this.handleOpacityChange}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )\r\n      const colors = this.getCurrentColors()\r\n      item = (\r\n        <Badge\r\n          offset={[-20, 20]}\r\n          count={' '}\r\n          style={{\r\n            borderStyle: 'solid',\r\n            borderWidth: '1px',\r\n            borderColor: 'gray',\r\n            visibility: this.state.isVisible ? 'visible' : 'hidden',\r\n            backgroundImage: `linear-gradient(to right, ${colors.toString()})`\r\n          }}\r\n        >\r\n          <Description\r\n            header={title}\r\n            attributes={attributes}\r\n            selectable\r\n            hasLongValues\r\n          />\r\n        </Badge>\r\n      )\r\n    } else {\r\n      // color images\r\n      settings = (\r\n        <div>\r\n          <Row justify='center' align='middle' gutter={[8, 8]}>\r\n            <Col span={6}>\r\n              Opacity\r\n            </Col>\r\n            <Col span={12}>\r\n              <Slider\r\n                range={false}\r\n                min={0}\r\n                max={1}\r\n                step={0.01}\r\n                value={this.state.currentStyle.opacity}\r\n                onChange={this.handleOpacityChange}\r\n              />\r\n            </Col>\r\n            <Col span={6}>\r\n              <InputNumber\r\n                min={0}\r\n                max={1}\r\n                size='small'\r\n                step={0.1}\r\n                style={{ width: '60px' }}\r\n                value={this.state.currentStyle.opacity}\r\n                onChange={this.handleOpacityChange}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )\r\n      item = (\r\n        <Description\r\n          header={title}\r\n          attributes={attributes}\r\n          selectable\r\n          hasLongValues\r\n        />\r\n      )\r\n    }\r\n\r\n    const buttons = []\r\n    if (this.props.isRemovable) {\r\n      buttons.push(\r\n        <Tooltip title='Remove Optical Path'>\r\n          <Button\r\n            type='default'\r\n            shape='circle'\r\n            icon={<DeleteOutlined />}\r\n            onClick={this.handleRemoval}\r\n          />\r\n        </Tooltip>\r\n      )\r\n    }\r\n\r\n    const {\r\n      defaultStyle,\r\n      isRemovable,\r\n      isVisible,\r\n      metadata,\r\n      onVisibilityChange,\r\n      onStyleChange,\r\n      onRemoval,\r\n      opticalPath,\r\n      ...otherProps\r\n    } = this.props\r\n    return (\r\n      <Menu.Item\r\n        style={{ height: '100%', paddingLeft: '3px' }}\r\n        key={this.props.opticalPath.identifier}\r\n        {...otherProps}\r\n      >\r\n        <Space align='start'>\r\n          <div style={{ paddingLeft: '14px' }}>\r\n            <Space direction='vertical' align='end'>\r\n              <Switch\r\n                size='small'\r\n                checked={this.state.isVisible}\r\n                onChange={this.handleVisibilityChange}\r\n                checkedChildren={<EyeOutlined />}\r\n                unCheckedChildren={<EyeInvisibleOutlined />}\r\n              />\r\n              <Popover\r\n                placement='left'\r\n                content={settings}\r\n                overlayStyle={{ width: '350px' }}\r\n                title='Display Settings'\r\n              >\r\n                <Button\r\n                  type='primary'\r\n                  shape='circle'\r\n                  icon={<SettingOutlined />}\r\n                />\r\n              </Popover>\r\n              {buttons}\r\n            </Space>\r\n          </div>\r\n          {item}\r\n        </Space>\r\n      </Menu.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OpticalPathItem\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { Button as Btn, Menu, Select, Space, Tooltip } from 'antd'\r\nimport { AppstoreAddOutlined } from '@ant-design/icons'\r\n\r\nimport OpticalPathItem from './OpticalPathItem'\r\n\r\nconst { Option } = Select\r\n\r\ninterface OpticalPathListProps {\r\n  opticalPaths: dmv.opticalPath.OpticalPath[]\r\n  metadata: {\r\n    [opticalPathIdentifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  }\r\n  visibleOpticalPathIdentifiers: Set<string>\r\n  activeOpticalPathIdentifiers: Set<string>\r\n  defaultOpticalPathStyles: {\r\n    [opticalPathIdentifier: string]: {\r\n      opacity: number\r\n      color?: number[]\r\n      limitValues?: number[]\r\n      paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n    }\r\n  }\r\n  onOpticalPathVisibilityChange: ({ opticalPathIdentifier, isVisible }: {\r\n    opticalPathIdentifier: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onOpticalPathStyleChange: ({ opticalPathIdentifier, styleOptions }: {\r\n    opticalPathIdentifier: string\r\n    styleOptions: {\r\n      opacity?: number\r\n      color?: number[]\r\n      limitValues?: number[]\r\n    }\r\n  }) => void\r\n  onOpticalPathActivityChange: ({ opticalPathIdentifier, isActive }: {\r\n    opticalPathIdentifier: string\r\n    isActive: boolean\r\n  }) => void\r\n  selectedPresentationStateUID?: string\r\n}\r\n\r\ninterface OpticalPathListState {\r\n  selectedOpticalPathIdentifier?: string\r\n}\r\n\r\n/**\r\n * React component representing a list of optical paths.\r\n */\r\nclass OpticalPathList extends React.Component<OpticalPathListProps, OpticalPathListState> {\r\n  state = {\r\n    selectedOpticalPathIdentifier: undefined\r\n  }\r\n\r\n  constructor (props: OpticalPathListProps) {\r\n    super(props)\r\n    this.handleItemAddition = this.handleItemAddition.bind(this)\r\n    this.handleItemRemoval = this.handleItemRemoval.bind(this)\r\n    this.handleItemSelectionChange = this.handleItemSelectionChange.bind(this)\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when an optical path should be removed.\r\n   */\r\n  handleItemRemoval (opticalPathIdentifier: string): void {\r\n    this.props.onOpticalPathActivityChange({\r\n      opticalPathIdentifier,\r\n      isActive: false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when the selection of an optical path should change.\r\n   */\r\n  handleItemSelectionChange (\r\n    value: string\r\n  ): void {\r\n    this.setState({ selectedOpticalPathIdentifier: value })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when an optical path should be added.\r\n   */\r\n  handleItemAddition (): void {\r\n    const identifier = this.state.selectedOpticalPathIdentifier\r\n    if (identifier !== undefined) {\r\n      this.props.onOpticalPathActivityChange({\r\n        opticalPathIdentifier: identifier,\r\n        isActive: true\r\n      })\r\n      this.setState({ selectedOpticalPathIdentifier: undefined })\r\n    }\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    if (this.props.metadata === undefined) {\r\n      return null\r\n    }\r\n\r\n    const isSelectable = this.props.opticalPaths.length > 1\r\n    const opticalPathItems: React.ReactNode[] = []\r\n    const optionItems: React.ReactNode[] = []\r\n    this.props.opticalPaths.forEach(opticalPath => {\r\n      const opticalPathIdentifier = opticalPath.identifier\r\n      const images = this.props.metadata[opticalPathIdentifier]\r\n      const seriesInstanceUID = images[0].SeriesInstanceUID\r\n      images[0].OpticalPathSequence.forEach(opticalPathItem => {\r\n        const id = opticalPathItem.OpticalPathIdentifier\r\n        const description = opticalPathItem.OpticalPathDescription\r\n        if (opticalPath.identifier === id) {\r\n          if (this.props.activeOpticalPathIdentifiers.has(id)) {\r\n            opticalPathItems.push(\r\n              <OpticalPathItem\r\n                key={`${seriesInstanceUID}-${id}`}\r\n                opticalPath={opticalPath}\r\n                metadata={images}\r\n                isVisible={this.props.visibleOpticalPathIdentifiers.has(id)}\r\n                defaultStyle={this.props.defaultOpticalPathStyles[id]}\r\n                onVisibilityChange={this.props.onOpticalPathVisibilityChange}\r\n                onStyleChange={this.props.onOpticalPathStyleChange}\r\n                onRemoval={this.handleItemRemoval}\r\n                isRemovable={isSelectable}\r\n              />\r\n            )\r\n          } else {\r\n            let title\r\n            if (description !== '') {\r\n              title = `${id} - ${description}`\r\n            } else {\r\n              title = `${id}`\r\n            }\r\n            optionItems.push(\r\n              <Option key={id} value={id}>{title}</Option>\r\n            )\r\n          }\r\n        }\r\n      })\r\n    })\r\n\r\n    let opticalPathSelector\r\n    if (isSelectable) {\r\n      opticalPathSelector = (\r\n        <Space align='center' size={20} style={{ padding: '14px' }}>\r\n          <Select\r\n            defaultValue=''\r\n            style={{ width: 200 }}\r\n            onChange={this.handleItemSelectionChange}\r\n            value={this.state.selectedOpticalPathIdentifier}\r\n            allowClear\r\n          >\r\n            {optionItems}\r\n          </Select>\r\n          <Tooltip title='Add'>\r\n            <Btn\r\n              icon={<AppstoreAddOutlined />}\r\n              type='primary'\r\n              onClick={this.handleItemAddition}\r\n            />\r\n          </Tooltip>\r\n        </Space>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Menu selectable={false}>\r\n        {opticalPathItems}\r\n        {opticalPathSelector}\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OpticalPathList\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport {\r\n  Button,\r\n  Col,\r\n  InputNumber,\r\n  Menu,\r\n  Popover,\r\n  Row,\r\n  Slider,\r\n  Space,\r\n  Switch\r\n} from 'antd'\r\nimport { SettingOutlined } from '@ant-design/icons'\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\r\n\r\nimport Description from './Description'\r\n\r\ninterface MappingItemProps {\r\n  mapping: dmv.mapping.ParameterMapping\r\n  metadata: dmv.metadata.ParametricMap[]\r\n  isVisible: boolean\r\n  defaultStyle: {\r\n    opacity: number\r\n  }\r\n  onVisibilityChange: ({ mappingUID, isVisible }: {\r\n    mappingUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onStyleChange: ({ mappingUID, styleOptions }: {\r\n    mappingUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n    }\r\n  }) => void\r\n}\r\n\r\ninterface MappingItemState {\r\n  isVisible: boolean\r\n  currentStyle: {\r\n    opacity: number\r\n  }\r\n}\r\n\r\n/**\r\n * React component representing a Real World Value Mapping.\r\n */\r\nclass MappingItem extends React.Component<MappingItemProps, MappingItemState> {\r\n  constructor (props: MappingItemProps) {\r\n    super(props)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\r\n    this.state = {\r\n      isVisible: this.props.isVisible,\r\n      currentStyle: {\r\n        opacity: this.props.defaultStyle.opacity\r\n      }\r\n    }\r\n  }\r\n\r\n  handleVisibilityChange (\r\n    checked: boolean,\r\n    event: Event\r\n  ): void {\r\n    this.props.onVisibilityChange({\r\n      mappingUID: this.props.mapping.uid,\r\n      isVisible: checked\r\n    })\r\n    this.setState({ isVisible: checked })\r\n  }\r\n\r\n  handleOpacityChange (value: number): void {\r\n    this.props.onStyleChange({\r\n      mappingUID: this.props.mapping.uid,\r\n      styleOptions: {\r\n        opacity: value\r\n      }\r\n    })\r\n    this.setState(state => ({\r\n      currentStyle: {\r\n        opacity: value\r\n      }\r\n    }))\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const identifier = `Mapping ${this.props.mapping.number}`\r\n    const attributes: Array<{ name: string, value: string }> = [\r\n      {\r\n        name: 'Label',\r\n        value: this.props.mapping.label\r\n      }\r\n    ]\r\n\r\n    const settings = (\r\n      <div>\r\n        <Row justify='center' align='middle'>\r\n          <Col span={6}>\r\n            Opacity\r\n          </Col>\r\n          <Col span={12}>\r\n            <Slider\r\n              range={false}\r\n              min={0}\r\n              max={1}\r\n              step={0.01}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <InputNumber\r\n              min={0}\r\n              max={1}\r\n              size='small'\r\n              step={0.1}\r\n              style={{ width: '65px' }}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n\r\n    /**\r\n     * This hack is required for Menu.Item to work properly:\r\n     * https://github.com/react-component/menu/issues/142\r\n     */\r\n    const {\r\n      defaultStyle,\r\n      isVisible,\r\n      mapping,\r\n      metadata,\r\n      onVisibilityChange,\r\n      onStyleChange,\r\n      ...otherProps\r\n    } = this.props\r\n    return (\r\n      <Menu.Item\r\n        style={{ height: '100%', paddingLeft: '3px' }}\r\n        key={this.props.mapping.uid}\r\n        {...otherProps}\r\n      >\r\n        <Space align='start'>\r\n          <div style={{ paddingLeft: '14px' }}>\r\n            <Space direction='vertical' align='end' size={100}>\r\n              <Space direction='vertical' align='end'>\r\n                <Switch\r\n                  size='small'\r\n                  onChange={this.handleVisibilityChange}\r\n                  checked={this.props.isVisible}\r\n                  checkedChildren={<FaEye />}\r\n                  unCheckedChildren={<FaEyeSlash />}\r\n                />\r\n                <Popover\r\n                  placement='left'\r\n                  content={settings}\r\n                  overlayStyle={{ width: '350px' }}\r\n                  title='Display Settings'\r\n                >\r\n                  <Button\r\n                    type='primary'\r\n                    shape='circle'\r\n                    icon={<SettingOutlined />}\r\n                  />\r\n                </Popover>\r\n              </Space>\r\n            </Space>\r\n          </div>\r\n          <Description\r\n            header={identifier}\r\n            attributes={attributes}\r\n            selectable\r\n            hasLongValues\r\n          />\r\n        </Space>\r\n      </Menu.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MappingItem\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { Menu } from 'antd'\r\n\r\nimport MappingItem from './MappingItem'\r\n\r\ninterface MappingListProps {\r\n  mappings: dmv.mapping.ParameterMapping[]\r\n  metadata: {\r\n    [mappingUID: string]: dmv.metadata.ParametricMap[]\r\n  }\r\n  visibleMappingUIDs: Set<string>\r\n  defaultMappingStyles: {\r\n    [mappingUID: string]: { opacity: number }\r\n  }\r\n  onMappingVisibilityChange: ({ mappingUID, isVisible }: {\r\n    mappingUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onMappingStyleChange: ({ mappingUID, styleOptions }: {\r\n    mappingUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n    }\r\n  }) => void\r\n}\r\n\r\n/**\r\n * React component representing a list of Real World Value Mappings.\r\n */\r\nclass MappingList extends React.Component<MappingListProps, {}> {\r\n  render (): React.ReactNode {\r\n    const items = this.props.mappings.map((mapping, index) => {\r\n      const uid = mapping.uid\r\n      return (\r\n        <MappingItem\r\n          key={mapping.uid}\r\n          mapping={mapping}\r\n          metadata={this.props.metadata[uid]}\r\n          isVisible={this.props.visibleMappingUIDs.has(uid)}\r\n          defaultStyle={this.props.defaultMappingStyles[uid]}\r\n          onVisibilityChange={this.props.onMappingVisibilityChange}\r\n          onStyleChange={this.props.onMappingStyleChange}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <Menu selectable={false}>\r\n        {items}\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MappingList\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport {\r\n  Button,\r\n  Col,\r\n  InputNumber,\r\n  Menu,\r\n  Popover,\r\n  Row,\r\n  Slider,\r\n  Space,\r\n  Switch\r\n} from 'antd'\r\nimport { SettingOutlined } from '@ant-design/icons'\r\nimport { FaEye, FaEyeSlash } from 'react-icons/fa'\r\n\r\nimport Description from './Description'\r\n\r\ninterface SegmentItemProps {\r\n  segment: dmv.segment.Segment\r\n  isVisible: boolean\r\n  metadata: dmv.metadata.Segmentation[]\r\n  defaultStyle: {\r\n    opacity: number\r\n  }\r\n  onVisibilityChange: ({ segmentUID, isVisible }: {\r\n    segmentUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onStyleChange: ({ segmentUID, styleOptions }: {\r\n    segmentUID: string\r\n    styleOptions: {\r\n      opacity: number\r\n    }\r\n  }) => void\r\n}\r\n\r\ninterface SegmentItemState {\r\n  isVisible: boolean\r\n  currentStyle: {\r\n    opacity: number\r\n  }\r\n}\r\n\r\n/**\r\n * React component representing a Segment.\r\n */\r\nclass SegmentItem extends React.Component<SegmentItemProps, SegmentItemState> {\r\n  constructor (props: SegmentItemProps) {\r\n    super(props)\r\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this)\r\n    this.handleOpacityChange = this.handleOpacityChange.bind(this)\r\n    this.state = {\r\n      isVisible: this.props.isVisible,\r\n      currentStyle: { opacity: this.props.defaultStyle.opacity }\r\n    }\r\n  }\r\n\r\n  handleVisibilityChange (\r\n    checked: boolean,\r\n    event: Event\r\n  ): void {\r\n    this.props.onVisibilityChange({\r\n      segmentUID: this.props.segment.uid,\r\n      isVisible: checked\r\n    })\r\n    this.setState({ isVisible: checked })\r\n  }\r\n\r\n  handleOpacityChange (value: number): void {\r\n    this.props.onStyleChange({\r\n      segmentUID: this.props.segment.uid,\r\n      styleOptions: {\r\n        opacity: value\r\n      }\r\n    })\r\n    this.setState({ currentStyle: { opacity: value } })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const attributes: Array<{ name: string, value: string }> = [\r\n      {\r\n        name: 'Property Category',\r\n        value: this.props.segment.propertyCategory.CodeMeaning\r\n      },\r\n      {\r\n        name: 'Property Type',\r\n        value: this.props.segment.propertyType.CodeMeaning\r\n      },\r\n      {\r\n        name: 'Algorithm Name',\r\n        value: this.props.segment.algorithmName\r\n      }\r\n    ]\r\n\r\n    const settings = (\r\n      <div>\r\n        <Row justify='center' align='middle'>\r\n          <Col span={6}>\r\n            Opacity\r\n          </Col>\r\n          <Col span={12}>\r\n            <Slider\r\n              range={false}\r\n              min={0}\r\n              max={1}\r\n              step={0.01}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n          <Col span={6}>\r\n            <InputNumber\r\n              min={0}\r\n              max={1}\r\n              size='small'\r\n              step={0.1}\r\n              style={{ width: '65px' }}\r\n              value={this.state.currentStyle.opacity}\r\n              onChange={this.handleOpacityChange}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n\r\n    /**\r\n     * This hack is required for Menu.Item to work properly:\r\n     * https://github.com/react-component/menu/issues/142\r\n     */\r\n    const {\r\n      defaultStyle,\r\n      isVisible,\r\n      segment,\r\n      metadata,\r\n      onVisibilityChange,\r\n      onStyleChange,\r\n      ...otherProps\r\n    } = this.props\r\n    return (\r\n      <Menu.Item\r\n        style={{ height: '100%', paddingLeft: '3px' }}\r\n        key={this.props.segment.uid}\r\n        {...otherProps}\r\n      >\r\n        <Space align='start'>\r\n          <div style={{ paddingLeft: '14px' }}>\r\n            <Space direction='vertical' align='end'>\r\n              <Switch\r\n                size='small'\r\n                onChange={this.handleVisibilityChange}\r\n                checked={this.props.isVisible}\r\n                checkedChildren={<FaEye />}\r\n                unCheckedChildren={<FaEyeSlash />}\r\n              />\r\n              <Popover\r\n                placement='left'\r\n                content={settings}\r\n                overlayStyle={{ width: '350px' }}\r\n                title='Display Settings'\r\n              >\r\n                <Button\r\n                  type='primary'\r\n                  shape='circle'\r\n                  icon={<SettingOutlined />}\r\n                />\r\n              </Popover>\r\n            </Space>\r\n          </div>\r\n          <Description\r\n            header={this.props.segment.label}\r\n            attributes={attributes}\r\n            selectable\r\n            hasLongValues\r\n          />\r\n        </Space>\r\n      </Menu.Item>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SegmentItem\r\n","import React from 'react'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport { Menu } from 'antd'\r\n\r\nimport SegmentItem from './SegmentItem'\r\n\r\ninterface SegmentListProps {\r\n  segments: dmv.segment.Segment[]\r\n  visibleSegmentUIDs: Set<string>\r\n  metadata: {\r\n    [segmentUID: string]: dmv.metadata.Segmentation[]\r\n  }\r\n  defaultSegmentStyles: {\r\n    [segmentUID: string]: {\r\n      opacity: number\r\n    }\r\n  }\r\n  onSegmentVisibilityChange: ({ segmentUID, isVisible }: {\r\n    segmentUID: string\r\n    isVisible: boolean\r\n  }) => void\r\n  onSegmentStyleChange: ({ segmentUID, styleOptions }: {\r\n    segmentUID: string\r\n    styleOptions: {\r\n      opacity: number\r\n    }\r\n  }) => void\r\n}\r\n\r\n/**\r\n * React component representing a list of Segments.\r\n */\r\nclass SegmentList extends React.Component<SegmentListProps, {}> {\r\n  render (): React.ReactNode {\r\n    const items = this.props.segments.map((segment, index) => {\r\n      const uid = segment.uid\r\n      return (\r\n        <SegmentItem\r\n          key={segment.uid}\r\n          segment={segment}\r\n          metadata={this.props.metadata[uid]}\r\n          isVisible={this.props.visibleSegmentUIDs.has(uid)}\r\n          defaultStyle={this.props.defaultSegmentStyles[uid]}\r\n          onVisibilityChange={this.props.onSegmentVisibilityChange}\r\n          onStyleChange={this.props.onSegmentStyleChange}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <Menu selectable={false}>\r\n        {items}\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SegmentList\r\n","export enum SOPClassUIDs {\r\n  VL_WHOLE_SLIDE_MICROSCOPY_IMAGE = '1.2.840.10008.5.1.4.1.1.77.1.6',\r\n  COMPREHENSIVE_SR = '1.2.840.10008.5.1.4.1.1.88.33',\r\n  COMPREHENSIVE_3D_SR = '1.2.840.10008.5.1.4.1.1.88.34',\r\n  SEGMENTATION = '1.2.840.10008.5.1.4.1.1.66.4',\r\n  MICROSCOPY_BULK_SIMPLE_ANNOTATION = '1.2.840.10008.5.1.4.1.1.91.1',\r\n  PARAMETRIC_MAP = '1.2.840.10008.5.1.4.1.1.30',\r\n  ADVANCED_BLENDING_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.8',\r\n  COLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.2',\r\n  GRAYSCALE_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.1',\r\n  PSEUDOCOLOR_SOFTCOPY_PRESENTATION_STATE = '1.2.840.10008.5.1.4.1.1.11.3'\r\n}\r\n","import React from 'react'\r\nimport {\r\n  NavigateFunction,\r\n  Params,\r\n  useLocation,\r\n  useNavigate,\r\n  useParams,\r\n  Location\r\n} from 'react-router-dom'\r\n\r\nexport interface RouteComponentProps {\r\n  location: Location\r\n  navigate: NavigateFunction\r\n  params: Params<string>\r\n}\r\n\r\nexport function withRouter<T> (Component: React.ComponentType<T>): Function {\r\n  function ComponentWithRouterProp (props: any): JSX.Element {\r\n    const location = useLocation()\r\n    const navigate = useNavigate()\r\n    const params = useParams()\r\n    return (\r\n      <Component\r\n        {...props}\r\n        location={location}\r\n        navigate={navigate}\r\n        params={params}\r\n      />\r\n    )\r\n  }\r\n  return ComponentWithRouterProp\r\n}\r\n","import React from 'react'\r\nimport {\r\n  FaDrawPolygon,\r\n  FaEye,\r\n  FaEyeSlash,\r\n  FaHandPaper,\r\n  FaHandPointer,\r\n  FaTrash,\r\n  FaSave\r\n} from 'react-icons/fa'\r\nimport {\r\n  Button as Btn,\r\n  Checkbox,\r\n  message,\r\n  Menu,\r\n  Modal,\r\n  Layout,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip\r\n} from 'antd'\r\nimport { UndoOutlined } from '@ant-design/icons'\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\nimport * as dcmjs from 'dcmjs'\r\nimport * as dwc from 'dicomweb-client'\r\n\r\nimport DicomWebManager from '../DicomWebManager'\r\nimport AnnotationList from './AnnotationList'\r\nimport AnnotationGroupList from './AnnotationGroupList'\r\nimport Button from './Button'\r\nimport Equipment from './Equipment'\r\nimport Report, { MeasurementReport } from './Report'\r\nimport SpecimenList from './SpecimenList'\r\nimport OpticalPathList from './OpticalPathList'\r\nimport MappingList from './MappingList'\r\nimport SegmentList from './SegmentList'\r\nimport { AnnotationSettings } from '../AppConfig'\r\nimport { Slide } from '../data/slides'\r\nimport { SOPClassUIDs } from '../data/uids'\r\nimport { findContentItemsByName } from '../utils/sr'\r\nimport { RouteComponentProps, withRouter } from '../utils/router'\r\n\r\nconst _buildKey = (concept: dcmjs.sr.coding.CodedConcept): string => {\r\n  const codingScheme = concept.CodingSchemeDesignator\r\n  const codeValue = concept.CodeValue\r\n  return `${codingScheme}-${codeValue}`\r\n}\r\n\r\nconst _getRoiKey = (roi: dmv.roi.ROI): string => {\r\n  const matches = findContentItemsByName({\r\n    content: roi.evaluations,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '121071',\r\n      meaning: 'Finding',\r\n      schemeDesignator: 'DCM'\r\n    })\r\n  })\r\n  if (matches.length === 0) {\r\n    throw new Error(`No finding found for ROI ${roi.uid}`)\r\n  }\r\n  const finding = matches[0] as dcmjs.sr.valueTypes.CodeContentItem\r\n  const findingName = finding.ConceptCodeSequence[0]\r\n  return _buildKey(findingName)\r\n}\r\n\r\nconst _areROIsEqual = (a: dmv.roi.ROI, b: dmv.roi.ROI): boolean => {\r\n  if (a.scoord3d.graphicType !== b.scoord3d.graphicType) {\r\n    return false\r\n  }\r\n  if (a.scoord3d.frameOfReferenceUID !== b.scoord3d.frameOfReferenceUID) {\r\n    return false\r\n  }\r\n  if (a.scoord3d.graphicData.length !== b.scoord3d.graphicData.length) {\r\n    return false\r\n  }\r\n\r\n  const decimals = 6\r\n  for (let i = 0; i < a.scoord3d.graphicData.length; ++i) {\r\n    if (a.scoord3d.graphicType === 'POINT') {\r\n      const s1 = a.scoord3d as dmv.scoord3d.Point\r\n      const s2 = b.scoord3d as dmv.scoord3d.Point\r\n      const c1 = s1.graphicData[i].toPrecision(decimals)\r\n      const c2 = s2.graphicData[i].toPrecision(decimals)\r\n      if (c1 !== c2) {\r\n        return false\r\n      }\r\n    } else {\r\n      const s1 = a.scoord3d as dmv.scoord3d.Polygon\r\n      const s2 = b.scoord3d as dmv.scoord3d.Polygon\r\n      for (let j = 0; j < s1.graphicData[i].length; ++j) {\r\n        const c1 = s1.graphicData[i][j].toPrecision(decimals)\r\n        const c2 = s2.graphicData[i][j].toPrecision(decimals)\r\n        if (c1 !== c2) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nconst _constructViewers = ({ client, slide, preload }: {\r\n  client: dwc.api.DICOMwebClient\r\n  slide: Slide\r\n  preload?: boolean\r\n}): {\r\n  volumeViewer: dmv.viewer.VolumeImageViewer\r\n  labelViewer?: dmv.viewer.LabelImageViewer\r\n} => {\r\n  const volumeViewer = new dmv.viewer.VolumeImageViewer({\r\n    client: client,\r\n    metadata: slide.volumeImages,\r\n    controls: ['overview'],\r\n    preload: preload\r\n  })\r\n  volumeViewer.activateSelectInteraction({})\r\n\r\n  let labelViewer\r\n  if (slide.labelImages.length > 0) {\r\n    labelViewer = new dmv.viewer.LabelImageViewer({\r\n      client: client,\r\n      metadata: slide.labelImages[0],\r\n      resizeFactor: 1,\r\n      orientation: 'vertical'\r\n    })\r\n  }\r\n\r\n  return { volumeViewer, labelViewer }\r\n}\r\n\r\n/*\r\n * Check whether the report is structured according to template\r\n * TID 1500 \"MeasurementReport\".\r\n */\r\nconst _implementsTID1500 = (\r\n  report: dmv.metadata.Comprehensive3DSR\r\n): boolean => {\r\n  const templateSeq = report.ContentTemplateSequence\r\n  if (templateSeq.length > 0) {\r\n    const tid = templateSeq[0].TemplateIdentifier\r\n    if (tid === '1500') {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\n/*\r\n * Check whether the subject described in the report is a specimen as compared\r\n * to a patient, fetus, or device.\r\n */\r\nconst _describesSpecimenSubject = (\r\n  report: dmv.metadata.Comprehensive3DSR\r\n): boolean => {\r\n  const items = findContentItemsByName({\r\n    content: report.ContentSequence,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '121024',\r\n      schemeDesignator: 'DCM',\r\n      meaning: 'Subject Class'\r\n    })\r\n  })\r\n  if (items.length === 0) {\r\n    return false\r\n  }\r\n  const subjectClassItem = items[0] as dcmjs.sr.valueTypes.CodeContentItem\r\n  const subjectClassValue = subjectClassItem.ConceptCodeSequence[0]\r\n  const retrievedConcept = new dcmjs.sr.coding.CodedConcept({\r\n    value: subjectClassValue.CodeValue,\r\n    meaning: subjectClassValue.CodeMeaning,\r\n    schemeDesignator: subjectClassValue.CodingSchemeDesignator\r\n  })\r\n  const expectedConcept = new dcmjs.sr.coding.CodedConcept({\r\n    value: '121027',\r\n    meaning: 'Specimen',\r\n    schemeDesignator: 'DCM'\r\n  })\r\n  if (retrievedConcept.equals(expectedConcept)) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\n/*\r\n * Check whether the report contains appropriate graphic ROI annotations.\r\n */\r\nconst _containsROIAnnotations = (\r\n  report: dmv.metadata.Comprehensive3DSR\r\n): boolean => {\r\n  const measurements = findContentItemsByName({\r\n    content: report.ContentSequence,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '126010',\r\n      schemeDesignator: 'DCM',\r\n      meaning: 'Imaging Measurements'\r\n    })\r\n  })\r\n  if (measurements.length === 0) {\r\n    return false\r\n  }\r\n  const container = measurements[0] as dcmjs.sr.valueTypes.ContainerContentItem\r\n  const measurementGroups = findContentItemsByName({\r\n    content: container.ContentSequence,\r\n    name: new dcmjs.sr.coding.CodedConcept({\r\n      value: '125007',\r\n      schemeDesignator: 'DCM',\r\n      meaning: 'Measurement Group'\r\n    })\r\n  })\r\n\r\n  let foundRegion = false\r\n  measurementGroups.forEach((group) => {\r\n    const container = group as dcmjs.sr.valueTypes.ContainerContentItem\r\n    const regions = findContentItemsByName({\r\n      content: container.ContentSequence,\r\n      name: new dcmjs.sr.coding.CodedConcept({\r\n        value: '111030',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Image Region'\r\n      })\r\n    })\r\n    if (regions.length > 0) {\r\n      if (regions[0].ValueType === dcmjs.sr.valueTypes.ValueTypes.SCOORD3D) {\r\n        foundRegion = true\r\n      }\r\n    }\r\n  })\r\n\r\n  return foundRegion\r\n}\r\n\r\ninterface EvaluationOptions {\r\n  name: dcmjs.sr.coding.CodedConcept\r\n  values: dcmjs.sr.coding.CodedConcept[]\r\n}\r\n\r\ninterface Evaluation {\r\n  name: dcmjs.sr.coding.CodedConcept\r\n  value: dcmjs.sr.coding.CodedConcept\r\n}\r\n\r\ninterface Measurement {\r\n  name: dcmjs.sr.coding.CodedConcept\r\n  value?: number\r\n  unit: dcmjs.sr.coding.CodedConcept\r\n}\r\n\r\ninterface SlideViewerProps extends RouteComponentProps {\r\n  slide: Slide\r\n  client: DicomWebManager\r\n  studyInstanceUID: string\r\n  seriesInstanceUID: string\r\n  app: {\r\n    name: string\r\n    version: string\r\n    uid: string\r\n    organization?: string\r\n  }\r\n  preload?: boolean\r\n  annotations: AnnotationSettings[]\r\n  enableAnnotationTools: boolean\r\n  user?: {\r\n    name: string\r\n    email: string\r\n  }\r\n  selectedPresentationStateUID?: string\r\n}\r\n\r\ninterface SlideViewerState {\r\n  selectedRoiUIDs: Set<string>\r\n  visibleRoiUIDs: Set<string>\r\n  visibleSegmentUIDs: Set<string>\r\n  visibleMappingUIDs: Set<string>\r\n  visibleAnnotationGroupUIDs: Set<string>\r\n  visibleOpticalPathIdentifiers: Set<string>\r\n  activeOpticalPathIdentifiers: Set<string>\r\n  presentationStates: dmv.metadata.AdvancedBlendingPresentationState[]\r\n  selectedPresentationStateUID?: string\r\n  selectedFinding?: dcmjs.sr.coding.CodedConcept\r\n  selectedEvaluations: Evaluation[]\r\n  selectedGeometryType?: string\r\n  selectedMarkup?: string\r\n  generatedReport?: dmv.metadata.Comprehensive3DSR\r\n  isLoading: boolean\r\n  isAnnotationModalVisible: boolean\r\n  isReportModalVisible: boolean\r\n  isRoiDrawingActive: boolean\r\n  isRoiModificationActive: boolean\r\n  isRoiTranslationActive: boolean\r\n  areRoisHidden: boolean\r\n  pixelDataStatistics: {\r\n    [opticalPathIdentifier: string]: {\r\n      min: number\r\n      max: number\r\n      numFramesSampled: number\r\n    }\r\n  }\r\n  loadingFrames: Set<string>\r\n}\r\n\r\n/**\r\n * React component for interactive viewing of an individual digital slide,\r\n * which corresponds to one DICOM Series of DICOM Slide Microscopy images and\r\n * potentially one or more associated DICOM Series of DICOM SR documents.\r\n */\r\nclass SlideViewer extends React.Component<SlideViewerProps, SlideViewerState> {\r\n  private readonly findingOptions: dcmjs.sr.coding.CodedConcept[] = []\r\n\r\n  private readonly evaluationOptions: { [key: string]: EvaluationOptions[] } = {}\r\n\r\n  private readonly measurements: Measurement[] = []\r\n\r\n  private readonly geometryTypeOptions: { [key: string]: string[] } = {}\r\n\r\n  private readonly volumeViewportRef: React.RefObject<HTMLDivElement>\r\n\r\n  private readonly labelViewportRef: React.RefObject<HTMLDivElement>\r\n\r\n  private volumeViewer: dmv.viewer.VolumeImageViewer\r\n\r\n  private labelViewer?: dmv.viewer.LabelImageViewer\r\n\r\n  private readonly defaultRoiStyle: dmv.viewer.ROIStyleOptions = {\r\n    stroke: {\r\n      color: [0, 126, 163],\r\n      width: 2\r\n    },\r\n    fill: {\r\n      color: [0, 126, 163, 0.1]\r\n    }\r\n  }\r\n\r\n  private roiStyles: {[key: string]: dmv.viewer.ROIStyleOptions} = {}\r\n\r\n  private readonly selectionColor: number[] = [140, 184, 198]\r\n\r\n  private readonly selectedRoiStyle: {\r\n    stroke?: { color: number[], width: number }\r\n    fill?: { color: number[] }\r\n  } = {\r\n    stroke: { color: [...this.selectionColor, 1], width: 3 },\r\n    fill: { color: [...this.selectionColor, 0.2] }\r\n  }\r\n\r\n  constructor (props: SlideViewerProps) {\r\n    super(props)\r\n    console.info(\r\n      `view slide \"${this.props.slide.containerIdentifier}\": `,\r\n      this.props.slide\r\n    )\r\n    const geometryTypeOptions = [\r\n      'point',\r\n      'circle',\r\n      'box',\r\n      'polygon',\r\n      'line',\r\n      'freehandpolygon',\r\n      'freehandline'\r\n    ]\r\n    props.annotations.forEach((annotation: AnnotationSettings) => {\r\n      const finding = new dcmjs.sr.coding.CodedConcept(annotation.finding)\r\n      this.findingOptions.push(finding)\r\n      const key = _buildKey(finding)\r\n      if (annotation.geometryTypes !== undefined) {\r\n        this.geometryTypeOptions[key] = annotation.geometryTypes\r\n      } else {\r\n        this.geometryTypeOptions[key] = geometryTypeOptions\r\n      }\r\n      this.evaluationOptions[key] = []\r\n      if (annotation.evaluations !== undefined) {\r\n        annotation.evaluations.forEach(evaluation => {\r\n          this.evaluationOptions[key].push({\r\n            name: new dcmjs.sr.coding.CodedConcept(evaluation.name),\r\n            values: evaluation.values.map(value => {\r\n              return new dcmjs.sr.coding.CodedConcept(value)\r\n            })\r\n          })\r\n        })\r\n      }\r\n      if (annotation.measurements !== undefined) {\r\n        annotation.measurements.forEach(measurement => {\r\n          this.measurements.push({\r\n            name: new dcmjs.sr.coding.CodedConcept(measurement.name),\r\n            value: undefined,\r\n            unit: new dcmjs.sr.coding.CodedConcept(measurement.unit)\r\n          })\r\n        })\r\n      }\r\n      if (annotation.style != null) {\r\n        this.roiStyles[key] = annotation.style\r\n      } else {\r\n        this.roiStyles[key] = this.defaultRoiStyle\r\n      }\r\n    })\r\n\r\n    this.componentSetup = this.componentSetup.bind(this)\r\n    this.componentCleanup = this.componentCleanup.bind(this)\r\n\r\n    this.handleRoiDrawing = this.handleRoiDrawing.bind(this)\r\n    this.handleRoiTranslation = this.handleRoiTranslation.bind(this)\r\n    this.handleRoiModification = this.handleRoiModification.bind(this)\r\n    this.handleRoiVisibilityChange = this.handleRoiVisibilityChange.bind(this)\r\n    this.handleRoiRemoval = this.handleRoiRemoval.bind(this)\r\n    this.handleAnnotationConfigurationCancellation = this.handleAnnotationConfigurationCancellation.bind(this)\r\n    this.handleAnnotationGeometryTypeSelection = this.handleAnnotationGeometryTypeSelection.bind(this)\r\n    this.handleAnnotationMeasurementActivation = this.handleAnnotationMeasurementActivation.bind(this)\r\n    this.handleAnnotationFindingSelection = this.handleAnnotationFindingSelection.bind(this)\r\n    this.handleAnnotationEvaluationSelection = this.handleAnnotationEvaluationSelection.bind(this)\r\n    this.handleAnnotationEvaluationClearance = this.handleAnnotationEvaluationClearance.bind(this)\r\n    this.handleAnnotationConfigurationCompletion = this.handleAnnotationConfigurationCompletion.bind(this)\r\n    this.handleAnnotationSelection = this.handleAnnotationSelection.bind(this)\r\n    this.handleAnnotationVisibilityChange = this.handleAnnotationVisibilityChange.bind(this)\r\n    this.handleAnnotationGroupVisibilityChange = this.handleAnnotationGroupVisibilityChange.bind(this)\r\n    this.handleAnnotationGroupStyleChange = this.handleAnnotationGroupStyleChange.bind(this)\r\n    this.handleReportGeneration = this.handleReportGeneration.bind(this)\r\n    this.handleReportVerification = this.handleReportVerification.bind(this)\r\n    this.handleReportCancellation = this.handleReportCancellation.bind(this)\r\n    this.handleSegmentVisibilityChange = this.handleSegmentVisibilityChange.bind(this)\r\n    this.handleSegmentStyleChange = this.handleSegmentStyleChange.bind(this)\r\n    this.handleMappingVisibilityChange = this.handleMappingVisibilityChange.bind(this)\r\n    this.handleMappingStyleChange = this.handleMappingStyleChange.bind(this)\r\n    this.handleOpticalPathVisibilityChange = this.handleOpticalPathVisibilityChange.bind(this)\r\n    this.handleOpticalPathStyleChange = this.handleOpticalPathStyleChange.bind(this)\r\n    this.handleOpticalPathActivityChange = this.handleOpticalPathActivityChange.bind(this)\r\n    this.handlePresentationStateSelection = this.handlePresentationStateSelection.bind(this)\r\n    this.handlePresentationStateReset = this.handlePresentationStateReset.bind(this)\r\n\r\n    console.info(\r\n      'instantiate viewers for slide of series ' +\r\n      this.props.seriesInstanceUID\r\n    )\r\n    const { volumeViewer, labelViewer } = _constructViewers({\r\n      client: this.props.client,\r\n      slide: this.props.slide,\r\n      preload: this.props.preload\r\n    })\r\n    this.volumeViewer = volumeViewer\r\n    this.labelViewer = labelViewer\r\n    this.volumeViewportRef = React.createRef<HTMLDivElement>()\r\n    this.labelViewportRef = React.createRef<HTMLDivElement>()\r\n\r\n    /**\r\n     * Deactivate all optical paths. Visibility will be set later, potentially\r\n     * using based on available presentation state instances.\r\n     */\r\n    this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\r\n      this.volumeViewer.deactivateOpticalPath(opticalPath.identifier)\r\n    })\r\n\r\n    this.state = {\r\n      selectedRoiUIDs: new Set(),\r\n      visibleRoiUIDs: new Set(),\r\n      visibleSegmentUIDs: new Set(),\r\n      visibleMappingUIDs: new Set(),\r\n      visibleAnnotationGroupUIDs: new Set(),\r\n      visibleOpticalPathIdentifiers: new Set(),\r\n      activeOpticalPathIdentifiers: new Set(),\r\n      presentationStates: [],\r\n      selectedFinding: undefined,\r\n      selectedEvaluations: [],\r\n      generatedReport: undefined,\r\n      isLoading: false,\r\n      isAnnotationModalVisible: false,\r\n      isReportModalVisible: false,\r\n      isRoiDrawingActive: false,\r\n      isRoiTranslationActive: false,\r\n      isRoiModificationActive: false,\r\n      areRoisHidden: false,\r\n      pixelDataStatistics: {},\r\n      selectedPresentationStateUID: this.props.selectedPresentationStateUID,\r\n      loadingFrames: new Set()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate (\r\n    previousProps: SlideViewerProps,\r\n    previousState: SlideViewerState\r\n  ): void {\r\n    /** Fetch data and update the viewports if the route has changed (\r\n     * i.e., if another series has been selected) or if the client has changed.\r\n     */\r\n    if (\r\n      this.props.location.pathname !== previousProps.location.pathname ||\r\n      this.props.studyInstanceUID !== previousProps.studyInstanceUID ||\r\n      this.props.seriesInstanceUID !== previousProps.seriesInstanceUID ||\r\n      this.props.slide !== previousProps.slide ||\r\n      this.props.client !== previousProps.client\r\n    ) {\r\n      this.volumeViewer.cleanup()\r\n      if (this.labelViewer != null) {\r\n        this.labelViewer.cleanup()\r\n      }\r\n      const { volumeViewer, labelViewer } = _constructViewers({\r\n        client: this.props.client,\r\n        slide: this.props.slide,\r\n        preload: this.props.preload\r\n      })\r\n      this.volumeViewer = volumeViewer\r\n      this.labelViewer = labelViewer\r\n\r\n      const activeOpticalPathIdentifiers: Set<string> = new Set()\r\n      const visibleOpticalPathIdentifiers: Set<string> = new Set()\r\n      this.volumeViewer.getAllOpticalPaths().forEach(opticalPath => {\r\n        const identifier = opticalPath.identifier\r\n        if (this.volumeViewer.isOpticalPathVisible(identifier)) {\r\n          visibleOpticalPathIdentifiers.add(identifier)\r\n        }\r\n        if (this.volumeViewer.isOpticalPathActive(identifier)) {\r\n          activeOpticalPathIdentifiers.add(identifier)\r\n        }\r\n      })\r\n      this.setState({\r\n        visibleRoiUIDs: new Set(),\r\n        visibleSegmentUIDs: new Set(),\r\n        visibleMappingUIDs: new Set(),\r\n        visibleAnnotationGroupUIDs: new Set(),\r\n        visibleOpticalPathIdentifiers,\r\n        activeOpticalPathIdentifiers,\r\n        presentationStates: [],\r\n        loadingFrames: new Set()\r\n      })\r\n      this.populateViewports()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve Presentation State instances that reference the any images of\r\n   * the currently selected series.\r\n   */\r\n  loadPresentationStates = (): void => {\r\n    console.info('search for Presentation State instances')\r\n    this.props.client.searchForInstances({\r\n      studyInstanceUID: this.props.studyInstanceUID,\r\n      queryParams: {\r\n        Modality: 'PR'\r\n      }\r\n    }).then((matchedInstances): void => {\r\n      if (matchedInstances == null) {\r\n        matchedInstances = []\r\n      }\r\n      matchedInstances.forEach((rawInstance, index) => {\r\n        const { dataset } = dmv.metadata.formatMetadata(rawInstance)\r\n        const instance = dataset as dmv.metadata.Instance\r\n        console.info(`retrieve PR instance \"${instance.SOPInstanceUID}\"`)\r\n        this.props.client.retrieveInstance({\r\n          studyInstanceUID: this.props.studyInstanceUID,\r\n          seriesInstanceUID: instance.SeriesInstanceUID,\r\n          sopInstanceUID: instance.SOPInstanceUID\r\n        }).then((retrievedInstance): void => {\r\n          const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\r\n          const { dataset } = dmv.metadata.formatMetadata(data.dict)\r\n          if (this.props.slide.areVolumeImagesMonochrome) {\r\n            const presentationState = (\r\n              dataset as\r\n              unknown as\r\n              dmv.metadata.AdvancedBlendingPresentationState\r\n            )\r\n            let doesMatch = false\r\n            presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\r\n              doesMatch = this.props.slide.seriesInstanceUIDs.includes(\r\n                blendingItem.SeriesInstanceUID\r\n              )\r\n            }\r\n            )\r\n            if (doesMatch) {\r\n              console.info(\r\n                'include Advanced Blending Presentation State instance ' +\r\n                `\"${presentationState.SOPInstanceUID}\"`\r\n              )\r\n              if (\r\n                index === 0 &&\r\n                this.props.selectedPresentationStateUID == null\r\n              ) {\r\n                this.setPresentationState(presentationState)\r\n              } else {\r\n                if (\r\n                  presentationState.SOPInstanceUID ===\r\n                  this.props.selectedPresentationStateUID\r\n                ) {\r\n                  this.setPresentationState(presentationState)\r\n                }\r\n              }\r\n              this.setState(state => {\r\n                const mapping: {\r\n                  [sopInstanceUID: string]:\r\n                  dmv.metadata.AdvancedBlendingPresentationState\r\n                } = {}\r\n                state.presentationStates.forEach(instance => {\r\n                  mapping[instance.SOPInstanceUID] = instance\r\n                })\r\n                mapping[presentationState.SOPInstanceUID] = presentationState\r\n                return { presentationStates: Object.values(mapping) }\r\n              })\r\n            }\r\n          } else {\r\n            console.info(\r\n              `ignore presentation state \"${instance.SOPInstanceUID}\", ` +\r\n              'application of presentation states for color images ' +\r\n              'has not (yet) been implemented'\r\n            )\r\n          }\r\n        }).catch((error) => {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          message.error('Presentation State could not be loaded')\r\n          console.error(\r\n            'failed to load presentation state ' +\r\n            `of SOP instance \"${instance.SOPInstanceUID}\" ` +\r\n            `of series \"${instance.SeriesInstanceUID}\" ` +\r\n            `of study \"${this.props.studyInstanceUID}\": `,\r\n            error\r\n          )\r\n        })\r\n      })\r\n    }).catch((error) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error('Presentation State could not be loaded')\r\n      console.error(error)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set presentation state as specified by a DICOM Presentation State instance.\r\n   */\r\n  setPresentationState = (\r\n    presentationState: dmv.metadata.AdvancedBlendingPresentationState\r\n  ): void => {\r\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\r\n    console.info(\r\n      `apply Presentation State instance \"${presentationState.SOPInstanceUID}\"`\r\n    )\r\n    const opticalPathStyles: {\r\n      [opticalPathIdentifier: string]: {\r\n        opacity: number\r\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n        limitValues?: number[]\r\n      } | null\r\n    } = {}\r\n    opticalPaths.forEach(opticalPath => {\r\n      // First, deactivate and hide all optical paths\r\n      const identifier = opticalPath.identifier\r\n      this.volumeViewer.hideOpticalPath(identifier)\r\n      this.volumeViewer.deactivateOpticalPath(identifier)\r\n\r\n      presentationState.AdvancedBlendingSequence.forEach(blendingItem => {\r\n        // FIXME\r\n        let refInstanceItems = blendingItem.ReferencedInstanceSequence\r\n        if (refInstanceItems === undefined) {\r\n          refInstanceItems = blendingItem.ReferencedImageSequence\r\n        }\r\n        if (refInstanceItems === undefined) {\r\n          return\r\n        }\r\n        refInstanceItems.forEach(imageItem => {\r\n          const isReferenced = opticalPath.sopInstanceUIDs.includes(\r\n            imageItem.ReferencedSOPInstanceUID\r\n          ) as boolean\r\n          if (isReferenced) {\r\n            let paletteColorLUT\r\n            if (blendingItem.PaletteColorLookupTableSequence != null) {\r\n              const cpLUTItem = blendingItem.PaletteColorLookupTableSequence[0]\r\n              paletteColorLUT = new dmv.color.PaletteColorLookupTable({\r\n                uid: (\r\n                  cpLUTItem.PaletteColorLookupTableUID != null\r\n                    ? cpLUTItem.PaletteColorLookupTableUID\r\n                    : ''\r\n                ),\r\n                redDescriptor:\r\n                  cpLUTItem.RedPaletteColorLookupTableDescriptor,\r\n                greenDescriptor:\r\n                  cpLUTItem.GreenPaletteColorLookupTableDescriptor,\r\n                blueDescriptor:\r\n                  cpLUTItem.BluePaletteColorLookupTableDescriptor,\r\n                redData: (\r\n                  (cpLUTItem.RedPaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.RedPaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                ),\r\n                greenData: (\r\n                  (cpLUTItem.GreenPaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.GreenPaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                ),\r\n                blueData: (\r\n                  (cpLUTItem.BluePaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.BluePaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                ),\r\n                redSegmentedData: (\r\n                  (cpLUTItem.SegmentedRedPaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.SegmentedRedPaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                ),\r\n                greenSegmentedData: (\r\n                  (cpLUTItem.SegmentedGreenPaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.SegmentedGreenPaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                ),\r\n                blueSegmentedData: (\r\n                  (cpLUTItem.SegmentedBluePaletteColorLookupTableData != null)\r\n                    ? new Uint16Array(\r\n                      cpLUTItem.SegmentedBluePaletteColorLookupTableData\r\n                    )\r\n                    : undefined\r\n                )\r\n              })\r\n            }\r\n\r\n            let limitValues\r\n            if (blendingItem.SoftcopyVOILUTSequence != null) {\r\n              const voiLUTItem = blendingItem.SoftcopyVOILUTSequence[0]\r\n              const windowCenter = voiLUTItem.WindowCenter\r\n              const windowWidth = voiLUTItem.WindowWidth\r\n              limitValues = [\r\n                windowCenter - windowWidth * 0.5,\r\n                windowCenter + windowWidth * 0.5\r\n              ]\r\n            }\r\n\r\n            opticalPathStyles[identifier] = {\r\n              opacity: 1,\r\n              paletteColorLookupTable: paletteColorLUT,\r\n              limitValues: limitValues\r\n            }\r\n          }\r\n        })\r\n      })\r\n    })\r\n\r\n    const selectedOpticalPathIdentifiers: Set<string> = new Set()\r\n    Object.keys(opticalPathStyles).forEach(identifier => {\r\n      const styleOptions = opticalPathStyles[identifier]\r\n      if (styleOptions != null) {\r\n        this.volumeViewer.setOpticalPathStyle(identifier, styleOptions)\r\n        this.volumeViewer.activateOpticalPath(identifier)\r\n        this.volumeViewer.showOpticalPath(identifier)\r\n        selectedOpticalPathIdentifiers.add(identifier)\r\n      } else {\r\n        this.volumeViewer.hideOpticalPath(identifier)\r\n        this.volumeViewer.deactivateOpticalPath(identifier)\r\n      }\r\n    })\r\n    const searchParams = new URLSearchParams(this.props.location.search)\r\n    searchParams.set('state', presentationState.SOPInstanceUID)\r\n    this.props.navigate(\r\n      {\r\n        pathname: this.props.location.pathname,\r\n        search: searchParams.toString()\r\n      },\r\n      { replace: true }\r\n    )\r\n    this.setState(state => ({\r\n      activeOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\r\n      visibleOpticalPathIdentifiers: selectedOpticalPathIdentifiers,\r\n      selectedPresentationStateUID: presentationState.SOPInstanceUID\r\n    }))\r\n  }\r\n\r\n  getRoiStyle = (key: string): dmv.viewer.ROIStyleOptions => {\r\n    if (this.roiStyles[key] !== undefined) {\r\n      return this.roiStyles[key]\r\n    }\r\n    return this.defaultRoiStyle\r\n  }\r\n\r\n  /**\r\n   * Retrieve Structured Report instances that contain regions of interests\r\n   * with 3D spatial coordinates defined in the same frame of reference as the\r\n   * currently selected series and add them to the VOLUME image viewer.\r\n   */\r\n  addAnnotations = (): void => {\r\n    console.info('search for Comprehensive 3D SR instances')\r\n    this.props.client.searchForInstances({\r\n      studyInstanceUID: this.props.studyInstanceUID,\r\n      queryParams: {\r\n        Modality: 'SR'\r\n      }\r\n    }).then((matchedInstances): void => {\r\n      if (matchedInstances == null) {\r\n        matchedInstances = []\r\n      }\r\n      matchedInstances.forEach(i => {\r\n        const { dataset } = dmv.metadata.formatMetadata(i)\r\n        const instance = dataset as dmv.metadata.Instance\r\n        if (instance.SOPClassUID === SOPClassUIDs.COMPREHENSIVE_3D_SR) {\r\n          console.info(`retrieve SR instance \"${instance.SOPInstanceUID}\"`)\r\n          this.props.client.retrieveInstance({\r\n            studyInstanceUID: this.props.studyInstanceUID,\r\n            seriesInstanceUID: instance.SeriesInstanceUID,\r\n            sopInstanceUID: instance.SOPInstanceUID\r\n          }).then((retrievedInstance): void => {\r\n            const data = dcmjs.data.DicomMessage.readFile(retrievedInstance)\r\n            const { dataset } = dmv.metadata.formatMetadata(data.dict)\r\n            const report = dataset as unknown as dmv.metadata.Comprehensive3DSR\r\n            /*\r\n             * Perform a couple of checks to ensure the document content of the\r\n             * report fullfils the requirements of the application.\r\n             */\r\n            if (!_implementsTID1500(report)) {\r\n              console.debug(\r\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\r\n                'because it is not structured according to template ' +\r\n                'TID 1500 \"MeasurementReport\"'\r\n              )\r\n              return\r\n            }\r\n            if (!_describesSpecimenSubject(report)) {\r\n              console.debug(\r\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\r\n                'because it does not describe a specimen subject'\r\n              )\r\n              return\r\n            }\r\n            if (!_containsROIAnnotations(report)) {\r\n              console.debug(\r\n                `ignore SR document \"${report.SOPInstanceUID}\" ` +\r\n                'because it does not contain any suitable ROI annotations'\r\n              )\r\n              return\r\n            }\r\n\r\n            const content = new MeasurementReport(report)\r\n            content.ROIs.forEach(roi => {\r\n              console.info(`add ROI \"${roi.uid}\"`)\r\n              const scoord3d = roi.scoord3d\r\n              const image = this.props.slide.volumeImages[0]\r\n              if (scoord3d.frameOfReferenceUID === image.FrameOfReferenceUID) {\r\n                /*\r\n                 * ROIs may get assigned new UIDs upon re-rendering of the\r\n                 * page and we need to ensure that we don't add them twice.\r\n                 * The same ROI may be stored in multiple SR documents and\r\n                 * we don't want them to show up twice.\r\n                 * TODO: We should probably either \"merge\" measurements and\r\n                 * quantitative evaluations or pick the ROI from the \"best\"\r\n                 * available report (COMPLETE and VERIFIED).\r\n                 */\r\n                const doesROIExist = this.volumeViewer.getAllROIs().some(\r\n                  (otherROI: dmv.roi.ROI): boolean => {\r\n                    return _areROIsEqual(otherROI, roi)\r\n                  }\r\n                )\r\n                if (!doesROIExist) {\r\n                  try {\r\n                    // Add ROI without style such that it won't be visible.\r\n                    this.volumeViewer.addROI(roi, {})\r\n                  } catch {\r\n                    console.error(`could not add ROI \"${roi.uid}\"`)\r\n                  }\r\n                } else {\r\n                  console.debug(`skip already existing ROI \"${roi.uid}\"`)\r\n                }\r\n              } else {\r\n                console.debug(\r\n                  `skip ROI \"${roi.uid}\" ` +\r\n                  `of SR document \"${report.SOPInstanceUID}\"` +\r\n                  'because it is defined in another frame of reference'\r\n                )\r\n              }\r\n            })\r\n          }).catch((error) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            message.error('Annotations could not be loaded')\r\n            console.error(\r\n              'failed to load ROIs ' +\r\n              `of SOP instance \"${instance.SOPInstanceUID}\" ` +\r\n              `of series \"${instance.SeriesInstanceUID}\" ` +\r\n              `of study \"${this.props.studyInstanceUID}\": `,\r\n              error\r\n            )\r\n          })\r\n          /*\r\n           * React is not aware of the fact that ROIs have been added via the\r\n           * viewer (the viewport is a ref object) and won't show the\r\n           * annotations in the user interface unless an update is forced.\r\n           */\r\n          this.forceUpdate()\r\n        }\r\n      })\r\n    }).catch((error) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error('Annotations could not be loaded')\r\n      console.error(error)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieve Microscopy Bulk Simple Annotations instances that contain\r\n   * annotation groups defined in the same frame of reference as the currently\r\n   * selected series and add them to the VOLUME image viewer.\r\n   */\r\n  addAnnotationGroups = (): void => {\r\n    console.info('search for Microscopy Bulk Simple Annotations instances')\r\n    this.props.client.searchForSeries({\r\n      studyInstanceUID: this.props.studyInstanceUID,\r\n      queryParams: {\r\n        Modality: 'ANN'\r\n      }\r\n    }).then((matchedSeries): void => {\r\n      if (matchedSeries == null) {\r\n        matchedSeries = []\r\n      }\r\n      matchedSeries.forEach(s => {\r\n        const { dataset } = dmv.metadata.formatMetadata(s)\r\n        const series = dataset as dmv.metadata.Series\r\n        this.props.client.retrieveSeriesMetadata({\r\n          studyInstanceUID: this.props.studyInstanceUID,\r\n          seriesInstanceUID: series.SeriesInstanceUID\r\n        }).then((retrievedMetadata): void => {\r\n          let annotations: dmv.metadata.MicroscopyBulkSimpleAnnotations[]\r\n          annotations = retrievedMetadata.map(metadata => {\r\n            return new dmv.metadata.MicroscopyBulkSimpleAnnotations({\r\n              metadata\r\n            })\r\n          })\r\n          annotations = annotations.filter(ann => {\r\n            const refImage = this.props.slide.volumeImages[0]\r\n            return (\r\n              ann.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\r\n              ann.ContainerIdentifier === refImage.ContainerIdentifier\r\n            )\r\n          })\r\n          annotations.forEach(ann => {\r\n            try {\r\n              this.volumeViewer.addAnnotationGroups(ann)\r\n            } catch (error: any) {\r\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n              message.error(\r\n                'Microscopy Bulk Simple Annotations cannot be displayed.'\r\n              )\r\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n              console.error('failed to add annotation groups: ', error)\r\n            }\r\n          })\r\n          /*\r\n           * React is not aware of the fact that annotation groups have been\r\n           * added via the viewer (the underlying HTML viewport element is a\r\n           * ref object) and won't show the annotation groups in the user\r\n           * interface unless an update is forced.\r\n           */\r\n          this.forceUpdate()\r\n        }).catch((error: any) => {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          message.error(\r\n            'Retrieval of metadata of Microscopy Bulk Simple Annotations ' +\r\n            'instances failed.'\r\n          )\r\n          console.error(\r\n            'failed to retrieve metadata of ' +\r\n            'Microscopy Bulk Simple Annotations instances: ',\r\n            error\r\n          )\r\n        })\r\n      })\r\n    }).catch((error: any) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error(\r\n        'Search for Microscopy Bulk Simple Annotations instances failed.'\r\n      )\r\n      console.error(\r\n        'failed to search for Microscopy Bulk Simple Annotations instances: ',\r\n        error\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieve Segmentation instances that contain segments defined in the same\r\n   * frame of reference as the currently selected series and add them to the\r\n   * VOLUME image viewer.\r\n   */\r\n  addSegmentations = (): void => {\r\n    console.info('search for Segmentation instances')\r\n    this.props.client.searchForSeries({\r\n      studyInstanceUID: this.props.studyInstanceUID,\r\n      queryParams: {\r\n        Modality: 'SEG'\r\n      }\r\n    }).then((matchedSeries): void => {\r\n      if (matchedSeries == null) {\r\n        matchedSeries = []\r\n      }\r\n      matchedSeries.forEach((s, i) => {\r\n        const { dataset } = dmv.metadata.formatMetadata(s)\r\n        const series = dataset as dmv.metadata.Series\r\n        this.props.client.retrieveSeriesMetadata({\r\n          studyInstanceUID: this.props.studyInstanceUID,\r\n          seriesInstanceUID: series.SeriesInstanceUID\r\n        }).then((retrievedMetadata): void => {\r\n          const segmentations: dmv.metadata.Segmentation[] = []\r\n          retrievedMetadata.forEach(metadata => {\r\n            const seg = new dmv.metadata.Segmentation({ metadata })\r\n            const refImage = this.props.slide.volumeImages[0]\r\n            if (\r\n              seg.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\r\n              seg.ContainerIdentifier === refImage.ContainerIdentifier\r\n            ) {\r\n              segmentations.push(seg)\r\n            }\r\n          })\r\n          if (segmentations.length > 0) {\r\n            try {\r\n              this.volumeViewer.addSegments(segmentations)\r\n            } catch (error: any) {\r\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n              message.error('Segmentations cannot be displayed')\r\n              console.error('failed to add segments: ', error)\r\n            }\r\n            /*\r\n           * React is not aware of the fact that segments have been added via\r\n           * the viewer (the underlying HTML viewport element is a ref object)\r\n           * and won't show the segments in the user interface unless an update\r\n           * is forced.\r\n           */\r\n            this.forceUpdate()\r\n          }\r\n        }).catch((error: any) => {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          message.error(\r\n            'Retrieval of metadata of Segmentation instances failed.'\r\n          )\r\n          console.error(\r\n            'failed to retrieve metadata of Segmentation instances: ',\r\n            error\r\n          )\r\n        })\r\n      })\r\n    }).catch((error: any) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error('Search for Segmentation instances failed.')\r\n      console.error('failed to search for Segmentation instances: ', error)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Retrieve Parametric Map instances that contain mappings defined in the same\r\n   * frame of reference as the currently selected series and add them to the\r\n   * VOLUME image viewer.\r\n   */\r\n  addParametricMaps = (): void => {\r\n    console.info('search for Parametric Map instances')\r\n    this.props.client.searchForSeries({\r\n      studyInstanceUID: this.props.studyInstanceUID,\r\n      queryParams: {\r\n        Modality: 'OT'\r\n      }\r\n    }).then((matchedSeries): void => {\r\n      if (matchedSeries == null) {\r\n        matchedSeries = []\r\n      }\r\n      matchedSeries.forEach(s => {\r\n        const { dataset } = dmv.metadata.formatMetadata(s)\r\n        const series = dataset as dmv.metadata.Series\r\n        this.props.client.retrieveSeriesMetadata({\r\n          studyInstanceUID: this.props.studyInstanceUID,\r\n          seriesInstanceUID: series.SeriesInstanceUID\r\n        }).then((retrievedMetadata): void => {\r\n          const parametricMaps: dmv.metadata.ParametricMap[] = []\r\n          retrievedMetadata.forEach(metadata => {\r\n            const pm = new dmv.metadata.ParametricMap({ metadata })\r\n            const refImage = this.props.slide.volumeImages[0]\r\n            if (\r\n              pm.FrameOfReferenceUID === refImage.FrameOfReferenceUID &&\r\n              pm.ContainerIdentifier === refImage.ContainerIdentifier\r\n            ) {\r\n              parametricMaps.push(pm)\r\n            }\r\n          })\r\n          if (parametricMaps.length > 0) {\r\n            try {\r\n              this.volumeViewer.addParameterMappings(parametricMaps)\r\n            } catch (error: any) {\r\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n              message.error('Parametric Map cannot be displayed')\r\n              console.error('failed to add mappings: ', error)\r\n            }\r\n            /*\r\n           * React is not aware of the fact that mappings have been added via\r\n           * the viewer (the underlying HTML viewport element is a ref object)\r\n           * and won't show the mappings in the user interface unless an update\r\n           * is forced.\r\n           */\r\n            this.forceUpdate()\r\n          }\r\n        }).catch((error: any) => {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          message.error(\r\n            'Retrieval of metadata of Parametric Map instances failed.'\r\n          )\r\n          console.error(\r\n            'failed to retrieve metadata of Parametric Map instances: ', error\r\n          )\r\n        })\r\n      })\r\n    }).catch((error: any) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error('Search for Parametric Map instances failed.')\r\n      console.error('failed to search for Parametric Map instances: ', error)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Populate viewports of the VOLUME and LABEL image viewers.\r\n   */\r\n  populateViewports = (): void => {\r\n    console.info('populate viewports...')\r\n    this.setState({\r\n      isLoading: true,\r\n      presentationStates: []\r\n    })\r\n\r\n    if (this.volumeViewportRef.current != null) {\r\n      this.volumeViewportRef.current.innerHTML = ''\r\n      this.volumeViewer.render({ container: this.volumeViewportRef.current })\r\n    }\r\n    if (\r\n      this.labelViewportRef.current != null &&\r\n      this.labelViewer != null\r\n    ) {\r\n      this.labelViewportRef.current.innerHTML = ''\r\n      this.labelViewer.render({ container: this.labelViewportRef.current })\r\n    }\r\n\r\n    // State update will also ensure that the component is re-rendered.\r\n    this.setState({ isLoading: false })\r\n\r\n    this.setDefaultPresentationState()\r\n    this.loadPresentationStates()\r\n\r\n    this.addAnnotations()\r\n    this.addAnnotationGroups()\r\n    this.addSegmentations()\r\n    this.addParametricMaps()\r\n  }\r\n\r\n  onRoiModified = (event: CustomEventInit): void => {\r\n    // Update state to trigger rendering\r\n    this.setState(state => ({\r\n      visibleRoiUIDs: new Set(state.visibleRoiUIDs)\r\n    }))\r\n  }\r\n\r\n  onRoiDrawn = (event: CustomEventInit): void => {\r\n    const roi = event.detail.payload as dmv.roi.ROI\r\n    const selectedFinding = this.state.selectedFinding\r\n    const selectedEvaluations = this.state.selectedEvaluations\r\n    if (roi !== undefined && selectedFinding !== undefined) {\r\n      console.debug(`add ROI \"${roi.uid}\"`)\r\n      const findingItem = new dcmjs.sr.valueTypes.CodeContentItem({\r\n        name: new dcmjs.sr.coding.CodedConcept({\r\n          value: '121071',\r\n          meaning: 'Finding',\r\n          schemeDesignator: 'DCM'\r\n        }),\r\n        value: selectedFinding,\r\n        relationshipType: 'CONTAINS'\r\n      })\r\n      roi.addEvaluation(findingItem)\r\n      selectedEvaluations.forEach((evaluation: Evaluation) => {\r\n        const item = new dcmjs.sr.valueTypes.CodeContentItem({\r\n          name: evaluation.name,\r\n          value: evaluation.value,\r\n          relationshipType: 'CONTAINS'\r\n        })\r\n        roi.addEvaluation(item)\r\n      })\r\n      const key = _buildKey(selectedFinding)\r\n      const style = this.getRoiStyle(key)\r\n      this.volumeViewer.addROI(roi, style)\r\n      this.setState(state => {\r\n        const visibleRoiUIDs = state.visibleRoiUIDs\r\n        visibleRoiUIDs.add(roi.uid)\r\n        return { visibleRoiUIDs }\r\n      })\r\n    } else {\r\n      console.debug(`could not add ROI \"${roi.uid}\"`)\r\n    }\r\n  }\r\n\r\n  onRoiSelected = (event: CustomEventInit): void => {\r\n    const selectedRoi = event.detail.payload as dmv.roi.ROI\r\n    if (selectedRoi !== null) {\r\n      console.debug(`selected ROI \"${selectedRoi.uid}\"`)\r\n      this.volumeViewer.setROIStyle(selectedRoi.uid, this.selectedRoiStyle)\r\n      const key = _getRoiKey(selectedRoi)\r\n      this.volumeViewer.getAllROIs().forEach((roi) => {\r\n        if (roi.uid !== selectedRoi.uid) {\r\n          this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\r\n        }\r\n      })\r\n      this.setState({ selectedRoiUIDs: new Set([selectedRoi.uid]) })\r\n    } else {\r\n      this.setState({ selectedRoiUIDs: new Set() })\r\n    }\r\n  }\r\n\r\n  onLoadingStarted = (event: CustomEventInit): void => {\r\n    this.setState({ isLoading: true })\r\n  }\r\n\r\n  onLoadingEnded = (event: CustomEventInit): void => {\r\n    this.setState({ isLoading: false })\r\n  }\r\n\r\n  onFrameLoadingStarted = (event: CustomEventInit): void => {\r\n    const frameInfo: {\r\n      studyInstanceUID: string\r\n      seriesInstanceUID: string\r\n      sopInstanceUID: string\r\n      sopClassUID: string\r\n      frameNumber: string\r\n      channelIdentifier: string\r\n    } = event.detail.payload\r\n    const key: string = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\r\n    this.setState(state => {\r\n      state.loadingFrames.add(key)\r\n      return state\r\n    })\r\n  }\r\n\r\n  onFrameLoadingEnded = (event: CustomEventInit): void => {\r\n    const frameInfo: {\r\n      studyInstanceUID: string\r\n      seriesInstanceUID: string\r\n      sopInstanceUID: string\r\n      sopClassUID: string\r\n      frameNumber: string\r\n      channelIdentifier: string\r\n      pixelArray: Uint8Array|Uint16Array|Float32Array|null\r\n    } = event.detail.payload\r\n    const key = `${frameInfo.sopInstanceUID}-${frameInfo.frameNumber}`\r\n    this.setState(state => {\r\n      state.loadingFrames.delete(key)\r\n      let isLoading: boolean = false\r\n      if (state.loadingFrames.size > 0) {\r\n        isLoading = true\r\n      }\r\n      return {\r\n        isLoading,\r\n        loadingFrames: state.loadingFrames\r\n      }\r\n    })\r\n    if (\r\n      frameInfo.sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE &&\r\n      this.props.slide.areVolumeImagesMonochrome\r\n    ) {\r\n      const opticalPathIdentifier = frameInfo.channelIdentifier\r\n      if (\r\n        !(opticalPathIdentifier in this.state.pixelDataStatistics) &&\r\n        frameInfo.pixelArray != null\r\n      ) {\r\n        /*\r\n         * There are limits on the number of arguments Math.min and Math.max\r\n         * functions can accept. Therefore, we compute values in smaller chunks.\r\n         */\r\n        const size = 2 ** 16\r\n        const chunks = Math.ceil(frameInfo.pixelArray.length / size)\r\n        let offset = 0\r\n        const minValues: number[] = []\r\n        const maxValues: number[] = []\r\n        for (let i = 0; i < chunks; i++) {\r\n          offset = i * size\r\n          const pixels = frameInfo.pixelArray.slice(offset, offset + size)\r\n          minValues.push(Math.min(...pixels))\r\n          maxValues.push(Math.max(...pixels))\r\n        }\r\n        const min = Math.min(...minValues)\r\n        const max = Math.max(...maxValues)\r\n        this.setState(state => {\r\n          const stats = state.pixelDataStatistics\r\n          if (stats[opticalPathIdentifier] != null) {\r\n            stats[opticalPathIdentifier] = {\r\n              min: Math.min(stats[opticalPathIdentifier].min, min),\r\n              max: Math.max(stats[opticalPathIdentifier].max, max),\r\n              numFramesSampled: stats[opticalPathIdentifier].numFramesSampled + 1\r\n            }\r\n          } else {\r\n            stats[opticalPathIdentifier] = {\r\n              min: min,\r\n              max: max,\r\n              numFramesSampled: 1\r\n            }\r\n          }\r\n          if (state.selectedPresentationStateUID == null) {\r\n            const style = {\r\n              ...this.volumeViewer.getOpticalPathStyle(opticalPathIdentifier)\r\n            }\r\n            style.limitValues = [\r\n              stats[opticalPathIdentifier].min,\r\n              stats[opticalPathIdentifier].max\r\n            ]\r\n            this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, style)\r\n          }\r\n          return state\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onRoiRemoved = (event: CustomEventInit): void => {\r\n    const roi = event.detail.payload as dmv.roi.ROI\r\n    console.debug(`removed ROI \"${roi.uid}\"`)\r\n  }\r\n\r\n  componentCleanup (): void {\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_roi_drawn',\r\n      this.onRoiDrawn\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_roi_selected',\r\n      this.onRoiSelected\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_roi_removed',\r\n      this.onRoiRemoved\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_roi_modified',\r\n      this.onRoiModified\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_loading_started',\r\n      this.onLoadingStarted\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_loading_ended',\r\n      this.onLoadingEnded\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_frame_loading_started',\r\n      this.onFrameLoadingStarted\r\n    )\r\n    document.body.removeEventListener(\r\n      'dicommicroscopyviewer_frame_loading_ended',\r\n      this.onFrameLoadingEnded\r\n    )\r\n\r\n    this.volumeViewer.cleanup()\r\n    if (this.labelViewer != null) {\r\n      this.labelViewer.cleanup()\r\n    }\r\n    /*\r\n     * FIXME: React appears to not clean the content of referenced\r\n     * HTMLDivElement objects when the page is reloaded. As a consequence,\r\n     * optical paths and other display items cannot be toggled or updated after\r\n     * a manual page reload. I have tried using ref callbacks and passing the\r\n     * ref objects from the parent component via the props. Both didn't work\r\n     * either.\r\n     */\r\n  }\r\n\r\n  componentWillUnmount (): void {\r\n    window.removeEventListener('beforeunload', this.componentCleanup)\r\n  }\r\n\r\n  componentSetup (): void {\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_roi_drawn',\r\n      this.onRoiDrawn\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_roi_selected',\r\n      this.onRoiSelected\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_roi_removed',\r\n      this.onRoiRemoved\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_roi_modified',\r\n      this.onRoiModified\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_loading_started',\r\n      this.onLoadingStarted\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_loading_ended',\r\n      this.onLoadingEnded\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_frame_loading_started',\r\n      this.onFrameLoadingStarted\r\n    )\r\n    document.body.addEventListener(\r\n      'dicommicroscopyviewer_frame_loading_ended',\r\n      this.onFrameLoadingEnded\r\n    )\r\n\r\n    const onKeyUp = (\r\n      event: KeyboardEvent\r\n    ): void => {\r\n      if (event.key === 'Escape') {\r\n        if (this.state.isRoiDrawingActive) {\r\n          console.info('deactivate drawing of ROIs')\r\n          this.volumeViewer.deactivateDrawInteraction()\r\n          this.volumeViewer.activateSelectInteraction({})\r\n        } else if (this.state.isRoiModificationActive) {\r\n          console.info('deactivate modification of ROIs')\r\n          this.volumeViewer.deactivateModifyInteraction()\r\n          this.volumeViewer.activateSelectInteraction({})\r\n        } else if (this.state.isRoiTranslationActive) {\r\n          console.info('deactivate modification of ROIs')\r\n          this.volumeViewer.deactivateTranslateInteraction()\r\n          this.volumeViewer.activateSelectInteraction({})\r\n        }\r\n        this.setState({\r\n          isAnnotationModalVisible: false,\r\n          isRoiTranslationActive: false,\r\n          isRoiDrawingActive: false,\r\n          isRoiModificationActive: false\r\n        })\r\n      } else if (event.key === 'd') {\r\n        this.handleRoiDrawing()\r\n      } else if (event.key === 'm') {\r\n        this.handleRoiModification()\r\n      } else if (event.key === 't') {\r\n        this.handleRoiTranslation()\r\n      } else if (event.key === 'r') {\r\n        this.handleRoiRemoval()\r\n      } else if (event.key === 'v') {\r\n        this.handleRoiVisibilityChange()\r\n      } else if (event.key === 's') {\r\n        this.handleReportGeneration()\r\n      }\r\n    }\r\n    document.body.addEventListener(\r\n      'keyup',\r\n      onKeyUp\r\n    )\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    window.addEventListener('beforeunload', this.componentCleanup)\r\n    this.componentSetup()\r\n    this.populateViewports()\r\n\r\n    if (!this.props.slide.areVolumeImagesMonochrome) {\r\n      let hasICCProfile = false\r\n      const image = this.props.slide.volumeImages[0]\r\n      const metadataItem = image.OpticalPathSequence[0]\r\n      if (metadataItem.ICCProfile == null) {\r\n        if ('OpticalPathSequence' in image.bulkdataReferences) {\r\n          // @ts-expect-error\r\n          const bulkdataItem = image.bulkdataReferences.OpticalPathSequence[0]\r\n          if ('ICCProfile' in bulkdataItem) {\r\n            hasICCProfile = true\r\n          }\r\n        }\r\n      } else {\r\n        hasICCProfile = true\r\n      }\r\n      if (!hasICCProfile) {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        message.warning('No ICC Profile was found for color images')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a finding has been selected for annotation.\r\n   *\r\n   * @param value - Code value of the coded finding that got selected\r\n   * @param option - Option that got selected\r\n   */\r\n  handleAnnotationFindingSelection (\r\n    value: string,\r\n    option: any\r\n  ): void {\r\n    this.findingOptions.forEach(finding => {\r\n      if (finding.CodeValue === value) {\r\n        console.info(`selected finding \"${finding.CodeMeaning}\"`)\r\n        this.setState({\r\n          selectedFinding: finding,\r\n          selectedEvaluations: []\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a geometry type has been selected for\r\n   * annotation.\r\n   *\r\n   * @param value - Code value of the coded finding that got selected\r\n   * @param option - Option that got selected\r\n   */\r\n  handleAnnotationGeometryTypeSelection (value: string, option: any): void {\r\n    this.setState({ selectedGeometryType: value })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when measurements have been selected for\r\n   * annotation.\r\n   */\r\n  handleAnnotationMeasurementActivation (event: any): void {\r\n    const active: boolean = event.target.checked\r\n    if (active) {\r\n      this.setState({ selectedMarkup: 'measurement' })\r\n    } else {\r\n      this.setState({ selectedMarkup: undefined })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when an evaluation has been selected for an\r\n   * annotation.\r\n   *\r\n   * @param value - Code value of the coded evaluation that got selected\r\n   * @param option - Option that got selected\r\n   */\r\n  handleAnnotationEvaluationSelection (\r\n    value: string,\r\n    option: any\r\n  ): void {\r\n    const selectedFinding = this.state.selectedFinding\r\n    if (selectedFinding !== undefined) {\r\n      const key = _buildKey(selectedFinding)\r\n      const name = option.label\r\n      this.evaluationOptions[key].forEach(evaluation => {\r\n        if (\r\n          evaluation.name.CodeValue === name.CodeValue &&\r\n          evaluation.name.CodingSchemeDesignator === name.CodingSchemeDesignator\r\n        ) {\r\n          evaluation.values.forEach(code => {\r\n            if (code.CodeValue === value) {\r\n              const filteredEvaluations = this.state.selectedEvaluations.filter(\r\n                (item: Evaluation) => item.name !== evaluation.name\r\n              )\r\n              this.setState({\r\n                selectedEvaluations: [\r\n                  ...filteredEvaluations,\r\n                  { name: name, value: code }\r\n                ]\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when an evaluation has been cleared for an\r\n   * annotation.\r\n   */\r\n  handleAnnotationEvaluationClearance (): void {\r\n    this.setState({\r\n      selectedEvaluations: []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when annotation configuration has been completed.\r\n   */\r\n  handleAnnotationConfigurationCompletion (): void {\r\n    console.debug('complete annotation configuration')\r\n    const finding = this.state.selectedFinding\r\n    const geometryType = this.state.selectedGeometryType\r\n    const markup = this.state.selectedMarkup\r\n    if (geometryType !== undefined && finding !== undefined) {\r\n      this.volumeViewer.activateDrawInteraction({ geometryType, markup })\r\n      this.setState({\r\n        isAnnotationModalVisible: false,\r\n        isRoiDrawingActive: true\r\n      })\r\n    } else {\r\n      console.error('could not complete annotation configuration')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when annotation configuration has been cancelled.\r\n   */\r\n  handleAnnotationConfigurationCancellation (): void {\r\n    console.debug('cancel annotation configuration')\r\n    this.setState({\r\n      isAnnotationModalVisible: false,\r\n      isRoiDrawingActive: false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a report should be generated for the current\r\n   * set of annotations.\r\n   */\r\n  handleReportGeneration (): void {\r\n    console.info('save ROIs')\r\n    const rois = this.volumeViewer.getAllROIs()\r\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\r\n    const metadata = this.volumeViewer.getOpticalPathMetadata(\r\n      opticalPaths[0].identifier\r\n    )\r\n    // Metadata should be sorted such that the image with the highest\r\n    // resolution is the last item in the array.\r\n    const refImage = metadata[metadata.length - 1]\r\n    // We assume that there is only one specimen (tissue section) per\r\n    // ontainer (slide). Only the tissue section is tracked with a unique\r\n    // identifier, even if the section may be composed of different biological\r\n    // samples.\r\n    if (refImage.SpecimenDescriptionSequence.length > 1) {\r\n      console.error('more than one specimen has been described for the slide')\r\n    }\r\n    const refSpecimen = refImage.SpecimenDescriptionSequence[0]\r\n\r\n    console.debug('create Observation Context')\r\n    let observer\r\n    if (this.props.user !== undefined) {\r\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\r\n        name: this.props.user.name,\r\n        loginName: this.props.user.email\r\n      })\r\n    } else {\r\n      console.warn('no user information available')\r\n      observer = new dcmjs.sr.templates.PersonObserverIdentifyingAttributes({\r\n        name: 'ANONYMOUS'\r\n      })\r\n    }\r\n    const observationContext = new dcmjs.sr.templates.ObservationContext({\r\n      observerPersonContext: new dcmjs.sr.templates.ObserverContext({\r\n        observerType: new dcmjs.sr.coding.CodedConcept({\r\n          value: '121006',\r\n          schemeDesignator: 'DCM',\r\n          meaning: 'Person'\r\n        }),\r\n        observerIdentifyingAttributes: observer\r\n      }),\r\n      observerDeviceContext: new dcmjs.sr.templates.ObserverContext({\r\n        observerType: new dcmjs.sr.coding.CodedConcept({\r\n          value: '121007',\r\n          schemeDesignator: 'DCM',\r\n          meaning: 'Device'\r\n        }),\r\n        observerIdentifyingAttributes:\r\n          new dcmjs.sr.templates.DeviceObserverIdentifyingAttributes({\r\n            uid: this.props.app.uid,\r\n            manufacturerName: 'MGH Computational Pathology',\r\n            modelName: this.props.app.name\r\n          })\r\n      }),\r\n      subjectContext: new dcmjs.sr.templates.SubjectContext({\r\n        subjectClass: new dcmjs.sr.coding.CodedConcept({\r\n          value: '121027',\r\n          schemeDesignator: 'DCM',\r\n          meaning: 'Specimen'\r\n        }),\r\n        subjectClassSpecificContext:\r\n          new dcmjs.sr.templates.SubjectContextSpecimen({\r\n            uid: refSpecimen.SpecimenUID,\r\n            identifier: refSpecimen.SpecimenIdentifier,\r\n            containerIdentifier: refImage.ContainerIdentifier\r\n          })\r\n      })\r\n    })\r\n\r\n    console.debug('encode Imaging Measurements')\r\n    const imagingMeasurements: dcmjs.sr.valueTypes.ContainerContentItem[] = []\r\n    for (let i = 0; i < rois.length; i++) {\r\n      const roi = rois[i]\r\n      if (!this.state.visibleRoiUIDs.has(roi.uid)) {\r\n        continue\r\n      }\r\n      let findingType = roi.evaluations.find(\r\n        (item: dcmjs.sr.valueTypes.ContentItem) => {\r\n          return item.ConceptNameCodeSequence[0].CodeValue === '121071'\r\n        }\r\n      )\r\n      if (findingType === undefined) {\r\n        throw new Error(`No finding type was specified for ROI \"${roi.uid}\"`)\r\n      }\r\n      findingType = findingType as dcmjs.sr.valueTypes.CodeContentItem\r\n      const group = new dcmjs.sr.templates.PlanarROIMeasurementsAndQualitativeEvaluations({\r\n        trackingIdentifier: new dcmjs.sr.templates.TrackingIdentifier({\r\n          uid: roi.properties.trackingUID ?? roi.uid,\r\n          identifier: `ROI #${i + 1}`\r\n        }),\r\n        referencedRegion: new dcmjs.sr.contentItems.ImageRegion3D({\r\n          graphicType: roi.scoord3d.graphicType,\r\n          graphicData: roi.scoord3d.graphicData,\r\n          frameOfReferenceUID: roi.scoord3d.frameOfReferenceUID\r\n        }),\r\n        findingType: new dcmjs.sr.coding.CodedConcept({\r\n          value: findingType.ConceptCodeSequence[0].CodeValue,\r\n          schemeDesignator:\r\n            findingType.ConceptCodeSequence[0].CodingSchemeDesignator,\r\n          meaning: findingType.ConceptCodeSequence[0].CodeMeaning\r\n        }),\r\n        qualitativeEvaluations: roi.evaluations.filter(\r\n          (item: dcmjs.sr.valueTypes.ContentItem) => {\r\n            return item.ConceptNameCodeSequence[0].CodeValue !== '121071'\r\n          }\r\n        ),\r\n        measurements: roi.measurements\r\n      })\r\n      const measurements = group as dcmjs.sr.valueTypes.ContainerContentItem[]\r\n      measurements[0].ContentTemplateSequence = [{\r\n        MappingResource: 'DCMR',\r\n        TemplateIdentifier: '1410'\r\n      }]\r\n      imagingMeasurements.push(...measurements)\r\n    }\r\n\r\n    console.debug('create Measurement Report document content')\r\n    const measurementReport = new dcmjs.sr.templates.MeasurementReport({\r\n      languageOfContentItemAndDescendants: new dcmjs.sr.templates.LanguageOfContentItemAndDescendants({}),\r\n      observationContext: observationContext,\r\n      procedureReported: new dcmjs.sr.coding.CodedConcept({\r\n        value: '112703',\r\n        schemeDesignator: 'DCM',\r\n        meaning: 'Whole Slide Imaging'\r\n      }),\r\n      imagingMeasurements: imagingMeasurements\r\n    })\r\n\r\n    console.info('create Comprehensive 3D SR document')\r\n    const dataset = new dcmjs.sr.documents.Comprehensive3DSR({\r\n      content: measurementReport[0],\r\n      evidence: [refImage],\r\n      seriesInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\r\n      seriesNumber: 1,\r\n      seriesDescription: 'Annotation',\r\n      sopInstanceUID: dcmjs.data.DicomMetaDictionary.uid(),\r\n      instanceNumber: 1,\r\n      manufacturer: 'MGH Computational Pathology',\r\n      previousVersions: undefined // TODO\r\n    })\r\n\r\n    this.setState({\r\n      isReportModalVisible: true,\r\n      generatedReport: dataset as dmv.metadata.Comprehensive3DSR\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a report should be verified. The current\r\n   * list of annotations will be presented to the user together with other\r\n   * pertinent metadata about the patient, study, and specimen.\r\n   */\r\n  handleReportVerification (): void {\r\n    console.info('verfied report')\r\n\r\n    const report = this.state.generatedReport\r\n    if (report !== undefined) {\r\n      const dataset = report as unknown as dmv.metadata.Comprehensive3DSR\r\n      console.debug('create File Meta Information')\r\n      const fileMetaInformationVersionArray = new Uint8Array(2)\r\n      fileMetaInformationVersionArray[1] = 1\r\n      const fileMeta = {\r\n        // FileMetaInformationVersion\r\n        '00020001': {\r\n          Value: [fileMetaInformationVersionArray.buffer],\r\n          vr: 'OB'\r\n        },\r\n        // MediaStorageSOPClassUID\r\n        '00020002': {\r\n          Value: [dataset.SOPClassUID],\r\n          vr: 'UI'\r\n        },\r\n        // MediaStorageSOPInstanceUID\r\n        '00020003': {\r\n          Value: [dataset.SOPInstanceUID],\r\n          vr: 'UI'\r\n        },\r\n        // TransferSyntaxUID\r\n        '00020010': {\r\n          Value: ['1.2.840.10008.1.2.1'],\r\n          vr: 'UI'\r\n        },\r\n        // ImplementationClassUID\r\n        '00020012': {\r\n          Value: [this.props.app.uid],\r\n          vr: 'UI'\r\n        }\r\n      }\r\n\r\n      console.info('store Comprehensive 3D SR document')\r\n      const writer = new dcmjs.data.DicomDict(fileMeta)\r\n      writer.dict = dcmjs.data.DicomMetaDictionary.denaturalizeDataset(dataset)\r\n      const buffer = writer.write()\r\n      this.props.client.storeInstances({ datasets: [buffer] }).then(\r\n        (response: any) => message.info('Annotations were saved.')\r\n      ).catch((error: any) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        message.error('Annotations could not be saved')\r\n        console.error(error)\r\n      })\r\n    }\r\n    this.setState({\r\n      isReportModalVisible: false,\r\n      generatedReport: undefined\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when report generation has been cancelled.\r\n   */\r\n  handleReportCancellation (): void {\r\n    this.setState({\r\n      isReportModalVisible: false,\r\n      generatedReport: undefined\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when an annotation has been selected from the\r\n   * current list of annotations.\r\n   */\r\n  handleAnnotationSelection ({ roiUID }: { roiUID: string }): void {\r\n    console.log(`selected ROI ${roiUID}`)\r\n    this.setState({ selectedRoiUIDs: new Set([roiUID]) })\r\n    this.volumeViewer.getAllROIs().forEach((roi) => {\r\n      let style = {}\r\n      if (roi.uid === roiUID) {\r\n        style = this.selectedRoiStyle\r\n        this.setState(state => {\r\n          const visibleRoiUIDs = state.visibleRoiUIDs\r\n          visibleRoiUIDs.add(roi.uid)\r\n          return { visibleRoiUIDs }\r\n        })\r\n      } else {\r\n        if (this.state.visibleRoiUIDs.has(roi.uid)) {\r\n          const key = _getRoiKey(roi)\r\n          style = this.getRoiStyle(key)\r\n        }\r\n      }\r\n      this.volumeViewer.setROIStyle(roi.uid, style)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of annotation visibility, i.e., whether a given\r\n   * annotation should be either displayed or hidden by the viewer.\r\n   */\r\n  handleAnnotationVisibilityChange ({ roiUID, isVisible }: {\r\n    roiUID: string\r\n    isVisible: boolean\r\n  }): void {\r\n    if (isVisible) {\r\n      console.info(`show ROI ${roiUID}`)\r\n      const roi = this.volumeViewer.getROI(roiUID)\r\n      const key = _getRoiKey(roi)\r\n      this.volumeViewer.setROIStyle(roi.uid, this.getRoiStyle(key))\r\n      this.setState(state => {\r\n        const visibleRoiUIDs = state.visibleRoiUIDs\r\n        visibleRoiUIDs.add(roi.uid)\r\n        return { visibleRoiUIDs }\r\n      })\r\n    } else {\r\n      console.info(`hide ROI ${roiUID}`)\r\n      this.setState(state => {\r\n        const selectedRoiUIDs = state.selectedRoiUIDs\r\n        selectedRoiUIDs.delete(roiUID)\r\n        const visibleRoiUIDs = state.visibleRoiUIDs\r\n        visibleRoiUIDs.delete(roiUID)\r\n        return { visibleRoiUIDs, selectedRoiUIDs }\r\n      })\r\n      this.volumeViewer.setROIStyle(roiUID, {})\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of annotation group visibility, i.e., whether a given\r\n   * annotation group should be either displayed or hidden by the viewer.\r\n   */\r\n  handleAnnotationGroupVisibilityChange ({ annotationGroupUID, isVisible }: {\r\n    annotationGroupUID: string\r\n    isVisible: boolean\r\n  }): void {\r\n    console.log(`change visibility of annotation group ${annotationGroupUID}`)\r\n    if (isVisible) {\r\n      console.info(`show annotation group ${annotationGroupUID}`)\r\n      this.volumeViewer.showAnnotationGroup(annotationGroupUID)\r\n      this.setState(state => {\r\n        const visibleAnnotationGroupUIDs = new Set(\r\n          state.visibleAnnotationGroupUIDs\r\n        )\r\n        visibleAnnotationGroupUIDs.add(annotationGroupUID)\r\n        return { visibleAnnotationGroupUIDs }\r\n      })\r\n    } else {\r\n      console.info(`hide annotation group ${annotationGroupUID}`)\r\n      this.volumeViewer.hideAnnotationGroup(annotationGroupUID)\r\n      this.setState(state => {\r\n        const visibleAnnotationGroupUIDs = new Set(\r\n          state.visibleAnnotationGroupUIDs\r\n        )\r\n        visibleAnnotationGroupUIDs.delete(annotationGroupUID)\r\n        return { visibleAnnotationGroupUIDs }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change of annotation group style.\r\n   */\r\n  handleAnnotationGroupStyleChange ({ annotationGroupUID, styleOptions }: {\r\n    annotationGroupUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n    }\r\n  }): void {\r\n    console.log(`change style of annotation group ${annotationGroupUID}`)\r\n    this.volumeViewer.setAnnotationGroupStyle(annotationGroupUID, styleOptions)\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of segment visibility, i.e., whether a given\r\n   * segment should be either displayed or hidden by the viewer.\r\n   */\r\n  handleSegmentVisibilityChange ({ segmentUID, isVisible }: {\r\n    segmentUID: string\r\n    isVisible: boolean\r\n  }): void {\r\n    console.log(`change visibility of segment ${segmentUID}`)\r\n    if (isVisible) {\r\n      console.info(`show segment ${segmentUID}`)\r\n      this.volumeViewer.showSegment(segmentUID)\r\n      this.setState(state => {\r\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\r\n        visibleSegmentUIDs.add(segmentUID)\r\n        return { visibleSegmentUIDs }\r\n      })\r\n    } else {\r\n      console.info(`hide segment ${segmentUID}`)\r\n      this.volumeViewer.hideSegment(segmentUID)\r\n      this.setState(state => {\r\n        const visibleSegmentUIDs = new Set(state.visibleSegmentUIDs)\r\n        visibleSegmentUIDs.delete(segmentUID)\r\n        return { visibleSegmentUIDs }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change of segment style.\r\n   */\r\n  handleSegmentStyleChange ({ segmentUID, styleOptions }: {\r\n    segmentUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n    }\r\n  }): void {\r\n    console.log(`change style of segment ${segmentUID}`)\r\n    this.volumeViewer.setSegmentStyle(segmentUID, styleOptions)\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of mapping visibility, i.e., whether a given\r\n   * mapping should be either displayed or hidden by the viewer.\r\n   */\r\n  handleMappingVisibilityChange ({ mappingUID, isVisible }: {\r\n    mappingUID: string\r\n    isVisible: boolean\r\n  }): void {\r\n    console.log(`change visibility of mapping ${mappingUID}`)\r\n    if (isVisible) {\r\n      console.info(`show mapping ${mappingUID}`)\r\n      this.volumeViewer.showParameterMapping(mappingUID)\r\n      this.setState(state => {\r\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\r\n        visibleMappingUIDs.add(mappingUID)\r\n        return { visibleMappingUIDs }\r\n      })\r\n    } else {\r\n      console.info(`hide mapping ${mappingUID}`)\r\n      this.volumeViewer.hideParameterMapping(mappingUID)\r\n      this.setState(state => {\r\n        const visibleMappingUIDs = new Set(state.visibleMappingUIDs)\r\n        visibleMappingUIDs.delete(mappingUID)\r\n        return { visibleMappingUIDs }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change of mapping style.\r\n   */\r\n  handleMappingStyleChange ({ mappingUID, styleOptions }: {\r\n    mappingUID: string\r\n    styleOptions: {\r\n      opacity?: number\r\n    }\r\n  }): void {\r\n    console.log(`change style of mapping ${mappingUID}`)\r\n    this.volumeViewer.setParameterMappingStyle(mappingUID, styleOptions)\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of optical path visibility, i.e., whether a given\r\n   * optical path should be either displayed or hidden by the viewer.\r\n   */\r\n  handleOpticalPathVisibilityChange ({ opticalPathIdentifier, isVisible }: {\r\n    opticalPathIdentifier: string\r\n    isVisible: boolean\r\n  }): void {\r\n    console.log(`change visibility of optical path ${opticalPathIdentifier}`)\r\n    if (isVisible) {\r\n      console.info(`show optical path ${opticalPathIdentifier}`)\r\n      this.volumeViewer.showOpticalPath(opticalPathIdentifier)\r\n      this.setState(state => {\r\n        const visibleOpticalPathIdentifiers = new Set(\r\n          state.visibleOpticalPathIdentifiers\r\n        )\r\n        visibleOpticalPathIdentifiers.add(opticalPathIdentifier)\r\n        return { visibleOpticalPathIdentifiers }\r\n      })\r\n    } else {\r\n      console.info(`hide optical path ${opticalPathIdentifier}`)\r\n      this.volumeViewer.hideOpticalPath(opticalPathIdentifier)\r\n      this.setState(state => {\r\n        const visibleOpticalPathIdentifiers = new Set(\r\n          state.visibleOpticalPathIdentifiers\r\n        )\r\n        visibleOpticalPathIdentifiers.delete(opticalPathIdentifier)\r\n        return { visibleOpticalPathIdentifiers }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle change of optical path style.\r\n   */\r\n  handleOpticalPathStyleChange ({ opticalPathIdentifier, styleOptions }: {\r\n    opticalPathIdentifier: string\r\n    styleOptions: {\r\n      opacity?: number\r\n      color?: number[]\r\n      limitValues?: number[]\r\n    }\r\n  }): void {\r\n    console.log(`change style of optical path ${opticalPathIdentifier}`)\r\n    this.volumeViewer.setOpticalPathStyle(opticalPathIdentifier, styleOptions)\r\n  }\r\n\r\n  /**\r\n   * Handle toggling of optical path activity, i.e., whether a given\r\n   * optical path should be either added or removed from the viewport.\r\n   */\r\n  handleOpticalPathActivityChange ({ opticalPathIdentifier, isActive }: {\r\n    opticalPathIdentifier: string\r\n    isActive: boolean\r\n  }): void {\r\n    console.log(`change activity of optical path ${opticalPathIdentifier}`)\r\n    if (isActive) {\r\n      console.info(`activate optical path ${opticalPathIdentifier}`)\r\n      this.volumeViewer.activateOpticalPath(opticalPathIdentifier)\r\n      this.setState(state => {\r\n        const activeOpticalPathIdentifiers = new Set(\r\n          state.activeOpticalPathIdentifiers\r\n        )\r\n        activeOpticalPathIdentifiers.add(opticalPathIdentifier)\r\n        return { activeOpticalPathIdentifiers }\r\n      })\r\n    } else {\r\n      console.info(`deactivate optical path ${opticalPathIdentifier}`)\r\n      this.volumeViewer.deactivateOpticalPath(opticalPathIdentifier)\r\n      this.setState(state => {\r\n        const activeOpticalPathIdentifiers = new Set(\r\n          state.activeOpticalPathIdentifiers\r\n        )\r\n        activeOpticalPathIdentifiers.delete(opticalPathIdentifier)\r\n        return { activeOpticalPathIdentifiers }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set default presentation state that is either defined by metadata included\r\n   * in the DICOM Slide Microscopy instance or by the viewer.\r\n   */\r\n  setDefaultPresentationState (): void {\r\n    const visibleOpticalPathIdentifiers: Set<string> = new Set()\r\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\r\n    opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\r\n      const identifier = item.identifier\r\n      const style = this.volumeViewer.getOpticalPathDefaultStyle(identifier)\r\n      this.volumeViewer.setOpticalPathStyle(identifier, style)\r\n      this.volumeViewer.hideOpticalPath(identifier)\r\n      this.volumeViewer.deactivateOpticalPath(identifier)\r\n      if (item.isMonochromatic) {\r\n        /*\r\n         * If the image metadata contains a palette color lookup table for the\r\n         * optical path, then it will be displayed by default.\r\n         */\r\n        if (item.paletteColorLookupTableUID != null) {\r\n          visibleOpticalPathIdentifiers.add(identifier)\r\n        }\r\n      } else {\r\n        /* Color images will always be displayed by default. */\r\n        visibleOpticalPathIdentifiers.add(identifier)\r\n      }\r\n    })\r\n\r\n    /*\r\n     * If no optical paths have been selected for visualization so far, select\r\n     * first 3 optical paths and set a default value of interest (VOI) window\r\n     * (using pre-computed pixel data statistics) and a default color.\r\n     */\r\n    if (visibleOpticalPathIdentifiers.size === 0) {\r\n      const defaultColors = [\r\n        [0, 0, 255],\r\n        [0, 255, 0],\r\n        [255, 0, 0]\r\n      ]\r\n      opticalPaths.forEach((item: dmv.opticalPath.OpticalPath) => {\r\n        const identifier = item.identifier\r\n        if (item.isMonochromatic) {\r\n          const numVisible = visibleOpticalPathIdentifiers.size\r\n          if (numVisible < 3) {\r\n            const style = {\r\n              ...this.volumeViewer.getOpticalPathStyle(identifier)\r\n            }\r\n            const index = numVisible\r\n            style.color = defaultColors[index]\r\n            const stats = this.state.pixelDataStatistics[item.identifier]\r\n            if (stats != null) {\r\n              style.limitValues = [stats.min, stats.max]\r\n            }\r\n            this.volumeViewer.setOpticalPathStyle(item.identifier, style)\r\n            visibleOpticalPathIdentifiers.add(item.identifier)\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    console.info(\r\n      `selected n=${visibleOpticalPathIdentifiers.size} optical paths ` +\r\n      'for visualization'\r\n    )\r\n    visibleOpticalPathIdentifiers.forEach(identifier => {\r\n      this.volumeViewer.showOpticalPath(identifier)\r\n    })\r\n    this.setState(state => ({\r\n      activeOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers),\r\n      visibleOpticalPathIdentifiers: new Set(visibleOpticalPathIdentifiers)\r\n    }))\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a presentation state has been selected from\r\n   * the current list of available presentation states.\r\n   */\r\n  handlePresentationStateReset (): void {\r\n    this.setState({ selectedPresentationStateUID: undefined })\r\n    const urlPath = this.props.location.pathname\r\n    this.props.navigate(urlPath)\r\n    this.setDefaultPresentationState()\r\n  }\r\n\r\n  /**\r\n   * Handler that gets called when a presentation state has been selected from\r\n   * the current list of available presentation states.\r\n   */\r\n  handlePresentationStateSelection (\r\n    value?: string,\r\n    option?: any\r\n  ): void {\r\n    if (value != null) {\r\n      console.info(`select Presentation State instance \"${value}\"`)\r\n      let presentationState\r\n      this.state.presentationStates.forEach(instance => {\r\n        if (instance.SOPInstanceUID === value) {\r\n          presentationState = instance\r\n        }\r\n      })\r\n      if (presentationState != null) {\r\n        let urlPath = this.props.location.pathname\r\n        urlPath += `?state=${value}`\r\n        this.props.navigate(urlPath)\r\n        this.setPresentationState(presentationState)\r\n      } else {\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        message.error('Presentation State could not be found')\r\n        console.log(\r\n          'failed to handle section of presentation state: ' +\r\n          `could not find instance \"${value}\"`\r\n        )\r\n      }\r\n    } else {\r\n      this.handlePresentationStateReset()\r\n    }\r\n    this.setState({ selectedPresentationStateUID: value })\r\n  }\r\n\r\n  /**\r\n   * Handler that will toggle the ROI drawing tool, i.e., either activate or\r\n   * de-activate it, depending on its current state.\r\n   */\r\n  handleRoiDrawing (): void {\r\n    if (this.state.isRoiDrawingActive) {\r\n      console.info('deactivate drawing of ROIs')\r\n      this.volumeViewer.deactivateDrawInteraction()\r\n      this.volumeViewer.activateSelectInteraction({})\r\n      this.setState({\r\n        isAnnotationModalVisible: false,\r\n        isRoiTranslationActive: false,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n    } else {\r\n      console.info('activate drawing of ROIs')\r\n      this.setState({\r\n        isAnnotationModalVisible: true,\r\n        isRoiDrawingActive: true,\r\n        isRoiModificationActive: false,\r\n        isRoiTranslationActive: false\r\n      })\r\n      this.volumeViewer.deactivateSelectInteraction()\r\n      this.volumeViewer.deactivateSnapInteraction()\r\n      this.volumeViewer.deactivateTranslateInteraction()\r\n      this.volumeViewer.deactivateModifyInteraction()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that will toggle the ROI modification tool, i.e., either activate\r\n   * or de-activate it, depending on its current state.\r\n   */\r\n  handleRoiModification (): void {\r\n    console.info('toggle modification of ROIs')\r\n    if (this.volumeViewer.isModifyInteractionActive) {\r\n      this.volumeViewer.deactivateModifyInteraction()\r\n      this.volumeViewer.deactivateSnapInteraction()\r\n      this.volumeViewer.activateSelectInteraction({})\r\n      this.setState({\r\n        isRoiTranslationActive: false,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isRoiModificationActive: true,\r\n        isRoiDrawingActive: false,\r\n        isRoiTranslationActive: false\r\n      })\r\n      this.volumeViewer.deactivateDrawInteraction()\r\n      this.volumeViewer.deactivateTranslateInteraction()\r\n      this.volumeViewer.deactivateSelectInteraction()\r\n      this.volumeViewer.activateSnapInteraction({})\r\n      this.volumeViewer.activateModifyInteraction({})\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that will toggle the ROI translation tool, i.e., either activate\r\n   * or de-activate it, depending on its current state.\r\n   */\r\n  handleRoiTranslation (): void {\r\n    console.info('toggle translation of ROIs')\r\n    if (this.volumeViewer.isTranslateInteractionActive) {\r\n      this.volumeViewer.deactivateTranslateInteraction()\r\n      this.setState({\r\n        isRoiTranslationActive: false,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isRoiTranslationActive: true,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n      this.volumeViewer.deactivateModifyInteraction()\r\n      this.volumeViewer.deactivateSnapInteraction()\r\n      this.volumeViewer.deactivateDrawInteraction()\r\n      this.volumeViewer.deactivateSelectInteraction()\r\n      this.volumeViewer.activateTranslateInteraction({})\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler that will toggle the ROI removal tool, i.e., either activate\r\n   * or de-activate it, depending on its current state.\r\n   */\r\n  handleRoiRemoval (): void {\r\n    this.volumeViewer.deactivateDrawInteraction()\r\n    this.volumeViewer.deactivateSnapInteraction()\r\n    this.volumeViewer.deactivateTranslateInteraction()\r\n    this.volumeViewer.deactivateModifyInteraction()\r\n    if (this.state.selectedRoiUIDs.size > 0) {\r\n      this.state.selectedRoiUIDs.forEach(uid => {\r\n        if (uid === undefined) {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          message.warning('No annotation was selected for removal')\r\n          return\r\n        }\r\n        console.info(`remove ROI \"${uid}\"`)\r\n        this.volumeViewer.removeROI(uid)\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        message.info('Annotation was removed')\r\n      })\r\n      this.setState({\r\n        selectedRoiUIDs: new Set(),\r\n        isRoiTranslationActive: false,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n    } else {\r\n      this.state.visibleRoiUIDs.forEach(uid => {\r\n        console.info(`remove ROI \"${uid}\"`)\r\n        this.volumeViewer.removeROI(uid)\r\n      })\r\n      this.setState({\r\n        visibleRoiUIDs: new Set(),\r\n        isRoiTranslationActive: false,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false\r\n      })\r\n    }\r\n    this.volumeViewer.activateSelectInteraction({})\r\n  }\r\n\r\n  /**\r\n   * Handler that will toggle the ROI visibility tool, i.e., either activate\r\n   * or de-activate it, depending on its current state.\r\n   */\r\n  handleRoiVisibilityChange (): void {\r\n    console.info('toggle visibility of ROIs')\r\n    if (this.volumeViewer.areROIsVisible) {\r\n      this.volumeViewer.deactivateDrawInteraction()\r\n      this.volumeViewer.deactivateSnapInteraction()\r\n      this.volumeViewer.deactivateTranslateInteraction()\r\n      this.volumeViewer.deactivateSelectInteraction()\r\n      this.volumeViewer.deactivateModifyInteraction()\r\n      this.volumeViewer.hideROIs()\r\n      this.setState({\r\n        areRoisHidden: true,\r\n        isRoiDrawingActive: false,\r\n        isRoiModificationActive: false,\r\n        isRoiTranslationActive: false\r\n      })\r\n    } else {\r\n      this.volumeViewer.showROIs()\r\n      this.volumeViewer.activateSelectInteraction({})\r\n      this.state.selectedRoiUIDs.forEach(uid => {\r\n        if (uid !== undefined) {\r\n          this.volumeViewer.setROIStyle(uid, this.selectedRoiStyle)\r\n        }\r\n      })\r\n      this.setState({ areRoisHidden: false })\r\n    }\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const rois: dmv.roi.ROI[] = []\r\n    const segments: dmv.segment.Segment[] = []\r\n    const mappings: dmv.mapping.ParameterMapping[] = []\r\n    const annotationGroups: dmv.annotation.AnnotationGroup[] = []\r\n    rois.push(...this.volumeViewer.getAllROIs())\r\n    segments.push(...this.volumeViewer.getAllSegments())\r\n    mappings.push(...this.volumeViewer.getAllParameterMappings())\r\n    annotationGroups.push(...this.volumeViewer.getAllAnnotationGroups())\r\n\r\n    const openSubMenuItems = [\r\n      'specimens', 'optical-paths', 'annotations', 'presentation-states'\r\n    ]\r\n\r\n    let report: React.ReactNode\r\n    const dataset = this.state.generatedReport\r\n    if (dataset !== undefined) {\r\n      report = <Report dataset={dataset} />\r\n    }\r\n\r\n    let annotationMenuItems: React.ReactNode\r\n    if (rois.length > 0) {\r\n      annotationMenuItems = (\r\n        <AnnotationList\r\n          rois={rois}\r\n          selectedRoiUIDs={this.state.selectedRoiUIDs}\r\n          visibleRoiUIDs={this.state.visibleRoiUIDs}\r\n          onSelection={this.handleAnnotationSelection}\r\n          onVisibilityChange={this.handleAnnotationVisibilityChange}\r\n        />\r\n      )\r\n    }\r\n\r\n    const findingOptions = this.findingOptions.map(finding => {\r\n      return (\r\n        <Select.Option\r\n          key={finding.CodeValue}\r\n          value={finding.CodeValue}\r\n        >\r\n          {finding.CodeMeaning}\r\n        </Select.Option>\r\n      )\r\n    })\r\n\r\n    const geometryTypeOptionsMapping: { [key: string]: React.ReactNode } = {\r\n      point: <Select.Option key='point' value='point'>Point</Select.Option>,\r\n      circle: <Select.Option key='circle' value='circle'>Circle</Select.Option>,\r\n      box: <Select.Option key='box' value='box'>Box</Select.Option>,\r\n      polygon: <Select.Option key='polygon' value='polygon'>Polygon</Select.Option>,\r\n      line: <Select.Option key='line' value='line'>Line</Select.Option>,\r\n      freehandpolygon: (\r\n        <Select.Option key='freehandpolygon' value='freehandpolygon'>\r\n          Polygon (freehand)\r\n        </Select.Option>\r\n      ),\r\n      freehandline: (\r\n        <Select.Option key='freehandline' value='freehandline'>\r\n          Line (freehand)\r\n        </Select.Option>\r\n      )\r\n    }\r\n\r\n    const selections: React.ReactNode[] = [\r\n      (\r\n        <Select\r\n          style={{ minWidth: 130 }}\r\n          onSelect={this.handleAnnotationFindingSelection}\r\n          key='annotation-finding'\r\n          defaultActiveFirstOption\r\n        >\r\n          {findingOptions}\r\n        </Select>\r\n      )\r\n    ]\r\n\r\n    const selectedFinding = this.state.selectedFinding\r\n    if (selectedFinding !== undefined) {\r\n      const key = _buildKey(selectedFinding)\r\n      this.evaluationOptions[key].forEach(evaluation => {\r\n        const evaluationOptions = evaluation.values.map(code => {\r\n          return (\r\n            <Select.Option\r\n              key={code.CodeValue}\r\n              value={code.CodeValue}\r\n              label={evaluation.name}\r\n            >\r\n              {code.CodeMeaning}\r\n            </Select.Option>\r\n          )\r\n        })\r\n        selections.push(\r\n          <>\r\n            {evaluation.name.CodeMeaning}\r\n            <Select\r\n              style={{ minWidth: 130 }}\r\n              onSelect={this.handleAnnotationEvaluationSelection}\r\n              allowClear\r\n              onClear={this.handleAnnotationEvaluationClearance}\r\n              defaultActiveFirstOption={false}\r\n            >\r\n              {evaluationOptions}\r\n            </Select>\r\n          </>\r\n        )\r\n      })\r\n      const geometryTypeOptions = this.geometryTypeOptions[key].map(name => {\r\n        return geometryTypeOptionsMapping[name]\r\n      })\r\n      selections.push(\r\n        <>\r\n          ROI geometry type\r\n          <Select\r\n            style={{ minWidth: 130 }}\r\n            onSelect={this.handleAnnotationGeometryTypeSelection}\r\n            key='annotation-geometry-type'\r\n          >\r\n            {geometryTypeOptions}\r\n          </Select>\r\n        </>\r\n      )\r\n      selections.push(\r\n        <Checkbox\r\n          onChange={this.handleAnnotationMeasurementActivation}\r\n          key='annotation-measurement'\r\n        >\r\n          measure\r\n        </Checkbox>\r\n      )\r\n    }\r\n\r\n    const specimenMenu = (\r\n      <Menu.SubMenu key='specimens' title='Specimens'>\r\n        <SpecimenList\r\n          metadata={this.props.slide.volumeImages[0]}\r\n          showstain={false}\r\n        />\r\n      </Menu.SubMenu>\r\n    )\r\n\r\n    const equipmentMenu = (\r\n      <Menu.SubMenu key='equipment' title='Equipment'>\r\n        <Equipment metadata={this.props.slide.volumeImages[0]} />\r\n      </Menu.SubMenu>\r\n    )\r\n\r\n    const opticalPaths = this.volumeViewer.getAllOpticalPaths()\r\n    opticalPaths.sort((a, b) => {\r\n      if (a.identifier < b.identifier) {\r\n        return -1\r\n      } else if (a.identifier > b.identifier) {\r\n        return 1\r\n      }\r\n      return 0\r\n    })\r\n    const opticalPathStyles: {\r\n      [identifier: string]: {\r\n        opacity: number\r\n        color?: number[]\r\n        limitValues?: number[]\r\n        paletteColorLookupTable?: dmv.color.PaletteColorLookupTable\r\n      }\r\n    } = {}\r\n    const opticalPathMetadata: {\r\n      [identifier: string]: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n    } = {}\r\n    opticalPaths.forEach(opticalPath => {\r\n      const identifier = opticalPath.identifier\r\n      const metadata = this.volumeViewer.getOpticalPathMetadata(identifier)\r\n      opticalPathMetadata[identifier] = metadata\r\n      const style = {\r\n        ...this.volumeViewer.getOpticalPathStyle(identifier)\r\n      }\r\n      opticalPathStyles[identifier] = style\r\n    })\r\n    const opticalPathMenu = (\r\n      <Menu.SubMenu key='optical-paths' title='Optical Paths'>\r\n        <OpticalPathList\r\n          metadata={opticalPathMetadata}\r\n          opticalPaths={opticalPaths}\r\n          defaultOpticalPathStyles={opticalPathStyles}\r\n          visibleOpticalPathIdentifiers={this.state.visibleOpticalPathIdentifiers}\r\n          activeOpticalPathIdentifiers={this.state.activeOpticalPathIdentifiers}\r\n          onOpticalPathVisibilityChange={this.handleOpticalPathVisibilityChange}\r\n          onOpticalPathStyleChange={this.handleOpticalPathStyleChange}\r\n          onOpticalPathActivityChange={this.handleOpticalPathActivityChange}\r\n          selectedPresentationStateUID={this.state.selectedPresentationStateUID}\r\n        />\r\n      </Menu.SubMenu>\r\n    )\r\n\r\n    let presentationStateMenu\r\n    if (this.state.presentationStates.length > 0) {\r\n      const presentationStateOptions = []\r\n      this.state.presentationStates.forEach(instance => {\r\n        presentationStateOptions.push(\r\n          <Select.Option\r\n            key={instance.SOPInstanceUID}\r\n            value={instance.SOPInstanceUID}\r\n            dropdownMatchSelectWidth={false}\r\n            size='small'\r\n          >\r\n            {instance.ContentDescription}\r\n          </Select.Option>\r\n        )\r\n      })\r\n      presentationStateOptions.push(\r\n        <Select.Option\r\n          key='default-presentation-state'\r\n          value={null}\r\n          dropdownMatchSelectWidth={false}\r\n          size='small'\r\n        >\r\n          {}\r\n        </Select.Option>\r\n      )\r\n      presentationStateMenu = (\r\n        <Menu.SubMenu key='presentation-states' title='Presentation States'>\r\n          <Space align='center' size={20} style={{ padding: '14px' }}>\r\n            <Select\r\n              style={{ minWidth: 200, maxWidth: 200 }}\r\n              onSelect={this.handlePresentationStateSelection}\r\n              key='presentation-states'\r\n              defaultValue={this.props.selectedPresentationStateUID}\r\n              value={this.state.selectedPresentationStateUID}\r\n            >\r\n              {presentationStateOptions}\r\n            </Select>\r\n            <Tooltip title='Reset'>\r\n              <Btn\r\n                icon={<UndoOutlined />}\r\n                type='primary'\r\n                onClick={this.handlePresentationStateReset}\r\n              />\r\n            </Tooltip>\r\n          </Space>\r\n        </Menu.SubMenu>\r\n      )\r\n    }\r\n\r\n    let segmentationMenu\r\n    if (segments.length > 0) {\r\n      const defaultSegmentStyles: {\r\n        [segmentUID: string]: {\r\n          opacity: number\r\n        }\r\n      } = {}\r\n      const segmentMetadata: {\r\n        [segmentUID: string]: dmv.metadata.Segmentation[]\r\n      } = {}\r\n      const segments = this.volumeViewer.getAllSegments()\r\n      segments.forEach(segment => {\r\n        defaultSegmentStyles[segment.uid] = this.volumeViewer.getSegmentStyle(\r\n          segment.uid\r\n        )\r\n        segmentMetadata[segment.uid] = this.volumeViewer.getSegmentMetadata(\r\n          segment.uid\r\n        )\r\n      })\r\n      segmentationMenu = (\r\n        <Menu.SubMenu key='segmentations' title='Segmentations'>\r\n          <SegmentList\r\n            segments={segments}\r\n            metadata={segmentMetadata}\r\n            defaultSegmentStyles={defaultSegmentStyles}\r\n            visibleSegmentUIDs={this.state.visibleSegmentUIDs}\r\n            onSegmentVisibilityChange={this.handleSegmentVisibilityChange}\r\n            onSegmentStyleChange={this.handleSegmentStyleChange}\r\n          />\r\n        </Menu.SubMenu>\r\n      )\r\n      openSubMenuItems.push('segmentations')\r\n    }\r\n\r\n    let parametricMapMenu\r\n    if (mappings.length > 0) {\r\n      const defaultMappingStyles: {\r\n        [mappingUID: string]: {\r\n          opacity: number\r\n        }\r\n      } = {}\r\n      const mappingMetadata: {\r\n        [mappingUID: string]: dmv.metadata.ParametricMap[]\r\n      } = {}\r\n      mappings.forEach(mapping => {\r\n        defaultMappingStyles[mapping.uid] = this.volumeViewer.getParameterMappingStyle(\r\n          mapping.uid\r\n        )\r\n        mappingMetadata[mapping.uid] = this.volumeViewer.getParameterMappingMetadata(\r\n          mapping.uid\r\n        )\r\n      })\r\n      parametricMapMenu = (\r\n        <Menu.SubMenu key='parmetric-maps' title='Parametric Maps'>\r\n          <MappingList\r\n            mappings={mappings}\r\n            metadata={mappingMetadata}\r\n            defaultMappingStyles={defaultMappingStyles}\r\n            visibleMappingUIDs={this.state.visibleMappingUIDs}\r\n            onMappingVisibilityChange={this.handleMappingVisibilityChange}\r\n            onMappingStyleChange={this.handleMappingStyleChange}\r\n          />\r\n        </Menu.SubMenu>\r\n      )\r\n      openSubMenuItems.push('parametric-maps')\r\n    }\r\n\r\n    let annotationGroupMenu\r\n    if (annotationGroups.length > 0) {\r\n      const defaultAnnotationGroupStyles: {\r\n        [annotationGroupUID: string]: {\r\n          opacity: number\r\n        }\r\n      } = {}\r\n      const annotationGroupMetadata: {\r\n        [annotationGroupUID: string]: dmv.metadata.MicroscopyBulkSimpleAnnotations\r\n      } = {}\r\n      const annotationGroups = this.volumeViewer.getAllAnnotationGroups()\r\n      annotationGroups.forEach(annotationGroup => {\r\n        defaultAnnotationGroupStyles[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupStyle(\r\n          annotationGroup.uid\r\n        )\r\n        annotationGroupMetadata[annotationGroup.uid] = this.volumeViewer.getAnnotationGroupMetadata(\r\n          annotationGroup.uid\r\n        )\r\n      })\r\n      annotationGroupMenu = (\r\n        <Menu.SubMenu key='annotation-groups' title='Annotation Groups'>\r\n          <AnnotationGroupList\r\n            annotationGroups={annotationGroups}\r\n            metadata={annotationGroupMetadata}\r\n            defaultAnnotationGroupStyles={defaultAnnotationGroupStyles}\r\n            visibleAnnotationGroupUIDs={this.state.visibleAnnotationGroupUIDs}\r\n            onAnnotationGroupVisibilityChange={this.handleAnnotationGroupVisibilityChange}\r\n            onAnnotationGroupStyleChange={this.handleAnnotationGroupStyleChange}\r\n          />\r\n        </Menu.SubMenu>\r\n      )\r\n      openSubMenuItems.push('annotationGroups')\r\n    }\r\n\r\n    let toolbar\r\n    let toolbarHeight = '0px'\r\n    if (this.props.enableAnnotationTools) {\r\n      toolbar = (\r\n        <Row>\r\n          <Button\r\n            tooltip='Draw ROI [d]'\r\n            icon={FaDrawPolygon}\r\n            onClick={this.handleRoiDrawing}\r\n            isSelected={this.state.isRoiDrawingActive}\r\n          />\r\n          <Button\r\n            tooltip='Modify ROIs [m]'\r\n            icon={FaHandPointer}\r\n            onClick={this.handleRoiModification}\r\n            isSelected={this.state.isRoiModificationActive}\r\n          />\r\n          <Button\r\n            tooltip='Translate ROIs [t]'\r\n            icon={FaHandPaper}\r\n            onClick={this.handleRoiTranslation}\r\n            isSelected={this.state.isRoiTranslationActive}\r\n          />\r\n          <Button\r\n            tooltip='Remove selected ROI [r]'\r\n            onClick={this.handleRoiRemoval}\r\n            icon={FaTrash}\r\n          />\r\n          <Button\r\n            tooltip='Show/Hide ROIs [v]'\r\n            icon={this.state.areRoisHidden ? FaEye : FaEyeSlash}\r\n            onClick={this.handleRoiVisibilityChange}\r\n            isSelected={this.state.areRoisHidden}\r\n          />\r\n          <Button\r\n            tooltip='Save ROIs [s]'\r\n            icon={FaSave}\r\n            onClick={this.handleReportGeneration}\r\n          />\r\n        </Row>\r\n      )\r\n      toolbarHeight = '50px'\r\n    }\r\n\r\n    let cursor = 'default'\r\n    if (this.state.isLoading) {\r\n      cursor = 'progress'\r\n    }\r\n\r\n    return (\r\n      <Layout style={{ height: '100%' }} hasSider>\r\n        <Layout.Content style={{ height: '100%' }}>\r\n          {toolbar}\r\n\r\n          <div\r\n            style={{\r\n              height: `calc(100% - ${toolbarHeight})`,\r\n              overflow: 'hidden',\r\n              cursor: cursor\r\n            }}\r\n            ref={this.volumeViewportRef}\r\n          />\r\n\r\n          <Modal\r\n            visible={this.state.isAnnotationModalVisible}\r\n            title='Configure annotations'\r\n            onOk={this.handleAnnotationConfigurationCompletion}\r\n            onCancel={this.handleAnnotationConfigurationCancellation}\r\n            okText='Select'\r\n          >\r\n            <Space align='start' direction='vertical'>\r\n              {selections}\r\n            </Space>\r\n          </Modal>\r\n\r\n          <Modal\r\n            visible={this.state.isReportModalVisible}\r\n            title='Verify and save report'\r\n            onOk={this.handleReportVerification}\r\n            onCancel={this.handleReportCancellation}\r\n            okText='Save'\r\n          >\r\n            {report}\r\n          </Modal>\r\n        </Layout.Content>\r\n\r\n        <Layout.Sider\r\n          width={300}\r\n          reverseArrow\r\n          style={{\r\n            borderLeft: 'solid',\r\n            borderLeftWidth: 0.25,\r\n            overflow: 'hidden',\r\n            background: 'none'\r\n          }}\r\n        >\r\n          <Menu\r\n            mode='inline'\r\n            defaultOpenKeys={openSubMenuItems}\r\n            style={{ height: '100%' }}\r\n            inlineIndent={14}\r\n            forceSubMenuRender\r\n          >\r\n            <Menu.SubMenu key='label' title='Slide label'>\r\n              <Menu.Item style={{ height: '100%' }}>\r\n                <div\r\n                  style={{ height: '220px' }}\r\n                  ref={this.labelViewportRef}\r\n                />\r\n              </Menu.Item>\r\n            </Menu.SubMenu>\r\n            {specimenMenu}\r\n            {equipmentMenu}\r\n            {opticalPathMenu}\r\n            {presentationStateMenu}\r\n            <Menu.SubMenu key='annotations' title='Annotations'>\r\n              {annotationMenuItems}\r\n            </Menu.SubMenu>\r\n            {annotationGroupMenu}\r\n            {segmentationMenu}\r\n            {parametricMapMenu}\r\n          </Menu>\r\n        </Layout.Sider>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SlideViewer)\r\n","import * as dmv from 'dicom-microscopy-viewer'\r\n\r\nenum ImageFlavors {\r\n  VOLUME = 'VOLUME',\r\n  LABEL = 'LABEL',\r\n  OVERVIEW = 'OVERVIEW',\r\n  THUMBNAIL = 'THUMBNAIL'\r\n}\r\n\r\nconst hasImageFlavor = (\r\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\r\n  imageFlavor: ImageFlavors\r\n): boolean => {\r\n  return image.ImageType[2] === imageFlavor\r\n}\r\n\r\nconst areSameAcquisition = (\r\n  image: dmv.metadata.VLWholeSlideMicroscopyImage,\r\n  refImage: dmv.metadata.VLWholeSlideMicroscopyImage\r\n): boolean => {\r\n  if (image.AcquisitionUID != null) {\r\n    return image.AcquisitionUID === refImage.AcquisitionUID\r\n  }\r\n  return false\r\n}\r\n\r\ninterface SlideImageCollection {\r\n  frameOfReferenceUID: string\r\n  containerIdentifier: string\r\n  volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n}\r\n\r\ninterface SlideOptions {\r\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  description?: string\r\n}\r\n\r\n/**\r\n * Slide - collection of images with the same Frame of Reference UID and\r\n * Container Identifier.\r\n */\r\nclass Slide {\r\n  readonly description: string\r\n  readonly frameOfReferenceUID: string\r\n  readonly containerIdentifier: string\r\n  readonly seriesInstanceUIDs: string[]\r\n  readonly opticalPathIdentifiers: string[]\r\n  readonly areVolumeImagesMonochrome: boolean\r\n  readonly volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  readonly labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n  readonly overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n\r\n  /**\r\n   * @param options\r\n   * @param options.images - Metadata of images associated with the slide\r\n   * @param options.description - Description of the slide\r\n   */\r\n  constructor (\r\n    options: SlideOptions\r\n  ) {\r\n    if (options.images.length === 0) {\r\n      throw new Error('Value of option \"images\" have been non-zero length.')\r\n    }\r\n\r\n    const seriesInstanceUIDs = new Set([] as string[])\r\n    const opticalPathIdentifiers = new Set([] as string[])\r\n    const containerIdentifiers = new Set([] as string[])\r\n    const frameOfReferenceUIDs = {\r\n      VOLUME: new Set([] as string[]),\r\n      LABEL: new Set([] as string[]),\r\n      OVERVIEW: new Set([] as string[])\r\n    }\r\n    const volumeImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\r\n    const labelImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\r\n    const overviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\r\n    options.images.forEach((image) => {\r\n      containerIdentifiers.add(image.ContainerIdentifier)\r\n      seriesInstanceUIDs.add(image.SeriesInstanceUID)\r\n      image.OpticalPathSequence.forEach(item => {\r\n        opticalPathIdentifiers.add(item.OpticalPathIdentifier)\r\n      })\r\n      if (hasImageFlavor(image, ImageFlavors.VOLUME)) {\r\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\r\n        volumeImages.push(image)\r\n      } else if (hasImageFlavor(image, ImageFlavors.THUMBNAIL)) {\r\n        frameOfReferenceUIDs.VOLUME.add(image.FrameOfReferenceUID)\r\n        volumeImages.push(image)\r\n      } else if (hasImageFlavor(image, ImageFlavors.LABEL)) {\r\n        frameOfReferenceUIDs.LABEL.add(image.FrameOfReferenceUID)\r\n        labelImages.push(image)\r\n      } else if (hasImageFlavor(image, ImageFlavors.OVERVIEW)) {\r\n        frameOfReferenceUIDs.OVERVIEW.add(image.FrameOfReferenceUID)\r\n        overviewImages.push(image)\r\n      }\r\n    })\r\n    if (volumeImages.length === 0) {\r\n      throw new Error('At least one volume image must be provided for a slide.')\r\n    } else {\r\n      const samplesPerPixel = new Set([] as number[])\r\n      volumeImages.forEach((image) => {\r\n        samplesPerPixel.add(image.SamplesPerPixel)\r\n      })\r\n      if (samplesPerPixel.size > 1) {\r\n        throw new Error(\r\n          'All volume images of a slide must have the same number of ' +\r\n          'Samples per Pixel.'\r\n        )\r\n      }\r\n    }\r\n    this.volumeImages = volumeImages\r\n    this.labelImages = labelImages\r\n    this.overviewImages = overviewImages\r\n\r\n    this.seriesInstanceUIDs = [...seriesInstanceUIDs]\r\n    this.opticalPathIdentifiers = [...opticalPathIdentifiers]\r\n    if (containerIdentifiers.size !== 1) {\r\n      throw new Error(\r\n        'All images of a slide must have the same Container Identifier.'\r\n      )\r\n    }\r\n    this.containerIdentifier = [...containerIdentifiers][0]\r\n    if (frameOfReferenceUIDs.VOLUME.size !== 1) {\r\n      throw new Error(\r\n        'All VOLUME images of a slide must have ' +\r\n        'the same Frame of Reference UID.'\r\n      )\r\n    }\r\n    this.frameOfReferenceUID = [...frameOfReferenceUIDs.VOLUME][0]\r\n\r\n    this.areVolumeImagesMonochrome = (\r\n      this.volumeImages[0].SamplesPerPixel === 1 &&\r\n      this.volumeImages[0].PhotometricInterpretation === 'MONOCHROME2'\r\n    )\r\n\r\n    this.description = (\r\n      options.description !== undefined ? options.description : ''\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Create slides.\r\n *\r\n * @param imagesPerSeries - Image instances grouped per series\r\n * @param referenceSeriesInstanceUID - Unique identifier of the series that serves as a reference for the slide\r\n * @returns Slides\r\n */\r\nconst createSlides = (\r\n  images: dmv.metadata.VLWholeSlideMicroscopyImage[][]\r\n): Slide[] => {\r\n  const slideMetadata: SlideImageCollection[] = []\r\n  images.forEach((series) => {\r\n    if (series.length > 0) {\r\n      const volumeImages = series.filter((image) => {\r\n        return (\r\n          hasImageFlavor(image, ImageFlavors.VOLUME) ||\r\n          hasImageFlavor(image, ImageFlavors.THUMBNAIL)\r\n        )\r\n      })\r\n      if (volumeImages.length > 0) {\r\n        const refImage = volumeImages[0]\r\n        const filteredVolumeImages = volumeImages.filter((image) => {\r\n          return refImage.SamplesPerPixel === image.SamplesPerPixel\r\n        })\r\n        const slideMetadataIndex = slideMetadata.findIndex((slide) => {\r\n          return _doesImageBelongToSlide(slide, refImage)\r\n        })\r\n\r\n        const labelImages = series.filter((image) => {\r\n          return hasImageFlavor(image, ImageFlavors.LABEL)\r\n        })\r\n        let filteredLabelImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n        if (labelImages.length > 1) {\r\n          filteredLabelImages = labelImages.filter((image) => {\r\n            return areSameAcquisition(image, refImage)\r\n          })\r\n        } else {\r\n          filteredLabelImages = labelImages\r\n        }\r\n        const overviewImages = series.filter((image) => {\r\n          return hasImageFlavor(image, ImageFlavors.OVERVIEW)\r\n        })\r\n        let filteredOverviewImages: dmv.metadata.VLWholeSlideMicroscopyImage[]\r\n        if (overviewImages.length > 1) {\r\n          filteredOverviewImages = overviewImages.filter((image) => {\r\n            return areSameAcquisition(image, refImage)\r\n          })\r\n        } else {\r\n          filteredOverviewImages = overviewImages\r\n        }\r\n\r\n        if (slideMetadataIndex === -1) {\r\n          const slideMetadataItem: SlideImageCollection = {\r\n            frameOfReferenceUID: refImage.FrameOfReferenceUID,\r\n            containerIdentifier: refImage.ContainerIdentifier,\r\n            volumeImages: filteredVolumeImages,\r\n            labelImages: filteredLabelImages,\r\n            overviewImages: filteredOverviewImages\r\n          }\r\n          slideMetadata.push(slideMetadataItem)\r\n        } else {\r\n          const slideMetadataItem = slideMetadata[slideMetadataIndex]\r\n          slideMetadataItem.volumeImages.push(...filteredVolumeImages)\r\n          slideMetadataItem.labelImages.push(...filteredLabelImages)\r\n          slideMetadataItem.overviewImages.push(...filteredOverviewImages)\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  let slides: Slide[] = slideMetadata.map((item) => {\r\n    return new Slide({\r\n      images: [\r\n        ...item.volumeImages,\r\n        ...item.labelImages,\r\n        ...item.overviewImages\r\n      ]\r\n    })\r\n  })\r\n  slides = slides.sort((a, b) => {\r\n    const imgA = a.volumeImages[0]\r\n    const imgB = b.volumeImages[0]\r\n    if (imgA.ContainerIdentifier != null && imgB.ContainerIdentifier != null) {\r\n      return Number(imgA.ContainerIdentifier) - Number(imgB.ContainerIdentifier)\r\n    } else {\r\n      return 0\r\n    }\r\n  })\r\n\r\n  return slides\r\n}\r\n\r\n/**\r\n * Check if instance belongs to the slide.\r\n *\r\n * Compares values of Frame of Reference UID and Container Identifier attributes.\r\n *\r\n * @param slide - Slide metadata object\r\n * @param image - Metadata of VOLUME, LABEL or OVERVIEW image instance\r\n */\r\nfunction _doesImageBelongToSlide (\r\n  slide: SlideImageCollection,\r\n  image: dmv.metadata.VLWholeSlideMicroscopyImage\r\n): boolean {\r\n  if (\r\n    slide.frameOfReferenceUID === image.FrameOfReferenceUID &&\r\n    slide.containerIdentifier === image.ContainerIdentifier\r\n  ) {\r\n    return true\r\n  }\r\n  return false\r\n}\r\n\r\nexport { Slide, createSlides }\r\n","import React from 'react'\r\nimport {\r\n  Routes,\r\n  Route,\r\n  useLocation,\r\n  useParams\r\n} from 'react-router-dom'\r\nimport {\r\n  Layout,\r\n  message,\r\n  Menu\r\n} from 'antd'\r\n\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport { AnnotationSettings } from '../AppConfig'\r\nimport ClinicalTrial from './ClinicalTrial'\r\nimport DicomWebManager from '../DicomWebManager'\r\nimport Patient from './Patient'\r\nimport Study from './Study'\r\nimport SlideList from './SlideList'\r\nimport SlideViewer from './SlideViewer'\r\n\r\nimport { User } from '../auth'\r\nimport { Slide, createSlides } from '../data/slides'\r\nimport { SOPClassUIDs } from '../data/uids'\r\nimport { RouteComponentProps, withRouter } from '../utils/router'\r\n\r\nfunction ParametrizedSlideViewer ({\r\n  client,\r\n  slides,\r\n  user,\r\n  app,\r\n  preload,\r\n  enableAnnotationTools,\r\n  annotations\r\n}: {\r\n  client: DicomWebManager\r\n  slides: Slide[]\r\n  user?: User\r\n  app: {\r\n    name: string\r\n    version: string\r\n    uid: string\r\n    organization?: string\r\n  }\r\n  preload: boolean\r\n  enableAnnotationTools: boolean\r\n  annotations: AnnotationSettings[]\r\n}): JSX.Element | null {\r\n  const { studyInstanceUID, seriesInstanceUID } = useParams()\r\n  const location = useLocation()\r\n\r\n  const selectedSlide = slides.find((slide: Slide) => {\r\n    return slide.seriesInstanceUIDs.find((uid: string) => {\r\n      return uid === seriesInstanceUID\r\n    })\r\n  })\r\n  const searchParams = new URLSearchParams(location.search)\r\n  let presentationStateUID: string|null|undefined = searchParams.get('state')\r\n  if (presentationStateUID === null) {\r\n    presentationStateUID = undefined\r\n  }\r\n  let viewer = null\r\n  if (selectedSlide != null) {\r\n    viewer = (\r\n      <SlideViewer\r\n        client={client}\r\n        studyInstanceUID={studyInstanceUID}\r\n        seriesInstanceUID={seriesInstanceUID}\r\n        selectedPresentationStateUID={presentationStateUID}\r\n        slide={selectedSlide}\r\n        preload={preload}\r\n        annotations={annotations}\r\n        enableAnnotationTools={enableAnnotationTools}\r\n        app={app}\r\n        user={user}\r\n      />\r\n    )\r\n  }\r\n  return viewer\r\n}\r\n\r\ninterface ViewerProps extends RouteComponentProps {\r\n  client: DicomWebManager\r\n  studyInstanceUID: string\r\n  app: {\r\n    name: string\r\n    version: string\r\n    uid: string\r\n    organization?: string\r\n  }\r\n  annotations: AnnotationSettings[]\r\n  enableAnnotationTools: boolean\r\n  preload: boolean\r\n  user?: {\r\n    name: string\r\n    email: string\r\n  }\r\n}\r\n\r\ninterface ViewerState {\r\n  slides: Slide[]\r\n  isLoading: boolean\r\n}\r\n\r\nclass Viewer extends React.Component<ViewerProps, ViewerState> {\r\n  state = {\r\n    slides: [],\r\n    isLoading: false\r\n  }\r\n\r\n  constructor (props: ViewerProps) {\r\n    super(props)\r\n    this.handleSeriesSelection = this.handleSeriesSelection.bind(this)\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    this.setState({ isLoading: true })\r\n    this.fetchImageMetadata().then(\r\n      (metadata: dmv.metadata.VLWholeSlideMicroscopyImage[][]) => {\r\n        this.setState({\r\n          slides: createSlides(metadata),\r\n          isLoading: false\r\n        })\r\n      }\r\n    ).catch((error) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error(\r\n        'An error occured. ' +\r\n          'Image metadata could not be retrieved or decoded.'\r\n      )\r\n      console.error(error)\r\n      this.setState({ isLoading: false })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Fetch metadata for VL Whole Slide Microscopy Image instances of the study.\r\n   *\r\n   * @returns Metadata of image instances of the study grouped per series\r\n   */\r\n  async fetchImageMetadata (): Promise<dmv.metadata.VLWholeSlideMicroscopyImage[][]> {\r\n    const images: dmv.metadata.VLWholeSlideMicroscopyImage[][] = []\r\n    const studyInstanceUID = this.props.studyInstanceUID\r\n    console.info(`search for series of study \"${studyInstanceUID}\"...`)\r\n    const matchedSeries = await this.props.client.searchForSeries({\r\n      queryParams: {\r\n        Modality: 'SM',\r\n        StudyInstanceUID: studyInstanceUID\r\n      }\r\n    })\r\n\r\n    await Promise.all(matchedSeries.map(async (s) => {\r\n      const { dataset } = dmv.metadata.formatMetadata(s)\r\n      const loadingSeries = dataset as dmv.metadata.Series\r\n      console.info(\r\n        `retrieve metadata of series \"${loadingSeries.SeriesInstanceUID}\"`\r\n      )\r\n      const retrievedMetadata = await this.props.client.retrieveSeriesMetadata({\r\n        studyInstanceUID: this.props.studyInstanceUID,\r\n        seriesInstanceUID: loadingSeries.SeriesInstanceUID\r\n      })\r\n\r\n      const seriesImages: dmv.metadata.VLWholeSlideMicroscopyImage[] = []\r\n      retrievedMetadata.forEach((item, index) => {\r\n        if (item['00080016'] != null) {\r\n          const values = item['00080016'].Value\r\n          if (values != null) {\r\n            const sopClassUID = values[0]\r\n            if (sopClassUID === SOPClassUIDs.VL_WHOLE_SLIDE_MICROSCOPY_IMAGE) {\r\n              const image = new dmv.metadata.VLWholeSlideMicroscopyImage({\r\n                metadata: item\r\n              })\r\n              seriesImages.push(image)\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      if (seriesImages.length > 0) {\r\n        images.push(seriesImages)\r\n      }\r\n    }))\r\n\r\n    return images\r\n  }\r\n\r\n  handleSeriesSelection (\r\n    { seriesInstanceUID }: { seriesInstanceUID: string }\r\n  ): void {\r\n    console.info(`switch to series \"${seriesInstanceUID}\"`)\r\n    let urlPath = (\r\n      `/studies/${this.props.studyInstanceUID}` +\r\n      `/series/${seriesInstanceUID}`\r\n    )\r\n    if (\r\n      this.props.location.pathname.includes('/series/') &&\r\n      this.props.location.search != null\r\n    ) {\r\n      urlPath += this.props.location.search\r\n    }\r\n    this.props.navigate(urlPath, { replace: true })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    if (this.state.slides.length === 0) {\r\n      return null\r\n    }\r\n    const firstSlide = this.state.slides[0] as Slide\r\n    const volumeInstances = firstSlide.volumeImages\r\n    if (volumeInstances.length === 0) {\r\n      return null\r\n    }\r\n    const refImage = volumeInstances[0]\r\n\r\n    /* If a series is encoded in the path, route the viewer to this series.\r\n     * Otherwise select the first series correspondent to\r\n     * the first slide contained in the study.\r\n     */\r\n    let selectedSeriesInstanceUID: string\r\n    if (this.props.location.pathname.includes('series/')) {\r\n      const fragments = this.props.location.pathname.split('/')\r\n      selectedSeriesInstanceUID = fragments[4]\r\n    } else {\r\n      selectedSeriesInstanceUID = volumeInstances[0].SeriesInstanceUID\r\n    }\r\n\r\n    let clinicalTrialMenu\r\n    if (refImage.ClinicalTrialSponsorName != null) {\r\n      clinicalTrialMenu = (\r\n        <Menu.SubMenu key='clinical-trial' title='Clinical Trial'>\r\n          <ClinicalTrial metadata={refImage} />\r\n        </Menu.SubMenu>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <Layout style={{ height: '100%' }} hasSider>\r\n        <Layout.Sider\r\n          width={300}\r\n          style={{\r\n            height: '100%',\r\n            borderRight: 'solid',\r\n            borderRightWidth: 0.25,\r\n            overflow: 'hidden',\r\n            background: 'none'\r\n          }}\r\n        >\r\n          <Menu\r\n            mode='inline'\r\n            defaultOpenKeys={['patient', 'study', 'clinical-trial', 'slides']}\r\n            style={{ height: '100%' }}\r\n            inlineIndent={14}\r\n          >\r\n            <Menu.SubMenu key='patient' title='Patient'>\r\n              <Patient metadata={refImage} />\r\n            </Menu.SubMenu>\r\n            <Menu.SubMenu key='study' title='Study'>\r\n              <Study metadata={refImage} />\r\n            </Menu.SubMenu>\r\n            {clinicalTrialMenu}\r\n            <Menu.SubMenu key='slides' title='Slides'>\r\n              <SlideList\r\n                client={this.props.client}\r\n                metadata={this.state.slides}\r\n                selectedSeriesInstanceUID={selectedSeriesInstanceUID}\r\n                onSeriesSelection={this.handleSeriesSelection}\r\n              />\r\n            </Menu.SubMenu>\r\n          </Menu>\r\n        </Layout.Sider>\r\n\r\n        <Routes>\r\n          <Route\r\n            path='/series/:seriesInstanceUID'\r\n            element={\r\n              <ParametrizedSlideViewer\r\n                client={this.props.client}\r\n                slides={this.state.slides}\r\n                preload={this.props.preload}\r\n                annotations={this.props.annotations}\r\n                enableAnnotationTools={this.props.enableAnnotationTools}\r\n                app={this.props.app}\r\n                user={this.props.user}\r\n              />\r\n            }\r\n          />\r\n        </Routes>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Viewer)\r\n","import React from 'react'\r\nimport {\r\n  NavLink\r\n} from 'react-router-dom'\r\nimport {\r\n  Col,\r\n  Descriptions,\r\n  Dropdown,\r\n  Input,\r\n  Layout,\r\n  Menu,\r\n  Modal,\r\n  Row,\r\n  Space\r\n} from 'antd'\r\nimport {\r\n  ApiOutlined,\r\n  CheckOutlined,\r\n  InfoOutlined,\r\n  StopOutlined,\r\n  UnorderedListOutlined,\r\n  UserOutlined\r\n} from '@ant-design/icons'\r\nimport { detect } from 'detect-browser'\r\n\r\nimport Button from './Button'\r\nimport { RouteComponentProps, withRouter } from '../utils/router'\r\n\r\ninterface HeaderProps extends RouteComponentProps {\r\n  app: {\r\n    name: string\r\n    version: string\r\n    homepage: string\r\n    uid: string\r\n    organization?: string\r\n  }\r\n  user?: {\r\n    name: string\r\n    email: string\r\n  }\r\n  showWorklistButton: boolean\r\n  onServerSelection: ({ url }: { url: string }) => void\r\n  onUserLogout?: () => void\r\n  showServerSelectionButton: boolean\r\n}\r\n\r\ninterface HeaderState {\r\n  selectedServerUrl?: string\r\n  isServerSelectionModalVisible: boolean\r\n  isServerSelectionDisabled: boolean\r\n}\r\n\r\n/**\r\n * React component for the application header.\r\n */\r\nclass Header extends React.Component<HeaderProps, HeaderState> {\r\n  constructor (props: HeaderProps) {\r\n    super(props)\r\n    this.state = {\r\n      isServerSelectionModalVisible: false,\r\n      isServerSelectionDisabled: true\r\n    }\r\n  }\r\n\r\n  handleInfoButtonClick = (): void => {\r\n    const browser = detect()\r\n    const environment: {\r\n      browser: {\r\n        name?: string\r\n        version?: string\r\n      }\r\n      os: {\r\n        name?: string\r\n      }\r\n    } = {\r\n      browser: {},\r\n      os: {}\r\n    }\r\n    if (browser != null) {\r\n      environment.browser = {\r\n        name: browser.name != null ? browser.name : undefined,\r\n        version: browser.version != null ? browser.version : undefined\r\n      }\r\n      environment.os = {\r\n        name: browser.os != null ? browser.os : undefined\r\n      }\r\n    }\r\n\r\n    Modal.info({\r\n      title: 'About',\r\n      width: 600,\r\n      content: (\r\n        <>\r\n          <Descriptions title='Application' column={1}>\r\n            <Descriptions.Item label='Name'>\r\n              {this.props.app.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label='Version'>\r\n              {this.props.app.version}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label='Homepage'>\r\n              {this.props.app.homepage}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions title='Browser' column={1}>\r\n            <Descriptions.Item label='Name'>\r\n              {environment.browser.name}\r\n            </Descriptions.Item>\r\n            <Descriptions.Item label='Version'>\r\n              {environment.browser.version}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n          <Descriptions title='Operating System' column={1}>\r\n            <Descriptions.Item label='Name'>\r\n              {environment.os.name}\r\n            </Descriptions.Item>\r\n          </Descriptions>\r\n        </>\r\n      ),\r\n      onOk (): void {}\r\n    })\r\n  }\r\n\r\n  handleServerSelectionButtonClick = (): void => {\r\n    this.setState({ isServerSelectionModalVisible: true })\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    let user = null\r\n    if (this.props.user !== undefined) {\r\n      const userMenuItems = []\r\n      if (this.props.onUserLogout !== undefined) {\r\n        userMenuItems.push(\r\n          {\r\n            label: 'Logout',\r\n            key: 'user-logout',\r\n            onClick: () => {\r\n              if (this.props.onUserLogout !== undefined) {\r\n                this.props.onUserLogout()\r\n              }\r\n            }\r\n          }\r\n        )\r\n      }\r\n      const userMenu = <Menu items={userMenuItems} />\r\n      user = (\r\n        <Dropdown overlay={userMenu} trigger={['click']}>\r\n          <Button\r\n            icon={UserOutlined}\r\n            onClick={e => e.preventDefault()}\r\n            label={`${this.props.user.name} (${this.props.user.email})`}\r\n          />\r\n        </Dropdown>\r\n      )\r\n    }\r\n\r\n    let worklistButton\r\n    if (this.props.showWorklistButton) {\r\n      worklistButton = (\r\n        <NavLink to='/'>\r\n          <Button icon={UnorderedListOutlined} tooltip='Go to worklist' />\r\n        </NavLink>\r\n      )\r\n    }\r\n\r\n    const infoButton = (\r\n      <Button\r\n        icon={InfoOutlined}\r\n        tooltip='Get app info'\r\n        onClick={this.handleInfoButtonClick}\r\n      />\r\n    )\r\n\r\n    let serverSelectionButton\r\n    if (this.props.showServerSelectionButton) {\r\n      serverSelectionButton = (\r\n        <Button\r\n          icon={ApiOutlined}\r\n          tooltip='Select server'\r\n          onClick={this.handleServerSelectionButtonClick}\r\n        />\r\n      )\r\n    }\r\n\r\n    const handleServerSelectionInput = (event: any): void => {\r\n      const value = event.target.value\r\n      let isDisabled = true\r\n      if (value != null) {\r\n        try {\r\n          const url = new URL(value)\r\n          if (url.protocol.startsWith('http') && url.pathname.length > 0) {\r\n            isDisabled = false\r\n          }\r\n        } catch (TypeError) {}\r\n      }\r\n      this.setState({\r\n        selectedServerUrl: value,\r\n        isServerSelectionDisabled: isDisabled\r\n      })\r\n    }\r\n\r\n    const handleServerSelectionCancellation = (event: any): void => {\r\n      this.setState({\r\n        selectedServerUrl: undefined,\r\n        isServerSelectionModalVisible: false,\r\n        isServerSelectionDisabled: true\r\n      })\r\n    }\r\n\r\n    const handleServerSelection = (event: any): void => {\r\n      const url = this.state.selectedServerUrl\r\n      let closeModal = false\r\n      if (url != null && url !== '') {\r\n        if (url.startsWith('http://') || url.startsWith('https://')) {\r\n          this.props.onServerSelection({ url })\r\n          closeModal = true\r\n        }\r\n      }\r\n      this.setState({\r\n        selectedServerUrl: undefined,\r\n        isServerSelectionModalVisible: !closeModal,\r\n        isServerSelectionDisabled: true\r\n      })\r\n    }\r\n\r\n    const logoUrl = process.env.PUBLIC_URL + '/logo.svg'\r\n\r\n    return (\r\n      <>\r\n        <Layout.Header style={{ width: '100%', padding: '0 14px' }}>\r\n          <Row>\r\n            <Col>\r\n              <Space align='center' direction='horizontal'>\r\n                <img\r\n                  src={logoUrl}\r\n                  alt=''\r\n                  style={{ height: '64px', margin: '-14px' }}\r\n                />\r\n              </Space>\r\n            </Col>\r\n            <Col flex='auto' />\r\n            <Col>\r\n              <Space direction='horizontal'>\r\n                {worklistButton}\r\n                {infoButton}\r\n                {serverSelectionButton}\r\n                {user}\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n        </Layout.Header>\r\n\r\n        <Modal\r\n          visible={this.state.isServerSelectionModalVisible}\r\n          title='Select DICOMweb server'\r\n          onOk={handleServerSelection}\r\n          onCancel={handleServerSelectionCancellation}\r\n        >\r\n          <Input\r\n            placeholder='Enter base URL of DICOMweb Study Service'\r\n            onChange={handleServerSelectionInput}\r\n            onPressEnter={handleServerSelection}\r\n            addonAfter={\r\n              this.state.isServerSelectionDisabled\r\n                ? <StopOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\r\n                : <CheckOutlined style={{ color: 'rgba(0,0,0,.45)' }} />\r\n            }\r\n          />\r\n        </Modal>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Header)\r\n","import React from 'react'\r\nimport { Result } from 'antd'\r\n\r\ninterface InfoPageProps {\r\n  type: string\r\n  title?: string\r\n  message?: string\r\n}\r\n\r\nconst InfoPage = ({ title, message }: InfoPageProps): JSX.Element => {\r\n  return (\r\n    <div style={{\r\n      height: '100vh',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center'\r\n    }}\r\n    >\r\n      <Result\r\n        title={title}\r\n        subTitle={message}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoPage\r\n","import React from 'react'\r\nimport {\r\n  Button,\r\n  Input,\r\n  message,\r\n  Space,\r\n  Table,\r\n  TablePaginationConfig\r\n} from 'antd'\r\nimport { ColumnsType } from 'antd/es/table'\r\nimport { FilterConfirmProps } from 'antd/es/table/interface'\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport DicomWebManager from '../DicomWebManager'\r\n\r\nimport * as dmv from 'dicom-microscopy-viewer'\r\n\r\nimport { withRouter, RouteComponentProps } from '../utils/router'\r\nimport { parseDate, parseName, parseSex, parseTime } from '../utils/values'\r\n\r\ninterface WorklistProps extends RouteComponentProps {\r\n  client: DicomWebManager\r\n}\r\n\r\ninterface WorklistState {\r\n  studies: dmv.metadata.Study[]\r\n  isLoading: boolean\r\n  numStudies: number\r\n  pageSize: number\r\n}\r\n\r\nclass Worklist extends React.Component<WorklistProps, WorklistState> {\r\n  private readonly defaultPageSize = 20\r\n\r\n  constructor (props: WorklistProps) {\r\n    super(props)\r\n    this.fetchData = this.fetchData.bind(this)\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.state = {\r\n      studies: [],\r\n      isLoading: false,\r\n      numStudies: 0,\r\n      pageSize: this.defaultPageSize\r\n    }\r\n  }\r\n\r\n  searchForStudies (): void {\r\n    const queryParams: { [key: string]: any } = { ModalitiesInStudy: 'SM' }\r\n    const searchOptions = { queryParams }\r\n    // TODO: retrieve remaining results\r\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\r\n      this.setState({\r\n        numStudies: studies.length,\r\n        studies: studies.slice(0, this.state.pageSize).map((study) => {\r\n          const { dataset } = dmv.metadata.formatMetadata(study)\r\n          return dataset as dmv.metadata.Study\r\n        })\r\n      })\r\n    }).catch((error) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n      message.error('An error occured. Search for studies failed.')\r\n      console.error(error)\r\n    })\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    this.searchForStudies()\r\n  }\r\n\r\n  componentDidUpdate (previousProps: WorklistProps): void {\r\n    if (this.props.client !== previousProps.client) {\r\n      this.searchForStudies()\r\n    }\r\n  }\r\n\r\n  handleClick (event: React.SyntheticEvent, study: dmv.metadata.Study): void {\r\n    this.props.navigate(`/studies/${study.StudyInstanceUID}`)\r\n  }\r\n\r\n  fetchData ({ offset, limit, searchCriteria }: {\r\n    offset: number\r\n    limit: number\r\n    searchCriteria?: { [attribute: string]: string }\r\n  }): void {\r\n    const queryParams: { [key: string]: any } = {\r\n      ModalitiesInStudy: 'SM',\r\n      offset: offset,\r\n      limit: limit\r\n    }\r\n    if (searchCriteria !== undefined) {\r\n      for (const key in searchCriteria) {\r\n        const value = searchCriteria[key]\r\n        if (key === 'PersonName') {\r\n          queryParams[key] = `*${value}*`\r\n        } else {\r\n          queryParams[key] = value\r\n        }\r\n      }\r\n      queryParams.fuzzymatching = 'true'\r\n    }\r\n    const searchOptions = { queryParams }\r\n    this.props.client.searchForStudies(searchOptions).then((studies) => {\r\n      this.setState({\r\n        studies: studies.map((study) => {\r\n          const { dataset } = dmv.metadata.formatMetadata(study)\r\n          return dataset as dmv.metadata.Study\r\n        })\r\n      })\r\n    }).catch(() => message.error('Request to search for studies failed.'))\r\n  }\r\n\r\n  handleChange (\r\n    pagination: TablePaginationConfig,\r\n    filters: any\r\n  ): void {\r\n    this.setState({ isLoading: true })\r\n    let index = pagination.current\r\n    if (index === undefined) {\r\n      index = 1\r\n    }\r\n    let pageSize = pagination.pageSize\r\n    if (pageSize === undefined) {\r\n      pageSize = this.state.pageSize\r\n    }\r\n    const offset = pageSize * (index - 1)\r\n    const limit = pageSize\r\n    console.debug(`search for studies of page #${index}...`)\r\n    const searchCriteria: { [attribute: string]: string } = {}\r\n    for (const dataIndex in filters) {\r\n      if (filters[dataIndex] !== null) {\r\n        searchCriteria[dataIndex] = filters[dataIndex][0].toString()\r\n      }\r\n    }\r\n    this.fetchData({ offset, limit, searchCriteria })\r\n    this.setState({ isLoading: false, pageSize: pageSize })\r\n  }\r\n\r\n  handleSearch = (\r\n    selectedKeys: React.Key[],\r\n    confirm: (params?: FilterConfirmProps) => void,\r\n    dataIndex: string\r\n  ): void => {\r\n    confirm()\r\n  }\r\n\r\n  handleReset = (clearFilters: () => void): void => {\r\n    clearFilters()\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const columns: ColumnsType<dmv.metadata.Study> = [\r\n      {\r\n        title: 'Accession Number',\r\n        dataIndex: 'AccessionNumber',\r\n        ...this.getColumnSearchProps('AccessionNumber')\r\n      },\r\n      {\r\n        title: 'Study ID',\r\n        dataIndex: 'StudyID',\r\n        ...this.getColumnSearchProps('StudyID')\r\n      },\r\n      {\r\n        title: 'Study Date',\r\n        dataIndex: 'StudyDate',\r\n        render: (value: string): string => parseDate(value)\r\n      },\r\n      {\r\n        title: 'Study Time',\r\n        dataIndex: 'StudyTime',\r\n        render: (value: string): string => parseTime(value)\r\n      },\r\n      {\r\n        title: 'Patient ID',\r\n        dataIndex: 'PatientID',\r\n        ...this.getColumnSearchProps('PatientID')\r\n      },\r\n      {\r\n        title: \"Patient's Name\",\r\n        dataIndex: 'PatientName',\r\n        render: (value: dmv.metadata.PersonName): string => parseName(value),\r\n        ...this.getColumnSearchProps('PatientName')\r\n      },\r\n      {\r\n        title: \"Patient's Sex\",\r\n        dataIndex: 'PatientSex',\r\n        render: (value: string): string => parseSex(value)\r\n      },\r\n      {\r\n        title: \"Patient's Birthdate\",\r\n        dataIndex: 'PatientBirthDate',\r\n        render: (value: string): string => parseDate(value)\r\n      },\r\n      {\r\n        title: \"Referring Physician's Name\",\r\n        dataIndex: 'ReferringPhysicianName',\r\n        render: (value: dmv.metadata.PersonName): string => parseName(value)\r\n      },\r\n      {\r\n        title: 'Modalities in Study',\r\n        dataIndex: 'ModalitiesInStudy',\r\n        render: (value: string[] | string): string => {\r\n          if (value === undefined) {\r\n            /*\r\n             * This should not happen, since the attribute is required.\r\n             * However, some origin servers don't include it.\r\n             */\r\n            return ''\r\n          } else {\r\n            return String(value)\r\n          }\r\n        }\r\n      }\r\n    ]\r\n\r\n    const pagination = {\r\n      defaultPageSize: this.defaultPageSize,\r\n      pageSize: this.state.pageSize,\r\n      hideOnSinglePage: true,\r\n      showSizeChanger: true,\r\n      showQuickJumper: true,\r\n      showTotal: (total: number, range: number[]) => {\r\n        return `${range[0]}-${range[1]} of ${total} studies`\r\n      },\r\n      total: this.state.numStudies\r\n    }\r\n\r\n    return (\r\n      <Table<dmv.metadata.Study>\r\n        style={{ cursor: 'pointer' }}\r\n        columns={columns}\r\n        rowKey={record => record.StudyInstanceUID}\r\n        dataSource={this.state.studies}\r\n        pagination={pagination}\r\n        onRow={(record: dmv.metadata.Study): object => {\r\n          return {\r\n            onClick: (event: React.SyntheticEvent): void => {\r\n              return this.handleClick(event, record)\r\n            }\r\n          }\r\n        }}\r\n        onChange={this.handleChange}\r\n        size='small'\r\n        loading={this.state.isLoading}\r\n      />\r\n    )\r\n  }\r\n\r\n  getColumnSearchProps = (dataIndex: string): object => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }: {\r\n      setSelectedKeys: (selectedKeys: React.Key[]) => void\r\n      selectedKeys: React.Key[]\r\n      confirm: (params?: FilterConfirmProps) => void\r\n      clearFilters: () => void\r\n    }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          placeholder='Search'\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(\r\n            e.target.value !== undefined ? [e.target.value] : []\r\n          )}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type='primary'\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size='small'\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button\r\n            onClick={() => this.handleReset(clearFilters)}\r\n            size='small'\r\n            style={{ width: 90 }}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: (filtered: boolean) => (\r\n      <SearchOutlined\r\n        style={{ color: filtered ? '#1890ff' : undefined }}\r\n      />\r\n    )\r\n  })\r\n}\r\n\r\nexport default withRouter(Worklist)\r\n","/**\r\n * Join a URI with a path to form a full URL.\r\n *\r\n * @param path - Path component\r\n * @param uri - Base URI to which the path component should be added\r\n */\r\nexport const joinUrl = (path: string, uri: string): string => {\r\n  let baseUri = uri\r\n  if (!baseUri.endsWith('/')) {\r\n    baseUri += '/'\r\n  }\r\n  const url = new URL(path, baseUri)\r\n  return url.toString()\r\n}\r\n\r\n/**\r\n * Check whether a URL contains an OAuth 2.0 authorization code.\r\n *\r\n * @param location - URL components (JavaScript location object)\r\n * @returns Whether the URL contains a code\r\n */\r\nexport const isAuthorizationCodeInUrl = (location: {\r\n  search: string\r\n  hash: string\r\n}): boolean => {\r\n  const searchParams = new URLSearchParams(location.search)\r\n  const hashParams = new URLSearchParams(location.hash.replace('#', '?'))\r\n\r\n  return Boolean(\r\n    searchParams.get('code') ??\r\n    searchParams.get('id_token') ??\r\n    searchParams.get('session_state') ??\r\n    hashParams.get('code') ??\r\n    hashParams.get('id_token') ??\r\n    hashParams.get('session_state')\r\n  )\r\n}\r\n","import { UserManager, User as UserData } from 'oidc-client'\r\n\r\nimport { OidcSettings } from '../AppConfig'\r\nimport { isAuthorizationCodeInUrl } from '../utils/url'\r\nimport { User, AuthManager, SignInCallback } from './'\r\n\r\nconst createUser = (userData: UserData): User => {\r\n  const profile = userData.profile\r\n  if (profile !== undefined) {\r\n    if (profile.name === undefined || profile.email === undefined) {\r\n      throw Error('Failed to obtain user \"name\" and \"email\".')\r\n    } else {\r\n      return {\r\n        name: profile.name,\r\n        email: profile.email\r\n      }\r\n    }\r\n  } else {\r\n    throw Error('Failed to obtain user profile.')\r\n  }\r\n}\r\n\r\nexport default class OidcManager implements AuthManager {\r\n  private _oidc: UserManager\r\n\r\n  constructor (baseUri: string, settings: OidcSettings) {\r\n    let responseType = 'code'\r\n    if (settings.grantType !== undefined) {\r\n      if (settings.grantType === 'implicit') {\r\n        responseType = 'id_token token'\r\n      }\r\n    }\r\n    this._oidc = new UserManager({\r\n      authority: settings.authority,\r\n      client_id: settings.clientId,\r\n      redirect_uri: baseUri,\r\n      scope: settings.scope,\r\n      response_type: responseType,\r\n      loadUserInfo: true,\r\n      automaticSilentRenew: true,\r\n      revokeAccessTokenOnSignout: true,\r\n      post_logout_redirect_uri: `${baseUri}/logout`\r\n    })\r\n    if (settings.endSessionEndpoint != null) {\r\n      /*\r\n       * Unfortunately, the end session endpoint alone cannot be provided to\r\n       * the construction of UserManager and the other metadata parameters\r\n       * would need to be provided as well. However, configuring all of them\r\n       * individually would not be desirable and they will be automatically\r\n       * determined anyways. Therefore, we first construct an object, get the\r\n       * metadata, update the metadata, and then reconstruct an object with the\r\n       * updated metadata.\r\n       */\r\n      this._oidc.metadataService.getMetadata().then(metadata => {\r\n        if (settings.endSessionEndpoint != null) {\r\n          metadata.end_session_endpoint = settings.endSessionEndpoint\r\n          this._oidc = new UserManager({\r\n            authority: settings.authority,\r\n            client_id: settings.clientId,\r\n            redirect_uri: baseUri,\r\n            scope: settings.scope,\r\n            response_type: responseType,\r\n            loadUserInfo: true,\r\n            automaticSilentRenew: true,\r\n            revokeAccessTokenOnSignout: true,\r\n            post_logout_redirect_uri: `${baseUri}/logout`,\r\n            metadata\r\n          })\r\n        }\r\n      }).catch((error) => {\r\n        console.error(\r\n          'failed to get metadata from authorization server: ',\r\n          error\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sign-in to authenticate the user and obtain authorization.\r\n   */\r\n  signIn = async ({ onSignIn }: {\r\n    onSignIn?: SignInCallback\r\n  }): Promise<void> => {\r\n    const handleSignIn = (userData: UserData): void => {\r\n      const user = createUser(userData)\r\n      const authorization = `${userData.token_type} ${userData.access_token}`\r\n      if (onSignIn != null) {\r\n        console.info('handling sign-in using provided callback function')\r\n        onSignIn({ user: user, authorization: authorization })\r\n      } else {\r\n        console.warn('no callback function was provided to handle sign-in')\r\n      }\r\n    }\r\n\r\n    if (isAuthorizationCodeInUrl(window.location)) {\r\n      /* Handle the callback from the authorization server: extract the code\r\n       * from the callback URL, obtain user information and the access token\r\n       * for the DICOMweb server.\r\n       */\r\n      console.info('obtaining authorization')\r\n      const userData = await this._oidc.signinCallback()\r\n      if (userData != null) {\r\n        console.info('obtained user data: ', userData)\r\n        handleSignIn(userData)\r\n      }\r\n    } else {\r\n      /* Redirect to the authorization server to authenticate the user\r\n       * and authorize the application to obtain user information and access\r\n       * the DICOMweb server.\r\n       */\r\n      const userData = await this._oidc.getUser()\r\n      if (userData === null || userData.expired) {\r\n        console.info('authenticating user')\r\n        await this._oidc.signinRedirect()\r\n      } else {\r\n        console.info('user has already been authenticated')\r\n        handleSignIn(userData)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sign-out to revoke authorization.\r\n   */\r\n  signOut = async (): Promise<void> => {\r\n    console.log('signing out user and revoking authorization')\r\n    return await this._oidc.signoutRedirect()\r\n  }\r\n\r\n  /**\r\n   * Get authorization. Requires prior sign-in.\r\n   */\r\n  getAuthorization = async (): Promise<string> => {\r\n    return await this._oidc.getUser().then((userData) => {\r\n      if (userData !== null) {\r\n        return userData.access_token\r\n      } else {\r\n        throw Error('Failed to obtain access token.')\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get user information. Requires prior sign-in.\r\n   */\r\n  getUser = async (): Promise<User> => {\r\n    return await this._oidc.getUser().then((userData) => {\r\n      if (userData === null) {\r\n        throw Error('Failed to obtain user information.')\r\n      }\r\n      return createUser(userData)\r\n    })\r\n  }\r\n}\r\n","import retry from 'retry'\r\n\r\nimport {\r\n  RetryRequestSettings,\r\n  DICOMwebClientRequestHookMetadata\r\n} from '../AppConfig'\r\n\r\ntype RequestHook = (\r\n  request: XMLHttpRequest,\r\n  metadata: DICOMwebClientRequestHookMetadata\r\n) => XMLHttpRequest\r\n\r\n/**\r\n * Returns a configured retry request hook function\r\n * that can be used to add retry functionality to XHR request.\r\n *\r\n * Default options:\r\n *   retries: 5\r\n *   factor: 3\r\n *   minTimeout: 1 * 1000\r\n *   maxTimeout: 60 * 1000\r\n *   randomize: true\r\n *\r\n * @param options\r\n * @param options.retires - Number of retries\r\n * @param options.factor - Factor\r\n * @param options.minTimeout - Min number of seconds to wait before next retry\r\n * @param options.maxTimeout - Max number of seconds to wait before next retry\r\n * @param options.randomize - Whether randomization should be applied\r\n * @param options.retryableStatusCodes HTTP status codes that can trigger a retry\r\n * @returns Configured retry request function\r\n */\r\nexport const getXHRRetryHook = (options: RetryRequestSettings = {\r\n  retries: 5,\r\n  factor: 3,\r\n  minTimeout: 1 * 1000,\r\n  maxTimeout: 60 * 1000,\r\n  randomize: true,\r\n  retryableStatusCodes: [429, 500]\r\n}): RequestHook => {\r\n  const retryOptions = options\r\n\r\n  if (options.retries != null) {\r\n    retryOptions.retries = options.retries\r\n  }\r\n\r\n  if (options.factor != null) {\r\n    retryOptions.factor = options.factor\r\n  }\r\n\r\n  if (options.minTimeout != null) {\r\n    retryOptions.minTimeout = options.minTimeout\r\n  }\r\n\r\n  if (options.maxTimeout != null) {\r\n    retryOptions.maxTimeout = options.maxTimeout\r\n  }\r\n\r\n  if (options.randomize != null) {\r\n    retryOptions.randomize = options.randomize\r\n  }\r\n\r\n  if (options.retryableStatusCodes != null) {\r\n    retryOptions.retryableStatusCodes = options.retryableStatusCodes\r\n  }\r\n\r\n  /**\r\n   * Request hook used to add retry functionality to XHR requests.\r\n   *\r\n   * @param request - XHR request instance\r\n   * @param metadata - Metadata about the request\r\n   * @param metadata.url - URL\r\n   * @param metadata.method - HTTP method\r\n   * @returns - XHR request instance (potentially modified)\r\n   */\r\n  const xhrRetryHook = (\r\n    request: XMLHttpRequest,\r\n    metadata: DICOMwebClientRequestHookMetadata\r\n  ): XMLHttpRequest => {\r\n    const { url, method } = metadata\r\n\r\n    function faultTolerantRequestSend (...args: any): void {\r\n      const operation = retry.operation(retryOptions)\r\n\r\n      operation.attempt(function operationAttempt (currentAttempt) {\r\n        const originalOnReadyStateChange = request.onreadystatechange\r\n\r\n        /** Overriding/extending XHR function */\r\n        request.onreadystatechange = function onReadyStateChange (...args: any): void {\r\n          if (originalOnReadyStateChange != null) {\r\n            originalOnReadyStateChange.apply(request, args)\r\n          }\r\n\r\n          if (retryOptions.retryableStatusCodes.includes(request.status)) {\r\n            const errorMessage = `Attempt to request ${url} failed.`\r\n            const attemptFailedError = new Error(errorMessage)\r\n            operation.retry(attemptFailedError)\r\n          }\r\n        }\r\n\r\n        /** Call open only on retry (after headers and other things were set in the xhr instance) */\r\n        if (currentAttempt > 1) {\r\n          console.warn(`Requesting ${url}... (attempt: ${currentAttempt})`)\r\n          request.open(method, url, true)\r\n        }\r\n      })\r\n\r\n      originalRequestSend.apply(request, args)\r\n    }\r\n\r\n    /** Overriding/extending XHR function */\r\n    const originalRequestSend = request.send\r\n    request.send = faultTolerantRequestSend\r\n\r\n    return request\r\n  }\r\n\r\n  return xhrRetryHook\r\n}\r\n\r\nexport default getXHRRetryHook\r\n","import * as dwc from 'dicomweb-client'\r\n\r\nimport { ServerSettings, DicomWebManagerErrorHandler } from './AppConfig'\r\nimport { joinUrl } from './utils/url'\r\nimport getXHRRetryHook from './utils/xhrRetryHook'\r\n\r\ninterface Store {\r\n  id: string\r\n  read: boolean\r\n  write: boolean\r\n  client: dwc.api.DICOMwebClient\r\n}\r\n\r\nexport default class DicomWebManager implements dwc.api.DICOMwebClient {\r\n  private readonly stores: Store[] = []\r\n\r\n  private readonly handleError: DicomWebManagerErrorHandler\r\n\r\n  constructor ({ baseUri, settings, onError }: {\r\n    baseUri: string\r\n    settings: ServerSettings[]\r\n    onError?: DicomWebManagerErrorHandler\r\n  }) {\r\n    if (onError != null) {\r\n      this.handleError = onError\r\n    } else {\r\n      this.handleError = (error, serverSettings) => {\r\n        console.error(error, serverSettings)\r\n      }\r\n    }\r\n\r\n    settings.forEach(serverSettings => {\r\n      if (serverSettings === undefined) {\r\n        throw Error('At least one server needs to be configured.')\r\n      }\r\n\r\n      let serviceUrl\r\n      if (serverSettings.url !== undefined) {\r\n        serviceUrl = serverSettings.url\r\n      } else if (serverSettings.path !== undefined) {\r\n        serviceUrl = joinUrl(serverSettings.path, baseUri)\r\n      } else {\r\n        throw new Error(\r\n          'Either path or full URL needs to be configured for server.'\r\n        )\r\n      }\r\n      const clientSettings: dwc.api.DICOMwebClientOptions = {\r\n        url: serviceUrl\r\n      }\r\n      if (serverSettings.qidoPathPrefix !== undefined) {\r\n        clientSettings.qidoURLPrefix = serverSettings.qidoPathPrefix\r\n      }\r\n      if (serverSettings.wadoPathPrefix !== undefined) {\r\n        clientSettings.wadoURLPrefix = serverSettings.wadoPathPrefix\r\n      }\r\n      if (serverSettings.stowPathPrefix !== undefined) {\r\n        clientSettings.stowURLPrefix = serverSettings.stowPathPrefix\r\n      }\r\n      if (serverSettings.retry !== undefined) {\r\n        clientSettings.requestHooks = [getXHRRetryHook(serverSettings.retry)]\r\n      }\r\n\r\n      clientSettings.errorInterceptor = (error: dwc.api.DICOMwebClientError) => {\r\n        this.handleError(error, serverSettings)\r\n      }\r\n\r\n      this.stores.push({\r\n        id: serverSettings.id,\r\n        write: serverSettings.write ?? false,\r\n        read: serverSettings.read ?? true,\r\n        client: new dwc.api.DICOMwebClient(clientSettings)\r\n      })\r\n    })\r\n\r\n    if (this.stores.length > 1) {\r\n      throw new Error('Only one store is supported for now.')\r\n    }\r\n  }\r\n\r\n  get baseURL (): string {\r\n    return this.stores[0].client.baseURL\r\n  }\r\n\r\n  updateHeaders = (fields: { [name: string]: string }): void => {\r\n    for (const f in fields) {\r\n      this.stores[0].client.headers[f] = fields[f]\r\n    }\r\n  }\r\n\r\n  get headers (): { [name: string]: string } {\r\n    return this.stores[0].client.headers\r\n  }\r\n\r\n  storeInstances = async (\r\n    options: dwc.api.StoreInstancesOptions\r\n  ): Promise<void> => {\r\n    if (this.stores[0].write) {\r\n      return await this.stores[0].client.storeInstances(options)\r\n    } else {\r\n      return await Promise.reject(\r\n        new Error('Store is not writable.')\r\n      )\r\n    }\r\n  }\r\n\r\n  searchForStudies = async (\r\n    options: dwc.api.SearchForStudiesOptions\r\n  ): Promise<dwc.api.Study[]> => {\r\n    return await this.stores[0].client.searchForStudies(options)\r\n  }\r\n\r\n  searchForSeries = async (\r\n    options: dwc.api.SearchForSeriesOptions\r\n  ): Promise<dwc.api.Series[]> => {\r\n    return await this.stores[0].client.searchForSeries(options)\r\n  }\r\n\r\n  searchForInstances = async (\r\n    options: dwc.api.SearchForInstancesOptions\r\n  ): Promise<dwc.api.Instance[]> => {\r\n    return await this.stores[0].client.searchForInstances(options)\r\n  }\r\n\r\n  retrieveStudyMetadata = async (\r\n    options: dwc.api.RetrieveStudyMetadataOptions\r\n  ): Promise<dwc.api.Metadata[]> => {\r\n    return await this.stores[0].client.retrieveStudyMetadata(options)\r\n  }\r\n\r\n  retrieveSeriesMetadata = async (\r\n    options: dwc.api.RetrieveSeriesMetadataOptions\r\n  ): Promise<dwc.api.Metadata[]> => {\r\n    return await this.stores[0].client.retrieveSeriesMetadata(options)\r\n  }\r\n\r\n  retrieveInstanceMetadata = async (\r\n    options: dwc.api.RetrieveInstanceMetadataOptions\r\n  ): Promise<dwc.api.Metadata[]> => {\r\n    return await this.stores[0].client.retrieveInstanceMetadata(options)\r\n  }\r\n\r\n  retrieveInstance = async (\r\n    options: dwc.api.RetrieveInstanceOptions\r\n  ): Promise<dwc.api.Dataset> => {\r\n    return await this.stores[0].client.retrieveInstance(options)\r\n  }\r\n\r\n  retrieveInstanceFrames = async (\r\n    options: dwc.api.RetrieveInstanceFramesOptions\r\n  ): Promise<dwc.api.Pixeldata[]> => {\r\n    return await this.stores[0].client.retrieveInstanceFrames(options)\r\n  }\r\n\r\n  retrieveInstanceRendered = async (\r\n    options: dwc.api.RetrieveInstanceRenderedOptions\r\n  ): Promise<dwc.api.Pixeldata> => {\r\n    return await this.stores[0].client.retrieveInstanceRendered(options)\r\n  }\r\n\r\n  retrieveInstanceFramesRendered = async (\r\n    options: dwc.api.RetrieveInstanceFramesRenderedOptions\r\n  ): Promise<dwc.api.Pixeldata> => {\r\n    return await this.stores[0].client.retrieveInstanceFramesRendered(options)\r\n  }\r\n\r\n  retrieveBulkData = async (\r\n    options: dwc.api.RetrieveBulkDataOptions\r\n  ): Promise<dwc.api.Bulkdata[]> => {\r\n    return await this.stores[0].client.retrieveBulkData(options)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter,\r\n  Navigate,\r\n  Route,\r\n  Routes,\r\n  useParams\r\n} from 'react-router-dom'\r\nimport { Layout, message } from 'antd'\r\nimport { FaSpinner } from 'react-icons/fa'\r\nimport * as dwc from 'dicomweb-client'\r\n\r\nimport AppConfig, { ServerSettings, ErrorMessageSettings } from './AppConfig'\r\nimport CaseViewer from './components/CaseViewer'\r\nimport Header from './components/Header'\r\nimport InfoPage from './components/InfoPage'\r\nimport Worklist from './components/Worklist'\r\n\r\nimport { joinUrl } from './utils/url'\r\nimport { User, AuthManager } from './auth'\r\nimport OidcManager from './auth/OidcManager'\r\nimport DicomWebManager from './DicomWebManager'\r\n\r\nfunction ParametrizedCaseViewer ({ client, user, app, config }: {\r\n  client: DicomWebManager\r\n  user?: User\r\n  app: {\r\n    name: string\r\n    version: string\r\n    uid: string\r\n    organization?: string\r\n  }\r\n  config: AppConfig\r\n}): JSX.Element {\r\n  const { studyInstanceUID } = useParams()\r\n\r\n  const enableAnnotationTools = !(config.disableAnnotationTools ?? false)\r\n  const preload = config.preload ?? false\r\n  return (\r\n    <CaseViewer\r\n      client={client}\r\n      user={user}\r\n      annotations={config.annotations}\r\n      preload={preload}\r\n      app={app}\r\n      enableAnnotationTools={enableAnnotationTools}\r\n      studyInstanceUID={studyInstanceUID}\r\n    />\r\n  )\r\n}\r\n\r\ninterface AppProps {\r\n  name: string\r\n  homepage: string\r\n  version: string\r\n  config: AppConfig\r\n}\r\n\r\ninterface AppState {\r\n  client: DicomWebManager\r\n  user?: User\r\n  isLoading: boolean\r\n  redirectTo?: string\r\n  wasAuthSuccessful: boolean\r\n  error?: ErrorMessageSettings\r\n}\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n  private readonly auth?: AuthManager\r\n\r\n  private readonly handleDICOMwebError = (\r\n    error: dwc.api.DICOMwebClientError,\r\n    serverSettings: ServerSettings\r\n  ): void => {\r\n    if (error.status === 401) {\r\n      this.signIn()\r\n    }\r\n    if (serverSettings.errorMessages !== undefined) {\r\n      serverSettings.errorMessages.forEach(\r\n        ({ status, message }: ErrorMessageSettings) => {\r\n          if (error.status === status) {\r\n            this.setState({\r\n              error: {\r\n                status: error.status,\r\n                message\r\n              }\r\n            })\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  constructor (props: AppProps) {\r\n    super(props)\r\n\r\n    console.info('instatiate app')\r\n    console.info(`app is located at \"${props.config.path}\"`)\r\n    const { protocol, host } = window.location\r\n    const baseUri = `${protocol}//${host}`\r\n    const appUri = joinUrl(props.config.path, baseUri)\r\n\r\n    const oidcSettings = props.config.oidc\r\n    if (oidcSettings !== undefined) {\r\n      console.info(\r\n        'app uses the following OIDC configuration: ',\r\n        props.config.oidc\r\n      )\r\n      this.auth = new OidcManager(appUri, oidcSettings)\r\n    }\r\n\r\n    if (props.config.servers.length === 0) {\r\n      throw Error('One server needs to be configured.')\r\n    }\r\n    console.info(\r\n      'app uses the following DICOMweb server configuration: ',\r\n      props.config.servers\r\n    )\r\n\r\n    this.handleServerSelection = this.handleServerSelection.bind(this)\r\n\r\n    message.config({ duration: 5 })\r\n\r\n    this.state = {\r\n      client: new DicomWebManager({\r\n        baseUri: baseUri,\r\n        settings: props.config.servers,\r\n        onError: this.handleDICOMwebError\r\n      }),\r\n      isLoading: true,\r\n      wasAuthSuccessful: false\r\n    }\r\n  }\r\n\r\n  handleServerSelection ({ url }: { url: string }): void {\r\n    console.info('select DICOMweb server: ', url)\r\n    const client = new DicomWebManager({\r\n      baseUri: '',\r\n      settings: [{\r\n        id: 'tmp',\r\n        url,\r\n        read: true,\r\n        write: false\r\n      }],\r\n      onError: this.handleDICOMwebError\r\n    })\r\n    client.updateHeaders(this.state.client.headers)\r\n    this.setState({ client })\r\n  }\r\n\r\n  /**\r\n   * Handle successful authentication event.\r\n   *\r\n   * Authorizes the DICOMweb client to access the DICOMweb server and directs\r\n   * the user back to the App.\r\n   *\r\n   * @param user - Information about the user\r\n   * @param authorization - Value of the \"Authorization\" HTTP header field\r\n   */\r\n  handleSignIn = ({ user, authorization }: {\r\n    user: User\r\n    authorization: string\r\n  }): void => {\r\n    console.info(\r\n      `handle sign in of user \"${user.name}\" and ` +\r\n      `update authorization token \"${authorization}\"`\r\n    )\r\n    const client = this.state.client\r\n    client.updateHeaders({ Authorization: authorization })\r\n    const fullPath = window.location.pathname + window.location.search\r\n    const basePath = this.props.config.path\r\n    let path = fullPath.substring(basePath.length)\r\n    if (basePath === '/' || basePath === '') {\r\n      path = fullPath\r\n    }\r\n    this.setState({\r\n      user: user,\r\n      client: client,\r\n      wasAuthSuccessful: true,\r\n      isLoading: false,\r\n      redirectTo: path\r\n    })\r\n  }\r\n\r\n  signIn (): void {\r\n    if (this.auth !== undefined) {\r\n      console.info('try to sign in user')\r\n      this.auth.signIn({ onSignIn: this.handleSignIn }).then(() => {\r\n        console.info('sign-in was successful')\r\n        this.setState({\r\n          isLoading: false,\r\n          redirectTo: undefined,\r\n          wasAuthSuccessful: true\r\n        })\r\n      }).catch((error) => {\r\n        console.error('sign-in failed ', error)\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        message.error('Could not sign-in user.')\r\n        this.setState({\r\n          isLoading: false,\r\n          redirectTo: undefined,\r\n          wasAuthSuccessful: false\r\n        })\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isLoading: false,\r\n        redirectTo: undefined,\r\n        wasAuthSuccessful: true\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount (): void {\r\n    this.signIn()\r\n  }\r\n\r\n  render (): React.ReactNode {\r\n    const appInfo = {\r\n      name: this.props.name,\r\n      version: this.props.version,\r\n      homepage: this.props.homepage,\r\n      uid: '1.2.826.0.1.3680043.9.7433.1.5',\r\n      organization: this.props.config.organization\r\n    }\r\n\r\n    const enableWorklist = !(\r\n      this.props.config.disableWorklist ?? false\r\n    )\r\n    const enableServerSelection = (\r\n      this.props.config.enableServerSelection ?? false\r\n    )\r\n\r\n    let worklist\r\n    if (enableWorklist) {\r\n      worklist = <Worklist client={this.state.client} />\r\n    } else {\r\n      worklist = <div>Worklist has been disabled.</div>\r\n    }\r\n\r\n    let isLogoutPossible = false\r\n    let onLogout: () => void\r\n    if (\r\n      // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\r\n      this.props.config.oidc != null &&\r\n      this.props.config.oidc.endSessionEndpoint != null\r\n    ) {\r\n      onLogout = (): void => {\r\n        if (this.auth != null) {\r\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n          this.auth.signOut()\r\n        }\r\n      }\r\n      isLogoutPossible = true\r\n    } else {\r\n      onLogout = () => {}\r\n      isLogoutPossible = false\r\n    }\r\n\r\n    const layoutStyle = { height: '100vh' }\r\n    const layoutContentStyle = { height: '100%' }\r\n\r\n    if (this.state.redirectTo !== undefined) {\r\n      return (\r\n        <BrowserRouter basename={this.props.config.path}>\r\n          <Navigate to={this.state.redirectTo} replace />\r\n        </BrowserRouter>\r\n      )\r\n    } else if (this.state.isLoading) {\r\n      return (\r\n        <BrowserRouter basename={this.props.config.path}>\r\n          <Layout style={layoutStyle}>\r\n            <Header\r\n              app={appInfo}\r\n              user={this.state.user}\r\n              showWorklistButton={false}\r\n              onServerSelection={this.handleServerSelection}\r\n              showServerSelectionButton={false}\r\n            />\r\n            <Layout.Content style={layoutContentStyle}>\r\n              <FaSpinner />\r\n            </Layout.Content>\r\n          </Layout>\r\n        </BrowserRouter>\r\n      )\r\n    } else if (!this.state.wasAuthSuccessful) {\r\n      return (\r\n        <InfoPage type='error' message='Sign-in failed.' />\r\n      )\r\n    } else if (this.state.error != null) {\r\n      return (\r\n        <InfoPage type='error' message={this.state.error.message} />\r\n      )\r\n    } else {\r\n      return (\r\n        <BrowserRouter basename={this.props.config.path}>\r\n          <Routes>\r\n            <Route\r\n              path='/studies/:studyInstanceUID/*'\r\n              element={\r\n                <Layout style={layoutStyle}>\r\n                  <Header\r\n                    app={appInfo}\r\n                    user={this.state.user}\r\n                    showWorklistButton={enableWorklist}\r\n                    onServerSelection={this.handleServerSelection}\r\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\r\n                    showServerSelectionButton={enableServerSelection}\r\n                  />\r\n                  <Layout.Content style={layoutContentStyle}>\r\n                    <ParametrizedCaseViewer\r\n                      client={this.state.client}\r\n                      user={this.state.user}\r\n                      config={this.props.config}\r\n                      app={appInfo}\r\n                    />\r\n                  </Layout.Content>\r\n                </Layout>\r\n              }\r\n            />\r\n            <Route\r\n              path='/logout'\r\n              element={\r\n                <Layout style={layoutStyle}>\r\n                  <Header\r\n                    app={appInfo}\r\n                    user={this.state.user}\r\n                    showWorklistButton={false}\r\n                    onServerSelection={this.handleServerSelection}\r\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\r\n                    showServerSelectionButton={enableServerSelection}\r\n                  />\r\n                  Logged out\r\n                </Layout>\r\n              }\r\n            />\r\n            <Route\r\n              path='/'\r\n              element={\r\n                <Layout style={layoutStyle}>\r\n                  <Header\r\n                    app={appInfo}\r\n                    user={this.state.user}\r\n                    showWorklistButton={false}\r\n                    onServerSelection={this.handleServerSelection}\r\n                    onUserLogout={isLogoutPossible ? onLogout : undefined}\r\n                    showServerSelectionButton={enableServerSelection}\r\n                  />\r\n                  <Layout.Content style={layoutContentStyle}>\r\n                    {worklist}\r\n                  </Layout.Content>\r\n                </Layout>\r\n              }\r\n            />\r\n          </Routes>\r\n        </BrowserRouter>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App\r\n"],"names":["Description","layout","labelLineHeight","undefined","this","props","hasLongValues","items","attributes","map","item","index","uid","generateUUID","label","name","labelStyle","lineHeight","contentStyle","fontWeight","whiteSpace","span","value","icon","title","header","extra","size","hoverable","selectable","bordered","actions","methods","column","children","React","ClinicalTrial","metadata","ClinicalTrialSponsorName","push","ClinicalTrialProtocolID","ClinicalTrialProtocolName","ClinicalTrialSiteName","ClinicalTrialTimePointID","parseName","Alphabetic","split","join","parseDate","year","substring","month","day","parseTime","hours","minutes","seconds","parseSex","F","M","O","Patient","PatientID","PatientName","PatientSex","PatientBirthDate","Study","AccessionNumber","StudyID","StudyDate","StudyTime","SlideItem","state","isLoading","overviewViewportRef","overviewViewer","setState","slide","overviewImages","length","current","innerHTML","console","info","SeriesInstanceUID","dmv","client","resizeFactor","render","container","resize","description","style","height","containerIdentifier","ref","seriesInstanceUIDs","SlideList","selectedSeriesInstanceUID","onSeriesSelection","seriesInstanceUID","slideList","slideItemList","i","slideItem","selectedKeys","width","onSelect","key","keyPath","domEvent","toString","mode","inlineIndent","AnnotationItem","handleVisibilityChange","bind","checked","event","onVisibilityChange","roiUID","roi","isVisible","identifier","otherProps","evaluations","forEach","nameValue","ConceptNameCodeSequence","CodeValue","nameMeaning","CodeMeaning","ValueType","dcmjs","valueMeaning","ConceptCodeSequence","textContentItem","TextValue","measurements","seq","MeasuredValueSequence","NumericValue","toPrecision","unit","MeasurementUnitsCodeSequence","align","paddingLeft","onChange","checkedChildren","unCheckedChildren","AnnotationList","handleMenuItemSelection","rois","visibleRoiUIDs","object","onSelection","has","paddingTop","paddingBottom","selectedRoiUIDs","values","onClick","AnnotationGroupItem","handleMeasurementSelection","handleOpacityChange","currentStyle","opacity","defaultStyle","annotationGroupUID","annotationGroup","onStyleChange","styleOptions","option","codeComponents","measurement","schemeDesignator","meaning","number","algorithmName","propertyCategory","propertyType","AnnotationGroupSequence","findIndex","AnnotationGroupUID","measurementOptions","MeasurementsSequence","measurementItem","CodingSchemeDesignator","dropdownMatchSelectWidth","disabled","settings","justify","gutter","range","min","max","step","plain","minWidth","defaultValue","direction","placement","content","overlayStyle","type","shape","SettingOutlined","AnnotationGroupList","annotationGroups","visibleAnnotationGroupUIDs","defaultAnnotationGroupStyles","onAnnotationGroupVisibilityChange","onAnnotationGroupStyleChange","Button","handleClick","text","button","Icon","isSelected","tooltip","Equipment","Manufacturer","ManufacturerModelName","DeviceSerialNumber","SoftwareVersions","InstitutionName","findContentItemsByName","concept","hasName","hasValueType","valueType","getROIs","report","matches","ContentSequence","Error","measurementsItem","measurementGroupItems","observerType","group","trackingUIDItem","algorithmNameItem","algorithmVersionItem","scoord3d","regionItem","GraphicType","frameOfReferenceUID","ReferencedFrameOfReferenceUID","coordinates","GraphicData","slice","evaluation","findEvaluationItems","findMeasurementItems","properties","trackingUID","UID","MeasurementReport","PersonObserverName","PersonObserverLoginName","DeviceObserverUID","DeviceObserverName","SpecimenUID","SpecimenIdentifier","ContainerIdentifier","ROIs","specimenUIDItem","specimenIdItem","containerIdItem","personNameItem","PersonName","personLoginNameItem","deviceUIDItem","deviceNameItem","Report","dataset","containerAttrs","specimenAttrs","observerAttrs","annotations","id","attrs","orientation","Item","groups","SpecimenPreparationAdditives","FIXATIVE","EMBEDDING_MEDIUM","SpecimenPreparationStepItems","SPECIMEN_IDENTIFIER","PARENT_SPECIMEN_IDENTIFIER","PROCESSING_TYPE","DATETIME_OF_PROCESSING","PROCESSING_STEP_DESCRIPTION","COLLECTION_METHOD","SAMPLING_METHOD","STAIN","SpecimenItem","specimenDescription","SpecimenDescriptionSequence","SpecimenShortDescription","PrimaryAnatomicStructureSequence","structures","SpecimenPreparationSequence","SpecimenPreparationStepContentItemSequence","equals","showstain","SpecimenList","overflowY","OpticalPathItem","handleLimitChange","handleLowerLimitChange","handleUpperLimitChange","handleColorRChange","handleColorGChange","handleColorBChange","handleRemoval","getCurrentColors","color","paletteColorLookupTable","limitValues","previousProps","previousState","opticalPath","opticalPathIdentifier","Array","isArray","rgb2hex","data","onRemoval","illuminationWaveLength","illuminationColor","maxValue","Math","pow","BitsAllocated","isMonochromatic","colorSettings","windowSettings","colors","offset","count","borderStyle","borderWidth","borderColor","visibility","backgroundImage","buttons","isRemovable","DeleteOutlined","EyeOutlined","EyeInvisibleOutlined","Option","Select","OpticalPathList","selectedOpticalPathIdentifier","handleItemAddition","handleItemRemoval","handleItemSelectionChange","onOpticalPathActivityChange","isActive","opticalPathSelector","isSelectable","opticalPaths","opticalPathItems","optionItems","images","OpticalPathSequence","opticalPathItem","OpticalPathIdentifier","OpticalPathDescription","activeOpticalPathIdentifiers","visibleOpticalPathIdentifiers","defaultOpticalPathStyles","onOpticalPathVisibilityChange","onOpticalPathStyleChange","padding","allowClear","AppstoreAddOutlined","MappingItem","mappingUID","mapping","MappingList","mappings","visibleMappingUIDs","defaultMappingStyles","onMappingVisibilityChange","onMappingStyleChange","SegmentItem","segmentUID","segment","SegmentList","segments","visibleSegmentUIDs","defaultSegmentStyles","onSegmentVisibilityChange","onSegmentStyleChange","SOPClassUIDs","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","_buildKey","codingScheme","codeValue","_getRoiKey","findingName","_constructViewers","labelViewer","preload","volumeViewer","volumeImages","controls","activateSelectInteraction","labelImages","SlideViewer","findingOptions","evaluationOptions","geometryTypeOptions","volumeViewportRef","labelViewportRef","defaultRoiStyle","stroke","fill","roiStyles","selectionColor","selectedRoiStyle","loadPresentationStates","searchForInstances","studyInstanceUID","queryParams","Modality","then","matchedInstances","rawInstance","instance","SOPInstanceUID","retrieveInstance","sopInstanceUID","retrievedInstance","dict","areVolumeImagesMonochrome","presentationState","doesMatch","AdvancedBlendingSequence","blendingItem","includes","selectedPresentationStateUID","setPresentationState","presentationStates","Object","catch","error","message","getAllOpticalPaths","opticalPathStyles","hideOpticalPath","deactivateOpticalPath","refInstanceItems","ReferencedInstanceSequence","ReferencedImageSequence","imageItem","sopInstanceUIDs","ReferencedSOPInstanceUID","paletteColorLUT","PaletteColorLookupTableSequence","cpLUTItem","PaletteColorLookupTableUID","redDescriptor","RedPaletteColorLookupTableDescriptor","greenDescriptor","GreenPaletteColorLookupTableDescriptor","blueDescriptor","BluePaletteColorLookupTableDescriptor","redData","RedPaletteColorLookupTableData","Uint16Array","greenData","GreenPaletteColorLookupTableData","blueData","BluePaletteColorLookupTableData","redSegmentedData","SegmentedRedPaletteColorLookupTableData","greenSegmentedData","SegmentedGreenPaletteColorLookupTableData","blueSegmentedData","SegmentedBluePaletteColorLookupTableData","SoftcopyVOILUTSequence","voiLUTItem","windowCenter","WindowCenter","windowWidth","WindowWidth","selectedOpticalPathIdentifiers","Set","keys","setOpticalPathStyle","activateOpticalPath","showOpticalPath","add","searchParams","URLSearchParams","search","set","pathname","replace","getRoiStyle","addAnnotations","SOPClassUID","COMPREHENSIVE_3D_SR","templateSeq","ContentTemplateSequence","TemplateIdentifier","_implementsTID1500","subjectClassValue","retrievedConcept","expectedConcept","_describesSpecimenSubject","debug","measurementGroups","foundRegion","regions","_containsROIAnnotations","image","FrameOfReferenceUID","doesROIExist","getAllROIs","some","otherROI","a","b","graphicType","graphicData","s1","s2","j","_areROIsEqual","addROI","forceUpdate","addAnnotationGroups","searchForSeries","matchedSeries","s","series","retrieveSeriesMetadata","retrievedMetadata","filter","ann","refImage","addSegmentations","segmentations","seg","addSegments","addParametricMaps","parametricMaps","pm","addParameterMappings","populateViewports","setDefaultPresentationState","onRoiModified","onRoiDrawn","detail","payload","selectedFinding","selectedEvaluations","findingItem","relationshipType","addEvaluation","onRoiSelected","selectedRoi","setROIStyle","onLoadingStarted","onLoadingEnded","onFrameLoadingStarted","frameInfo","frameNumber","loadingFrames","onFrameLoadingEnded","delete","sopClassUID","VL_WHOLE_SLIDE_MICROSCOPY_IMAGE","channelIdentifier","pixelDataStatistics","pixelArray","chunks","ceil","minValues","maxValues","pixels","stats","numFramesSampled","getOpticalPathStyle","onRoiRemoved","annotation","finding","geometryTypes","componentSetup","componentCleanup","handleRoiDrawing","handleRoiTranslation","handleRoiModification","handleRoiVisibilityChange","handleRoiRemoval","handleAnnotationConfigurationCancellation","handleAnnotationGeometryTypeSelection","handleAnnotationMeasurementActivation","handleAnnotationFindingSelection","handleAnnotationEvaluationSelection","handleAnnotationEvaluationClearance","handleAnnotationConfigurationCompletion","handleAnnotationSelection","handleAnnotationVisibilityChange","handleAnnotationGroupVisibilityChange","handleAnnotationGroupStyleChange","handleReportGeneration","handleReportVerification","handleReportCancellation","handleSegmentVisibilityChange","handleSegmentStyleChange","handleMappingVisibilityChange","handleMappingStyleChange","handleOpticalPathVisibilityChange","handleOpticalPathStyleChange","handleOpticalPathActivityChange","handlePresentationStateSelection","handlePresentationStateReset","generatedReport","isAnnotationModalVisible","isReportModalVisible","isRoiDrawingActive","isRoiTranslationActive","isRoiModificationActive","areRoisHidden","cleanup","isOpticalPathVisible","isOpticalPathActive","document","body","removeEventListener","window","addEventListener","deactivateDrawInteraction","deactivateModifyInteraction","deactivateTranslateInteraction","hasICCProfile","ICCProfile","bulkdataReferences","selectedGeometryType","target","selectedMarkup","code","filteredEvaluations","geometryType","markup","activateDrawInteraction","getOpticalPathMetadata","observer","refSpecimen","user","loginName","email","warn","observationContext","observerPersonContext","observerIdentifyingAttributes","observerDeviceContext","app","manufacturerName","modelName","subjectContext","subjectClass","subjectClassSpecificContext","imagingMeasurements","findingType","find","trackingIdentifier","referencedRegion","qualitativeEvaluations","MappingResource","measurementReport","languageOfContentItemAndDescendants","procedureReported","evidence","seriesNumber","seriesDescription","instanceNumber","manufacturer","previousVersions","fileMetaInformationVersionArray","Uint8Array","fileMeta","Value","buffer","vr","writer","write","storeInstances","datasets","response","log","getROI","showAnnotationGroup","hideAnnotationGroup","setAnnotationGroupStyle","showSegment","hideSegment","setSegmentStyle","showParameterMapping","hideParameterMapping","setParameterMappingStyle","getOpticalPathDefaultStyle","paletteColorLookupTableUID","defaultColors","numVisible","urlPath","deactivateSelectInteraction","deactivateSnapInteraction","isModifyInteractionActive","activateSnapInteraction","activateModifyInteraction","isTranslateInteractionActive","activateTranslateInteraction","removeROI","areROIsVisible","hideROIs","showROIs","getAllSegments","getAllParameterMappings","getAllAnnotationGroups","annotationMenuItems","openSubMenuItems","geometryTypeOptionsMapping","point","circle","box","polygon","line","freehandpolygon","freehandline","selections","defaultActiveFirstOption","onClear","specimenMenu","equipmentMenu","sort","opticalPathMetadata","presentationStateMenu","segmentationMenu","parametricMapMenu","annotationGroupMenu","toolbar","opticalPathMenu","presentationStateOptions","ContentDescription","maxWidth","UndoOutlined","segmentMetadata","getSegmentStyle","getSegmentMetadata","mappingMetadata","getParameterMappingStyle","getParameterMappingMetadata","annotationGroupMetadata","getAnnotationGroupStyle","getAnnotationGroupMetadata","toolbarHeight","enableAnnotationTools","FaDrawPolygon","FaHandPointer","FaHandPaper","FaTrash","FaEye","FaEyeSlash","FaSave","cursor","hasSider","overflow","visible","onOk","onCancel","okText","reverseArrow","borderLeft","borderLeftWidth","background","defaultOpenKeys","forceSubMenuRender","ImageFlavors","hasImageFlavor","imageFlavor","ImageType","areSameAcquisition","AcquisitionUID","Slide","options","opticalPathIdentifiers","containerIdentifiers","frameOfReferenceUIDs","VOLUME","LABEL","OVERVIEW","THUMBNAIL","samplesPerPixel","SamplesPerPixel","PhotometricInterpretation","createSlides","slideMetadata","filteredLabelImages","filteredVolumeImages","slideMetadataIndex","_doesImageBelongToSlide","filteredOverviewImages","slideMetadataItem","slides","imgA","imgB","Number","ParametrizedSlideViewer","selectedSlide","presentationStateUID","get","viewer","Viewer","handleSeriesSelection","fetchImageMetadata","StudyInstanceUID","Promise","all","loadingSeries","seriesImages","volumeInstances","clinicalTrialMenu","borderRight","borderRightWidth","path","element","Header","handleInfoButtonClick","browser","detect","environment","os","version","Modal","homepage","handleServerSelectionButtonClick","isServerSelectionModalVisible","isServerSelectionDisabled","worklistButton","userMenuItems","onUserLogout","userMenu","overlay","trigger","UserOutlined","e","preventDefault","showWorklistButton","to","UnorderedListOutlined","serverSelectionButton","infoButton","InfoOutlined","showServerSelectionButton","ApiOutlined","handleServerSelection","url","selectedServerUrl","closeModal","startsWith","onServerSelection","src","process","alt","margin","flex","placeholder","isDisabled","URL","protocol","TypeError","onPressEnter","addonAfter","StopOutlined","CheckOutlined","display","alignItems","justifyContent","subTitle","Worklist","defaultPageSize","handleSearch","confirm","dataIndex","handleReset","clearFilters","getColumnSearchProps","filterDropdown","setSelectedKeys","marginBottom","SearchOutlined","filterIcon","filtered","fetchData","handleChange","studies","numStudies","pageSize","searchOptions","ModalitiesInStudy","searchForStudies","study","limit","searchCriteria","fuzzymatching","pagination","filters","columns","String","hideOnSinglePage","showSizeChanger","showQuickJumper","showTotal","total","rowKey","record","dataSource","onRow","loading","joinUrl","uri","baseUri","endsWith","isAuthorizationCodeInUrl","hashParams","hash","Boolean","createUser","userData","profile","OidcManager","_oidc","signIn","onSignIn","handleSignIn","authorization","token_type","access_token","signinCallback","getUser","expired","signinRedirect","signOut","signoutRedirect","getAuthorization","responseType","grantType","UserManager","authority","client_id","clientId","redirect_uri","scope","response_type","loadUserInfo","automaticSilentRenew","revokeAccessTokenOnSignout","post_logout_redirect_uri","endSessionEndpoint","metadataService","getMetadata","end_session_endpoint","retries","factor","minTimeout","maxTimeout","randomize","retryableStatusCodes","retryOptions","xhrRetryHook","request","method","originalRequestSend","send","operation","retry","attempt","currentAttempt","originalOnReadyStateChange","onreadystatechange","args","apply","status","errorMessage","attemptFailedError","open","DicomWebManager","onError","stores","handleError","updateHeaders","fields","f","headers","reject","retrieveStudyMetadata","retrieveInstanceMetadata","retrieveInstanceFrames","retrieveInstanceRendered","retrieveInstanceFramesRendered","retrieveBulkData","serverSettings","serviceUrl","clientSettings","qidoPathPrefix","qidoURLPrefix","wadoPathPrefix","wadoURLPrefix","stowPathPrefix","stowURLPrefix","requestHooks","getXHRRetryHook","errorInterceptor","read","dwc","baseURL","ParametrizedCaseViewer","config","disableAnnotationTools","CaseViewer","App","auth","handleDICOMwebError","errorMessages","Authorization","fullPath","basePath","wasAuthSuccessful","redirectTo","host","appUri","oidcSettings","oidc","servers","duration","worklist","appInfo","organization","enableWorklist","disableWorklist","enableServerSelection","onLogout","isLogoutPossible","layoutStyle","layoutContentStyle","basename"],"sourceRoot":""}